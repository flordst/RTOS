
RTOS_Home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b618  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000127c  0800b7a8  0800b7a8  0001b7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca24  0800ca24  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca24  0800ca24  0001ca24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca2c  0800ca2c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca2c  0800ca2c  0001ca2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca30  0800ca30  0001ca30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ca34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00004eec  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200050d8  200050d8  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020531  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9e  00000000  00000000  0004074d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  000446f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d8  00000000  00000000  00045e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a6d  00000000  00000000  00047420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001afb5  00000000  00000000  0006ce8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3c22  00000000  00000000  00087e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016ba64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007774  00000000  00000000  0016bab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b790 	.word	0x0800b790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800b790 	.word	0x0800b790

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <OLED_SSD1306_Send_Command>:
 * @brief Send Command to OLED
 * @param cmd : OLED commands 
 * @retval None
 */
void OLED_SSD1306_Send_Command(uint8_t cmd)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	/* control byte to send commands "Co=0 D/C=0 0 0 0 0 0 0 ---> 0x00" 
	Refer 8.1.5.2 Write mode for I2C (Page 20 of OLED SSD1306 Data Sheet*/
	uint8_t control_byte = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
	
	/* Data buffer to store control and command bytes*/
	uint8_t command_tx[2];
	
	command_tx[0] = control_byte;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	733b      	strb	r3, [r7, #12]
	command_tx[1] = cmd;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	737b      	strb	r3, [r7, #13]
	
	/* Transmit the command */
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, OLED_I2C_ADDRESS, 1, 10) == HAL_OK)
 8001002:	230a      	movs	r3, #10
 8001004:	2201      	movs	r2, #1
 8001006:	2178      	movs	r1, #120	; 0x78
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <OLED_SSD1306_Send_Command+0x44>)
 800100a:	f002 f877 	bl	80030fc <HAL_I2C_IsDeviceReady>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d108      	bne.n	8001026 <OLED_SSD1306_Send_Command+0x3a>
		HAL_I2C_Master_Transmit(& myI2Chandle,OLED_I2C_ADDRESS, command_tx, 2, 100);
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2302      	movs	r3, #2
 800101e:	2178      	movs	r1, #120	; 0x78
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <OLED_SSD1306_Send_Command+0x44>)
 8001022:	f001 ff6d 	bl	8002f00 <HAL_I2C_Master_Transmit>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20004f28 	.word	0x20004f28

08001034 <OLED_SSD1306_UpdateScreen>:
/**
 * @brief  Update the OLED Screen
 * @retval None
 */
void OLED_SSD1306_UpdateScreen(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0a4      	sub	sp, #144	; 0x90
 8001038:	af02      	add	r7, sp, #8
	uint8_t m;
	uint8_t control_byte = 0x40;
 800103a:	2340      	movs	r3, #64	; 0x40
 800103c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t temp[OLED_WIDTH+1];
  for (m = 0; m < 8 ; m++)
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001046:	e042      	b.n	80010ce <OLED_SSD1306_UpdateScreen+0x9a>
	{
		OLED_SSD1306_Send_Command(OLED_PAGE_START_ADDR + m);
 8001048:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800104c:	3b50      	subs	r3, #80	; 0x50
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ffcb 	bl	8000fec <OLED_SSD1306_Send_Command>
		OLED_SSD1306_Send_Command(OLED_LOW_COLUMN_START_ADDR);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff ffc8 	bl	8000fec <OLED_SSD1306_Send_Command>
		OLED_SSD1306_Send_Command(OLED_HIGH_COLUMN_START_AADR);
 800105c:	2010      	movs	r0, #16
 800105e:	f7ff ffc5 	bl	8000fec <OLED_SSD1306_Send_Command>
		
		
		/* Fill the data by prepending control byte */
		temp[0] = control_byte;
 8001062:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001066:	713b      	strb	r3, [r7, #4]
		uint8_t i;
		for (i=0; i< OLED_WIDTH; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800106e:	e014      	b.n	800109a <OLED_SSD1306_UpdateScreen+0x66>
		{
			temp[i+1] = OLED_Buffer[(OLED_WIDTH *m) + i];
 8001070:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001074:	01da      	lsls	r2, r3, #7
 8001076:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800107a:	441a      	add	r2, r3
 800107c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001080:	3301      	adds	r3, #1
 8001082:	4917      	ldr	r1, [pc, #92]	; (80010e0 <OLED_SSD1306_UpdateScreen+0xac>)
 8001084:	5c8a      	ldrb	r2, [r1, r2]
 8001086:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800108a:	440b      	add	r3, r1
 800108c:	f803 2c84 	strb.w	r2, [r3, #-132]
		for (i=0; i< OLED_WIDTH; i++)
 8001090:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001094:	3301      	adds	r3, #1
 8001096:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800109a:	f997 3086 	ldrsb.w	r3, [r7, #134]	; 0x86
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dae6      	bge.n	8001070 <OLED_SSD1306_UpdateScreen+0x3c>
		}
	  
		/* Trasnmit the appropriate data in the OLED_buffer */
		if(HAL_I2C_IsDeviceReady(& myI2Chandle, OLED_I2C_ADDRESS, 1, 10) == HAL_OK)
 80010a2:	230a      	movs	r3, #10
 80010a4:	2201      	movs	r2, #1
 80010a6:	2178      	movs	r1, #120	; 0x78
 80010a8:	480e      	ldr	r0, [pc, #56]	; (80010e4 <OLED_SSD1306_UpdateScreen+0xb0>)
 80010aa:	f002 f827 	bl	80030fc <HAL_I2C_IsDeviceReady>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d107      	bne.n	80010c4 <OLED_SSD1306_UpdateScreen+0x90>
		  HAL_I2C_Master_Transmit(& myI2Chandle, OLED_I2C_ADDRESS, temp, OLED_WIDTH+1,100);
 80010b4:	1d3a      	adds	r2, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2381      	movs	r3, #129	; 0x81
 80010bc:	2178      	movs	r1, #120	; 0x78
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <OLED_SSD1306_UpdateScreen+0xb0>)
 80010c0:	f001 ff1e 	bl	8002f00 <HAL_I2C_Master_Transmit>
  for (m = 0; m < 8 ; m++)
 80010c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c8:	3301      	adds	r3, #1
 80010ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80010ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d9b8      	bls.n	8001048 <OLED_SSD1306_UpdateScreen+0x14>
		
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3788      	adds	r7, #136	; 0x88
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000208 	.word	0x20000208
 80010e4:	20004f28 	.word	0x20004f28

080010e8 <OLED_SSD1306_DrawPixel>:
 * @param  x,y: pixel cordinates
 * @param  color: colour value
 * @retval None
 */
void OLED_SSD1306_DrawPixel(uint16_t x, uint16_t y, OLED_COLOR_t color)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	460b      	mov	r3, r1
 80010f4:	80bb      	strh	r3, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	70fb      	strb	r3, [r7, #3]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	2b7f      	cmp	r3, #127	; 0x7f
 80010fe:	d848      	bhi.n	8001192 <OLED_SSD1306_DrawPixel+0xaa>
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	2b3f      	cmp	r3, #63	; 0x3f
 8001104:	d845      	bhi.n	8001192 <OLED_SSD1306_DrawPixel+0xaa>
		/*error*/
		return;
	}
	
	/* check if pixels are inverted */
	if(OLED_SSD1306.Inverted)
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <OLED_SSD1306_DrawPixel+0xb8>)
 8001108:	791b      	ldrb	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <OLED_SSD1306_DrawPixel+0x34>
	{
		color = (OLED_COLOR_t)!color;
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* set color */
	if(color == OLED_COLOR_WHITE)
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d11a      	bne.n	8001158 <OLED_SSD1306_DrawPixel+0x70>
	{
		OLED_Buffer[ x + (y / 8) * OLED_WIDTH ] |= 1 << (y % 8);
 8001122:	88fa      	ldrh	r2, [r7, #6]
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	b298      	uxth	r0, r3
 800112a:	4603      	mov	r3, r0
 800112c:	01db      	lsls	r3, r3, #7
 800112e:	4413      	add	r3, r2
 8001130:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <OLED_SSD1306_DrawPixel+0xbc>)
 8001132:	5cd3      	ldrb	r3, [r2, r3]
 8001134:	b25a      	sxtb	r2, r3
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	b25b      	sxtb	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b259      	sxtb	r1, r3
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	4603      	mov	r3, r0
 800114c:	01db      	lsls	r3, r3, #7
 800114e:	4413      	add	r3, r2
 8001150:	b2c9      	uxtb	r1, r1
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <OLED_SSD1306_DrawPixel+0xbc>)
 8001154:	54d1      	strb	r1, [r2, r3]
 8001156:	e01d      	b.n	8001194 <OLED_SSD1306_DrawPixel+0xac>
	}
	else
	{
		OLED_Buffer[ x + (y / 8) * OLED_WIDTH ] &= ~(1 << (y % 8));
 8001158:	88fa      	ldrh	r2, [r7, #6]
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	b298      	uxth	r0, r3
 8001160:	4603      	mov	r3, r0
 8001162:	01db      	lsls	r3, r3, #7
 8001164:	4413      	add	r3, r2
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <OLED_SSD1306_DrawPixel+0xbc>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	b25a      	sxtb	r2, r3
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	2101      	movs	r1, #1
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	b25b      	sxtb	r3, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4013      	ands	r3, r2
 8001180:	b259      	sxtb	r1, r3
 8001182:	88fa      	ldrh	r2, [r7, #6]
 8001184:	4603      	mov	r3, r0
 8001186:	01db      	lsls	r3, r3, #7
 8001188:	4413      	add	r3, r2
 800118a:	b2c9      	uxtb	r1, r1
 800118c:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <OLED_SSD1306_DrawPixel+0xbc>)
 800118e:	54d1      	strb	r1, [r2, r3]
 8001190:	e000      	b.n	8001194 <OLED_SSD1306_DrawPixel+0xac>
		return;
 8001192:	bf00      	nop
	}
	
}
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000608 	.word	0x20000608
 80011a4:	20000208 	.word	0x20000208

080011a8 <OLED_SSD1306_Putc>:
 * @param  *Font: Pointer to @ref OLED_FontDef_t structure with used font
 * @param  color: Color used for drawing. This parameter can be a value of @ref OLED_COLOR_t enumeration
 * @retval Character written
 */
char OLED_SSD1306_Putc(char ch, OLED_FontDef_t* Font, OLED_COLOR_t color)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if((OLED_WIDTH <= (OLED_SSD1306.CurrentX)) || ((OLED_HEIGHT <= OLED_SSD1306.CurrentY)))
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <OLED_SSD1306_Putc+0xec>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	2b7f      	cmp	r3, #127	; 0x7f
 80011be:	d803      	bhi.n	80011c8 <OLED_SSD1306_Putc+0x20>
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <OLED_SSD1306_Putc+0xec>)
 80011c2:	885b      	ldrh	r3, [r3, #2]
 80011c4:	2b3f      	cmp	r3, #63	; 0x3f
 80011c6:	d901      	bls.n	80011cc <OLED_SSD1306_Putc+0x24>
	{
		return 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e05e      	b.n	800128a <OLED_SSD1306_Putc+0xe2>
	}
	
	/* Go through the font data and draw the corresponding pixel to display the char*/
	for (i = 0; i < Font->FontHeight; i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e04b      	b.n	800126a <OLED_SSD1306_Putc+0xc2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	3b20      	subs	r3, #32
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	7849      	ldrb	r1, [r1, #1]
 80011de:	fb01 f303 	mul.w	r3, r1, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	440b      	add	r3, r1
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	e030      	b.n	8001258 <OLED_SSD1306_Putc+0xb0>
		{
			if((b << j) & 0x8000)
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d010      	beq.n	8001228 <OLED_SSD1306_Putc+0x80>
			{
				OLED_SSD1306_DrawPixel(OLED_SSD1306.CurrentX +j, OLED_SSD1306.CurrentY + i, (OLED_COLOR_t) color);
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <OLED_SSD1306_Putc+0xec>)
 8001208:	881a      	ldrh	r2, [r3, #0]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <OLED_SSD1306_Putc+0xec>)
 8001214:	885a      	ldrh	r2, [r3, #2]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	79ba      	ldrb	r2, [r7, #6]
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff ff61 	bl	80010e8 <OLED_SSD1306_DrawPixel>
 8001226:	e014      	b.n	8001252 <OLED_SSD1306_Putc+0xaa>
			}
			else
			{
				OLED_SSD1306_DrawPixel(OLED_SSD1306.CurrentX +j, OLED_SSD1306.CurrentY + i, (OLED_COLOR_t) !color);
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <OLED_SSD1306_Putc+0xec>)
 800122a:	881a      	ldrh	r2, [r3, #0]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	b29b      	uxth	r3, r3
 8001230:	4413      	add	r3, r2
 8001232:	b298      	uxth	r0, r3
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <OLED_SSD1306_Putc+0xec>)
 8001236:	885a      	ldrh	r2, [r3, #2]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b299      	uxth	r1, r3
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf0c      	ite	eq
 8001246:	2301      	moveq	r3, #1
 8001248:	2300      	movne	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	f7ff ff4b 	bl	80010e8 <OLED_SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	3301      	adds	r3, #1
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4293      	cmp	r3, r2
 8001262:	d3c8      	bcc.n	80011f6 <OLED_SSD1306_Putc+0x4e>
	for (i = 0; i < Font->FontHeight; i++)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	461a      	mov	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4293      	cmp	r3, r2
 8001274:	d3ad      	bcc.n	80011d2 <OLED_SSD1306_Putc+0x2a>
			}
		}
	}
	
	/* Increase the pointer along x- direction*/
	OLED_SSD1306.CurrentX += Font->FontWidth;
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <OLED_SSD1306_Putc+0xec>)
 8001278:	881a      	ldrh	r2, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	4413      	add	r3, r2
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <OLED_SSD1306_Putc+0xec>)
 8001286:	801a      	strh	r2, [r3, #0]
	
	//OLED_SSD1306_UpdateScreen();
	/* Return the character written */
	return ch;
 8001288:	79fb      	ldrb	r3, [r7, #7]
	
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000608 	.word	0x20000608

08001298 <OLED_SSD1306_Puts>:
 * @param  *Font: Pointer to @ref OLED_FontDef_t structure with used font
 * @param  color: Color used for drawing. This parameter can be a value of @ref OLED_COLOR_t enumeration
 * @retval Zero on success or character value when function failed
 */
char OLED_SSD1306_Puts(char* str, OLED_FontDef_t* Font, OLED_COLOR_t color)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	4613      	mov	r3, r2
 80012a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while(*str)
 80012a6:	e012      	b.n	80012ce <OLED_SSD1306_Puts+0x36>
	{
		/*Write Character by character */
		if(OLED_SSD1306_Putc(*str, Font, color) != *str)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff79 	bl	80011a8 <OLED_SSD1306_Putc>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d002      	beq.n	80012c8 <OLED_SSD1306_Puts+0x30>
		{
			/* Return Error */
			return *str;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	e008      	b.n	80012da <OLED_SSD1306_Puts+0x42>
		}
    
     /* Increase the string pointer */
     str++;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
	while(*str)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e8      	bne.n	80012a8 <OLED_SSD1306_Puts+0x10>
	}

 /* Everything is ok, return 0*/
 return	*str;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	781b      	ldrb	r3, [r3, #0]
	
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <LED_Control>:
 *      Author: Flordst
 */

#include "main.h"
#include "STM32F407_OLED_SSD1306_Driver.h"
void LED_Control(uint8_t state){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	if (state ==1)
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <LED_Control+0x1c>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2140      	movs	r1, #64	; 0x40
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <LED_Control+0x30>)
 80012fa:	f001 fca3 	bl	8002c44 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);

}
 80012fe:	e004      	b.n	800130a <LED_Control+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <LED_Control+0x30>)
 8001306:	f001 fc9d 	bl	8002c44 <HAL_GPIO_WritePin>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020000 	.word	0x40020000

08001318 <Buzz_Control>:

void Buzz_Control(uint16_t value){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
	uint16_t threshold=100;
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	81fb      	strh	r3, [r7, #14]
	if (value>threshold)
 8001326:	88fa      	ldrh	r2, [r7, #6]
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	429a      	cmp	r2, r3
 800132c:	d906      	bls.n	800133c <Buzz_Control+0x24>
		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4806      	ldr	r0, [pc, #24]	; (8001350 <Buzz_Control+0x38>)
 8001336:	f001 fc85 	bl	8002c44 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);

}
 800133a:	e005      	b.n	8001348 <Buzz_Control+0x30>
		HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <Buzz_Control+0x38>)
 8001344:	f001 fc7e 	bl	8002c44 <HAL_GPIO_WritePin>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40020000 	.word	0x40020000

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f000 fdab 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 f887 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f000 f963 	bl	800162c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001366:	f000 f933 	bl	80015d0 <MX_I2C1_Init>
  MX_ADC1_Init();
 800136a:	f000 f8df 	bl	800152c <MX_ADC1_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueueTemperature = xQueueCreate(2, sizeof(float));
 800136e:	2200      	movs	r2, #0
 8001370:	2104      	movs	r1, #4
 8001372:	2002      	movs	r0, #2
 8001374:	f003 fae6 	bl	8004944 <xQueueGenericCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <main+0xc8>)
 800137c:	6013      	str	r3, [r2, #0]
  xQueueLight = xQueueCreate(2, sizeof(uint8_t));
 800137e:	2200      	movs	r2, #0
 8001380:	2101      	movs	r1, #1
 8001382:	2002      	movs	r0, #2
 8001384:	f003 fade 	bl	8004944 <xQueueGenericCreate>
 8001388:	4603      	mov	r3, r0
 800138a:	4a25      	ldr	r2, [pc, #148]	; (8001420 <main+0xcc>)
 800138c:	6013      	str	r3, [r2, #0]
  xQueueGas = xQueueCreate(2, sizeof(uint16_t));
 800138e:	2200      	movs	r2, #0
 8001390:	2102      	movs	r1, #2
 8001392:	2002      	movs	r0, #2
 8001394:	f003 fad6 	bl	8004944 <xQueueGenericCreate>
 8001398:	4603      	mov	r3, r0
 800139a:	4a22      	ldr	r2, [pc, #136]	; (8001424 <main+0xd0>)
 800139c:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
    xTaskCreate(vTaskTemperature, "Task1", configMINIMAL_STACK_SIZE, NULL, 1, &xTemparature_Read);
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <main+0xd4>)
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	4920      	ldr	r1, [pc, #128]	; (800142c <main+0xd8>)
 80013ac:	4820      	ldr	r0, [pc, #128]	; (8001430 <main+0xdc>)
 80013ae:	f003 ff6c 	bl	800528a <xTaskCreate>
    xTaskCreate(vTaskGas, "Task2", configMINIMAL_STACK_SIZE, NULL, 1, &xGas_Read);
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <main+0xe0>)
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	491e      	ldr	r1, [pc, #120]	; (8001438 <main+0xe4>)
 80013c0:	481e      	ldr	r0, [pc, #120]	; (800143c <main+0xe8>)
 80013c2:	f003 ff62 	bl	800528a <xTaskCreate>
    xTaskCreate(vTaskLight, "Task3", configMINIMAL_STACK_SIZE, NULL, 1, &xLigth_Read);
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <main+0xec>)
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2301      	movs	r3, #1
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2300      	movs	r3, #0
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	491c      	ldr	r1, [pc, #112]	; (8001444 <main+0xf0>)
 80013d4:	481c      	ldr	r0, [pc, #112]	; (8001448 <main+0xf4>)
 80013d6:	f003 ff58 	bl	800528a <xTaskCreate>
    xTaskCreate(vTaskOLED, "Task4", configMINIMAL_STACK_SIZE, NULL, 1, &xDisplay_TaskHandle);
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <main+0xf8>)
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2301      	movs	r3, #1
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2300      	movs	r3, #0
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	491a      	ldr	r1, [pc, #104]	; (8001450 <main+0xfc>)
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <main+0x100>)
 80013ea:	f003 ff4e 	bl	800528a <xTaskCreate>
    xTaskCreate(vTaskLEDControl, "Task5", configMINIMAL_STACK_SIZE, NULL, 1, &xLED_Control);
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <main+0x104>)
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	4918      	ldr	r1, [pc, #96]	; (800145c <main+0x108>)
 80013fc:	4818      	ldr	r0, [pc, #96]	; (8001460 <main+0x10c>)
 80013fe:	f003 ff44 	bl	800528a <xTaskCreate>
    xTaskCreate(vTaskBuzzControl, "Task6", configMINIMAL_STACK_SIZE, NULL, 1, &xBuzz_Control);
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <main+0x110>)
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	2301      	movs	r3, #1
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2300      	movs	r3, #0
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	4916      	ldr	r1, [pc, #88]	; (8001468 <main+0x114>)
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <main+0x118>)
 8001412:	f003 ff3a 	bl	800528a <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001416:	f004 f8b1 	bl	800557c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800141a:	e7fe      	b.n	800141a <main+0xc6>
 800141c:	20004fd8 	.word	0x20004fd8
 8001420:	20005028 	.word	0x20005028
 8001424:	20005030 	.word	0x20005030
 8001428:	2000502c 	.word	0x2000502c
 800142c:	0800b7a8 	.word	0x0800b7a8
 8001430:	08001729 	.word	0x08001729
 8001434:	20004fd4 	.word	0x20004fd4
 8001438:	0800b7b0 	.word	0x0800b7b0
 800143c:	0800178d 	.word	0x0800178d
 8001440:	20005038 	.word	0x20005038
 8001444:	0800b7b8 	.word	0x0800b7b8
 8001448:	0800175d 	.word	0x0800175d
 800144c:	20004f7c 	.word	0x20004f7c
 8001450:	0800b7c0 	.word	0x0800b7c0
 8001454:	080017bd 	.word	0x080017bd
 8001458:	20005034 	.word	0x20005034
 800145c:	0800b7c8 	.word	0x0800b7c8
 8001460:	08001819 	.word	0x08001819
 8001464:	20005024 	.word	0x20005024
 8001468:	0800b7d0 	.word	0x0800b7d0
 800146c:	0800184d 	.word	0x0800184d

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	; 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	2230      	movs	r2, #48	; 0x30
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f005 fd64 	bl	8006f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <SystemClock_Config+0xb4>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a21      	ldr	r2, [pc, #132]	; (8001524 <SystemClock_Config+0xb4>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <SystemClock_Config+0xb4>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <SystemClock_Config+0xb8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <SystemClock_Config+0xb8>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <SystemClock_Config+0xb8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014cc:	2302      	movs	r3, #2
 80014ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d4:	2310      	movs	r3, #16
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d8:	2300      	movs	r3, #0
 80014da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 f943 	bl	800376c <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80014ec:	f000 f9da 	bl	80018a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	230f      	movs	r3, #15
 80014f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fba6 	bl	8003c5c <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001516:	f000 f9c5 	bl	80018a4 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3750      	adds	r7, #80	; 0x50
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000

0800152c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001532:	463b      	mov	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <MX_ADC1_Init+0x98>)
 8001540:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <MX_ADC1_Init+0x9c>)
 8001542:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <MX_ADC1_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_ADC1_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <MX_ADC1_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_ADC1_Init+0x98>)
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <MX_ADC1_Init+0xa0>)
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_ADC1_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_ADC1_Init+0x98>)
 8001578:	2201      	movs	r2, #1
 800157a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_ADC1_Init+0x98>)
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_ADC1_Init+0x98>)
 8001586:	2201      	movs	r2, #1
 8001588:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800158a:	480e      	ldr	r0, [pc, #56]	; (80015c4 <MX_ADC1_Init+0x98>)
 800158c:	f000 fcf8 	bl	8001f80 <HAL_ADC_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001596:	f000 f985 	bl	80018a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a6:	463b      	mov	r3, r7
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <MX_ADC1_Init+0x98>)
 80015ac:	f000 fe96 	bl	80022dc <HAL_ADC_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015b6:	f000 f975 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20004fdc 	.word	0x20004fdc
 80015c8:	40012000 	.word	0x40012000
 80015cc:	0f000001 	.word	0x0f000001

080015d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2C1_Init+0x50>)
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <MX_I2C1_Init+0x54>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_I2C1_Init+0x50>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_I2C1_Init+0x58>)
 80015de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_I2C1_Init+0x50>)
 80015ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_I2C1_Init+0x50>)
 800160e:	f001 fb33 	bl	8002c78 <HAL_I2C_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001618:	f000 f944 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20004f80 	.word	0x20004f80
 8001624:	40005400 	.word	0x40005400
 8001628:	000186a0 	.word	0x000186a0

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <MX_GPIO_Init+0xec>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a33      	ldr	r2, [pc, #204]	; (8001718 <MX_GPIO_Init+0xec>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <MX_GPIO_Init+0xec>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_GPIO_Init+0xec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a2c      	ldr	r2, [pc, #176]	; (8001718 <MX_GPIO_Init+0xec>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MX_GPIO_Init+0xec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <MX_GPIO_Init+0xec>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a25      	ldr	r2, [pc, #148]	; (8001718 <MX_GPIO_Init+0xec>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <MX_GPIO_Init+0xec>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_GPIO_Init+0xec>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <MX_GPIO_Init+0xec>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_GPIO_Init+0xec>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <MX_GPIO_Init+0xf0>)
 80016ba:	f001 fac3 	bl	8002c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BUZZ_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZ_Pin;
 80016be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_GPIO_Init+0xf0>)
 80016d8:	f001 f900 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Pin */
  GPIO_InitStruct.Pin = Temp_Pin;
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Temp_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <MX_GPIO_Init+0xf4>)
 80016f2:	f001 f8f3 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Light_Pin */
  GPIO_InitStruct.Pin = Light_Pin;
 80016f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Light_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_GPIO_Init+0xf8>)
 800170c:	f001 f8e6 	bl	80028dc <HAL_GPIO_Init>

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020400 	.word	0x40020400
 8001724:	40020800 	.word	0x40020800

08001728 <vTaskTemperature>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

  /* USER CODE BEGIN 5 */
 void vTaskTemperature(void *pvParameters) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  	float temperature;
      while (1) {
      	temperature=Temp_Read();
 8001730:	f000 f8bd 	bl	80018ae <Temp_Read>
 8001734:	eef0 7a40 	vmov.f32	s15, s0
 8001738:	edc7 7a03 	vstr	s15, [r7, #12]
          xQueueSend(xQueueTemperature, &temperature, portMAX_DELAY);
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <vTaskTemperature+0x30>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	f107 010c 	add.w	r1, r7, #12
 8001744:	2300      	movs	r3, #0
 8001746:	f04f 32ff 	mov.w	r2, #4294967295
 800174a:	f003 f959 	bl	8004a00 <xQueueGenericSend>
          vTaskDelay(pdMS_TO_TICKS(150));
 800174e:	2096      	movs	r0, #150	; 0x96
 8001750:	f003 fee0 	bl	8005514 <vTaskDelay>
      	temperature=Temp_Read();
 8001754:	e7ec      	b.n	8001730 <vTaskTemperature+0x8>
 8001756:	bf00      	nop
 8001758:	20004fd8 	.word	0x20004fd8

0800175c <vTaskLight>:
      }
  }
  void vTaskLight(void *pvParameters) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  	uint8_t light_value;
      while (1) {
      	light_value=Light_Read();
 8001764:	f000 f944 	bl	80019f0 <Light_Read>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
          xQueueSend(xQueueLight, &light_value, portMAX_DELAY);
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <vTaskLight+0x2c>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	f107 010f 	add.w	r1, r7, #15
 8001774:	2300      	movs	r3, #0
 8001776:	f04f 32ff 	mov.w	r2, #4294967295
 800177a:	f003 f941 	bl	8004a00 <xQueueGenericSend>
          vTaskDelay(pdMS_TO_TICKS(150));
 800177e:	2096      	movs	r0, #150	; 0x96
 8001780:	f003 fec8 	bl	8005514 <vTaskDelay>
      	light_value=Light_Read();
 8001784:	e7ee      	b.n	8001764 <vTaskLight+0x8>
 8001786:	bf00      	nop
 8001788:	20005028 	.word	0x20005028

0800178c <vTaskGas>:
      }
  }

  void vTaskGas(void *pvParameters) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
      uint16_t gas_value;

      while (1) {
          gas_value=Gas_Read();
 8001794:	f000 f93e 	bl	8001a14 <Gas_Read>
 8001798:	4603      	mov	r3, r0
 800179a:	81fb      	strh	r3, [r7, #14]
          xQueueSend(xQueueGas, &gas_value, portMAX_DELAY);
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <vTaskGas+0x2c>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	f107 010e 	add.w	r1, r7, #14
 80017a4:	2300      	movs	r3, #0
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295
 80017aa:	f003 f929 	bl	8004a00 <xQueueGenericSend>
          vTaskDelay(pdMS_TO_TICKS(150));
 80017ae:	2096      	movs	r0, #150	; 0x96
 80017b0:	f003 feb0 	bl	8005514 <vTaskDelay>
          gas_value=Gas_Read();
 80017b4:	e7ee      	b.n	8001794 <vTaskGas+0x8>
 80017b6:	bf00      	nop
 80017b8:	20005030 	.word	0x20005030

080017bc <vTaskOLED>:

      }
  }

  void vTaskOLED(void *pvParameters) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
      float temp_value;
      while (1) {
          if (xQueueReceive(xQueueTemperature, &temp_value, 0) == pdPASS) {
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <vTaskOLED+0x50>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f107 011c 	add.w	r1, r7, #28
 80017cc:	2200      	movs	r2, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fab0 	bl	8004d34 <xQueueReceive>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d113      	bne.n	8001802 <vTaskOLED+0x46>
            	  char buffer[16];
            	  sprintf(buffer, "Value: %.2f", temp_value);
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe feb3 	bl	8000548 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	f107 000c 	add.w	r0, r7, #12
 80017ea:	4909      	ldr	r1, [pc, #36]	; (8001810 <vTaskOLED+0x54>)
 80017ec:	f006 fa36 	bl	8007c5c <siprintf>
            	  OLED_SSD1306_Puts(buffer,&OLED_Font_11x18, OLED_COLOR_WHITE);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2201      	movs	r2, #1
 80017f6:	4907      	ldr	r1, [pc, #28]	; (8001814 <vTaskOLED+0x58>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fd4d 	bl	8001298 <OLED_SSD1306_Puts>
            	  OLED_SSD1306_UpdateScreen();
 80017fe:	f7ff fc19 	bl	8001034 <OLED_SSD1306_UpdateScreen>
          }
          vTaskDelay(pdMS_TO_TICKS(100));
 8001802:	2064      	movs	r0, #100	; 0x64
 8001804:	f003 fe86 	bl	8005514 <vTaskDelay>
          if (xQueueReceive(xQueueTemperature, &temp_value, 0) == pdPASS) {
 8001808:	e7dc      	b.n	80017c4 <vTaskOLED+0x8>
 800180a:	bf00      	nop
 800180c:	20004fd8 	.word	0x20004fd8
 8001810:	0800b7d8 	.word	0x0800b7d8
 8001814:	20000000 	.word	0x20000000

08001818 <vTaskLEDControl>:
  }
  }
  void vTaskLEDControl(void *pvParameters) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
      uint8_t light_value;
      while (1) {
          if (xQueueReceive(xQueueLight, &light_value, portMAX_DELAY) == pdPASS) {
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <vTaskLEDControl+0x30>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f107 010f 	add.w	r1, r7, #15
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fa81 	bl	8004d34 <xQueueReceive>
 8001832:	4603      	mov	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d103      	bne.n	8001840 <vTaskLEDControl+0x28>
              LED_Control(light_value);
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fd52 	bl	80012e4 <LED_Control>
          }
          vTaskDelay(pdMS_TO_TICKS(100));
 8001840:	2064      	movs	r0, #100	; 0x64
 8001842:	f003 fe67 	bl	8005514 <vTaskDelay>
          if (xQueueReceive(xQueueLight, &light_value, portMAX_DELAY) == pdPASS) {
 8001846:	e7eb      	b.n	8001820 <vTaskLEDControl+0x8>
 8001848:	20005028 	.word	0x20005028

0800184c <vTaskBuzzControl>:

      }
  }
  void vTaskBuzzControl(void *pvParameters) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
      uint16_t gas_value;
      while (1) {
          if (xQueueReceive(xQueueGas, &gas_value, portMAX_DELAY) == pdPASS) {
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <vTaskBuzzControl+0x30>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f107 010e 	add.w	r1, r7, #14
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	4618      	mov	r0, r3
 8001862:	f003 fa67 	bl	8004d34 <xQueueReceive>
 8001866:	4603      	mov	r3, r0
 8001868:	2b01      	cmp	r3, #1
 800186a:	d103      	bne.n	8001874 <vTaskBuzzControl+0x28>
              Buzz_Control(gas_value);
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fd52 	bl	8001318 <Buzz_Control>
          }
          vTaskDelay(pdMS_TO_TICKS(100));
 8001874:	2064      	movs	r0, #100	; 0x64
 8001876:	f003 fe4d 	bl	8005514 <vTaskDelay>
          if (xQueueReceive(xQueueGas, &gas_value, portMAX_DELAY) == pdPASS) {
 800187a:	e7eb      	b.n	8001854 <vTaskBuzzControl+0x8>
 800187c:	20005030 	.word	0x20005030

08001880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001892:	f000 fb31 	bl	8001ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40001000 	.word	0x40001000

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	e7fe      	b.n	80018ac <Error_Handler+0x8>

080018ae <Temp_Read>:

    DS18B20_Write(0xCC);
    DS18B20_Write(0x44);
}

float Temp_Read(void) {
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
    uint16_t rawTemperature;
    float temperature;


    DS18B20_Write(0xCC);
 80018b4:	20cc      	movs	r0, #204	; 0xcc
 80018b6:	f000 f825 	bl	8001904 <DS18B20_Write>
    DS18B20_Write(0xBE);
 80018ba:	20be      	movs	r0, #190	; 0xbe
 80018bc:	f000 f822 	bl	8001904 <DS18B20_Write>


    rawTemperature = DS18B20_Read();
 80018c0:	f000 f85c 	bl	800197c <DS18B20_Read>
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
    rawTemperature |= ((uint16_t)DS18B20_Read()) << 8;
 80018c8:	f000 f858 	bl	800197c <DS18B20_Read>
 80018cc:	4603      	mov	r3, r0
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b21b      	sxth	r3, r3
 80018da:	80fb      	strh	r3, [r7, #6]

    temperature = (float)((int16_t)rawTemperature) / 16.0f;
 80018dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80018ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f0:	edc7 7a00 	vstr	s15, [r7]

    return temperature;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	ee07 3a90 	vmov	s15, r3
}
 80018fa:	eeb0 0a67 	vmov.f32	s0, s15
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <DS18B20_Write>:


void DS18B20_Write(uint8_t byte) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e029      	b.n	8001968 <DS18B20_Write+0x64>
        HAL_GPIO_WritePin(Temp_GPIO_Port, Temp_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191a:	4817      	ldr	r0, [pc, #92]	; (8001978 <DS18B20_Write+0x74>)
 800191c:	f001 f992 	bl	8002c44 <HAL_GPIO_WritePin>
        if (byte & 0x01) {
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00c      	beq.n	8001944 <DS18B20_Write+0x40>
            HAL_Delay(5);
 800192a:	2005      	movs	r0, #5
 800192c:	f000 fb04 	bl	8001f38 <HAL_Delay>
            HAL_GPIO_WritePin(Temp_GPIO_Port, Temp_Pin, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001936:	4810      	ldr	r0, [pc, #64]	; (8001978 <DS18B20_Write+0x74>)
 8001938:	f001 f984 	bl	8002c44 <HAL_GPIO_WritePin>
            HAL_Delay(60);
 800193c:	203c      	movs	r0, #60	; 0x3c
 800193e:	f000 fafb 	bl	8001f38 <HAL_Delay>
 8001942:	e00b      	b.n	800195c <DS18B20_Write+0x58>
        } else {
            HAL_Delay(60);
 8001944:	203c      	movs	r0, #60	; 0x3c
 8001946:	f000 faf7 	bl	8001f38 <HAL_Delay>
            HAL_GPIO_WritePin(Temp_GPIO_Port, Temp_Pin, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001950:	4809      	ldr	r0, [pc, #36]	; (8001978 <DS18B20_Write+0x74>)
 8001952:	f001 f977 	bl	8002c44 <HAL_GPIO_WritePin>
            HAL_Delay(5);
 8001956:	2005      	movs	r0, #5
 8001958:	f000 faee 	bl	8001f38 <HAL_Delay>
        }
        byte >>= 1;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	3301      	adds	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	2b07      	cmp	r3, #7
 800196c:	d9d2      	bls.n	8001914 <DS18B20_Write+0x10>
    }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40020400 	.word	0x40020400

0800197c <DS18B20_Read>:


uint8_t DS18B20_Read(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < 8; i++) {
 8001986:	2300      	movs	r3, #0
 8001988:	71bb      	strb	r3, [r7, #6]
 800198a:	e026      	b.n	80019da <DS18B20_Read+0x5e>
        HAL_GPIO_WritePin(Temp_GPIO_Port, Temp_Pin, GPIO_PIN_RESET) ;
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <DS18B20_Read+0x70>)
 8001994:	f001 f956 	bl	8002c44 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 8001998:	2002      	movs	r0, #2
 800199a:	f000 facd 	bl	8001f38 <HAL_Delay>
        HAL_GPIO_WritePin(Temp_GPIO_Port, Temp_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <DS18B20_Read+0x70>)
 80019a6:	f001 f94d 	bl	8002c44 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80019aa:	200a      	movs	r0, #10
 80019ac:	f000 fac4 	bl	8001f38 <HAL_Delay>
        byte >>= 1;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	71fb      	strb	r3, [r7, #7]
        if (HAL_GPIO_ReadPin(Temp_GPIO_Port, Temp_Pin) == GPIO_PIN_SET) {
 80019b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ba:	480c      	ldr	r0, [pc, #48]	; (80019ec <DS18B20_Read+0x70>)
 80019bc:	f001 f92a 	bl	8002c14 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d103      	bne.n	80019ce <DS18B20_Read+0x52>
            byte |= 0x80;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019cc:	71fb      	strb	r3, [r7, #7]
        }
        HAL_Delay(50);
 80019ce:	2032      	movs	r0, #50	; 0x32
 80019d0:	f000 fab2 	bl	8001f38 <HAL_Delay>
    for (uint8_t i = 0; i < 8; i++) {
 80019d4:	79bb      	ldrb	r3, [r7, #6]
 80019d6:	3301      	adds	r3, #1
 80019d8:	71bb      	strb	r3, [r7, #6]
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	2b07      	cmp	r3, #7
 80019de:	d9d5      	bls.n	800198c <DS18B20_Read+0x10>
    }

    return byte;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020400 	.word	0x40020400

080019f0 <Light_Read>:

//read light sensor
uint8_t Light_Read(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

    uint8_t sensor_value = HAL_GPIO_ReadPin(Light_GPIO_Port, Light_Pin);
 80019f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <Light_Read+0x20>)
 80019fc:	f001 f90a 	bl	8002c14 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]

    return sensor_value;
 8001a04:	79fb      	ldrb	r3, [r7, #7]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40020800 	.word	0x40020800

08001a14 <Gas_Read>:

//read Gas sensor

uint16_t Gas_Read(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
    uint16_t adc_value = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	80fb      	strh	r3, [r7, #6]

    if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <Gas_Read+0x38>)
 8001a20:	f000 faf2 	bl	8002008 <HAL_ADC_Start>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10b      	bne.n	8001a42 <Gas_Read+0x2e>
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001a2a:	2164      	movs	r1, #100	; 0x64
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <Gas_Read+0x38>)
 8001a2e:	f000 fbbd 	bl	80021ac <HAL_ADC_PollForConversion>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <Gas_Read+0x2e>
            adc_value = HAL_ADC_GetValue(&hadc1);
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <Gas_Read+0x38>)
 8001a3a:	f000 fc42 	bl	80022c2 <HAL_ADC_GetValue>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80fb      	strh	r3, [r7, #6]
        }
    }

    return adc_value;
 8001a42:	88fb      	ldrh	r3, [r7, #6]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20004fdc 	.word	0x20004fdc

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	210f      	movs	r1, #15
 8001a92:	f06f 0001 	mvn.w	r0, #1
 8001a96:	f000 fef7 	bl	8002888 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_ADC_MspInit+0x7c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d127      	bne.n	8001b1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_ADC_MspInit+0x80>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_ADC_MspInit+0x84>)
 8001b16:	f000 fee1 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40012000 	.word	0x40012000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_I2C_MspInit+0x84>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d12b      	bne.n	8001baa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_I2C_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_I2C_MspInit+0x88>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_I2C_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b72:	2312      	movs	r3, #18
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <HAL_I2C_MspInit+0x8c>)
 8001b8a:	f000 fea7 	bl	80028dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_I2C_MspInit+0x88>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_I2C_MspInit+0x88>)
 8001b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_I2C_MspInit+0x88>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40005400 	.word	0x40005400
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	2036      	movs	r0, #54	; 0x36
 8001bd6:	f000 fe57 	bl	8002888 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bda:	2036      	movs	r0, #54	; 0x36
 8001bdc:	f000 fe70 	bl	80028c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_InitTick+0xa0>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_InitTick+0xa0>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_InitTick+0xa0>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bfc:	f107 0210 	add.w	r2, r7, #16
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 f9e4 	bl	8003fd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c0c:	f002 f9ce 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8001c10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <HAL_InitTick+0xa4>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	0c9b      	lsrs	r3, r3, #18
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_InitTick+0xa8>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <HAL_InitTick+0xac>)
 8001c24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_InitTick+0xa8>)
 8001c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_InitTick+0xa8>)
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_InitTick+0xa8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_InitTick+0xa8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <HAL_InitTick+0xa8>)
 8001c42:	f002 f9f9 	bl	8004038 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_InitTick+0xa8>)
 8001c4e:	f002 fa4d 	bl	80040ec <HAL_TIM_Base_Start_IT>
 8001c52:	4603      	mov	r3, r0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	2000503c 	.word	0x2000503c
 8001c6c:	40001000 	.word	0x40001000

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <TIM6_DAC_IRQHandler+0x10>)
 8001ca2:	f002 fa93 	bl	80041cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000503c 	.word	0x2000503c

08001cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_kill>:

int _kill(int pid, int sig)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cca:	f005 f907 	bl	8006edc <__errno>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2216      	movs	r2, #22
 8001cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_exit>:

void _exit (int status)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffe7 	bl	8001cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cf2:	e7fe      	b.n	8001cf2 <_exit+0x12>

08001cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00a      	b.n	8001d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d06:	f3af 8000 	nop.w
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf0      	blt.n	8001d06 <_read+0x12>
	}

return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e009      	b.n	8001d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf1      	blt.n	8001d40 <_write+0x12>
	}
	return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_close>:

int _close(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_isatty>:

int _isatty(int file)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
	return 1;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f005 f86c 	bl	8006edc <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20020000 	.word	0x20020000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	20000610 	.word	0x20000610
 8001e38:	200050d8 	.word	0x200050d8

08001e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <SystemInit+0x20>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <SystemInit+0x20>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e66:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e7c:	4c0b      	ldr	r4, [pc, #44]	; (8001eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e8a:	f7ff ffd7 	bl	8001e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f005 f82b 	bl	8006ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7ff fa5f 	bl	8001354 <main>
  bx  lr    
 8001e96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ea4:	0800ca34 	.word	0x0800ca34
  ldr r2, =_sbss
 8001ea8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001eac:	200050d8 	.word	0x200050d8

08001eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <HAL_Init+0x40>)
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_Init+0x40>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_Init+0x40>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001edc:	2003      	movs	r0, #3
 8001ede:	f000 fcc8 	bl	8002872 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee2:	200f      	movs	r0, #15
 8001ee4:	f7ff fe6c 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee8:	f7ff fdb2 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	20005084 	.word	0x20005084

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20005084 	.word	0x20005084

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_Delay+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000010 	.word	0x20000010

08001f80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e033      	b.n	8001ffe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fd82 	bl	8001aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d118      	bne.n	8001ff0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fc6:	f023 0302 	bic.w	r3, r3, #2
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 faa4 	bl	8002520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
 8001fee:	e001      	b.n	8001ff4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_ADC_Start+0x1a>
 800201e:	2302      	movs	r3, #2
 8002020:	e0b2      	b.n	8002188 <HAL_ADC_Start+0x180>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d018      	beq.n	800206a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002048:	4b52      	ldr	r3, [pc, #328]	; (8002194 <HAL_ADC_Start+0x18c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_ADC_Start+0x190>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0c9a      	lsrs	r2, r3, #18
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800205c:	e002      	b.n	8002064 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3b01      	subs	r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f9      	bne.n	800205e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d17a      	bne.n	800216e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b6:	d106      	bne.n	80020c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f023 0206 	bic.w	r2, r3, #6
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	645a      	str	r2, [r3, #68]	; 0x44
 80020c4:	e002      	b.n	80020cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_ADC_Start+0x194>)
 80020d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d12a      	bne.n	8002144 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_ADC_Start+0x198>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d015      	beq.n	8002124 <HAL_ADC_Start+0x11c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_ADC_Start+0x19c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d105      	bne.n	800210e <HAL_ADC_Start+0x106>
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_ADC_Start+0x194>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a25      	ldr	r2, [pc, #148]	; (80021a8 <HAL_ADC_Start+0x1a0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d136      	bne.n	8002186 <HAL_ADC_Start+0x17e>
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_ADC_Start+0x194>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d130      	bne.n	8002186 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d129      	bne.n	8002186 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	e020      	b.n	8002186 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <HAL_ADC_Start+0x198>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11b      	bne.n	8002186 <HAL_ADC_Start+0x17e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d114      	bne.n	8002186 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e00b      	b.n	8002186 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	20000008 	.word	0x20000008
 8002198:	431bde83 	.word	0x431bde83
 800219c:	40012300 	.word	0x40012300
 80021a0:	40012000 	.word	0x40012000
 80021a4:	40012100 	.word	0x40012100
 80021a8:	40012200 	.word	0x40012200

080021ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c8:	d113      	bne.n	80021f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d8:	d10b      	bne.n	80021f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e063      	b.n	80022ba <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021f2:	f7ff fe95 	bl	8001f20 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021f8:	e021      	b.n	800223e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d01d      	beq.n	800223e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_ADC_PollForConversion+0x6c>
 8002208:	f7ff fe8a 	bl	8001f20 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d212      	bcs.n	800223e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b02      	cmp	r3, #2
 8002224:	d00b      	beq.n	800223e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f043 0204 	orr.w	r2, r3, #4
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e03d      	b.n	80022ba <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b02      	cmp	r3, #2
 800224a:	d1d6      	bne.n	80021fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0212 	mvn.w	r2, #18
 8002254:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d123      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d11f      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002290:	2b00      	cmp	r3, #0
 8002292:	d111      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x1c>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e105      	b.n	8002504 <HAL_ADC_ConfigChannel+0x228>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d925      	bls.n	8002354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1e      	subs	r3, #30
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43da      	mvns	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	400a      	ands	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	4603      	mov	r3, r0
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4403      	add	r3, r0
 8002346:	3b1e      	subs	r3, #30
 8002348:	409a      	lsls	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	e022      	b.n	800239a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	2207      	movs	r2, #7
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	4603      	mov	r3, r0
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4403      	add	r3, r0
 8002390:	409a      	lsls	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d824      	bhi.n	80023ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b05      	subs	r3, #5
 80023b4:	221f      	movs	r2, #31
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	400a      	ands	r2, r1
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b05      	subs	r3, #5
 80023de:	fa00 f203 	lsl.w	r2, r0, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ea:	e04c      	b.n	8002486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d824      	bhi.n	800243e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	3b23      	subs	r3, #35	; 0x23
 8002406:	221f      	movs	r2, #31
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43da      	mvns	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	400a      	ands	r2, r1
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b23      	subs	r3, #35	; 0x23
 8002430:	fa00 f203 	lsl.w	r2, r0, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
 800243c:	e023      	b.n	8002486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b41      	subs	r3, #65	; 0x41
 8002450:	221f      	movs	r2, #31
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	400a      	ands	r2, r1
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	4618      	mov	r0, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	3b41      	subs	r3, #65	; 0x41
 800247a:	fa00 f203 	lsl.w	r2, r0, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_ADC_ConfigChannel+0x234>)
 8002488:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_ADC_ConfigChannel+0x238>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d109      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1cc>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b12      	cmp	r3, #18
 800249a:	d105      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_ADC_ConfigChannel+0x238>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d123      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x21e>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d003      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0x1e6>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b11      	cmp	r3, #17
 80024c0:	d11b      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d111      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_ADC_ConfigChannel+0x23c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_ADC_ConfigChannel+0x240>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9a      	lsrs	r2, r3, #18
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024ec:	e002      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f9      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40012300 	.word	0x40012300
 8002514:	40012000 	.word	0x40012000
 8002518:	20000008 	.word	0x20000008
 800251c:	431bde83 	.word	0x431bde83

08002520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002528:	4b79      	ldr	r3, [pc, #484]	; (8002710 <ADC_Init+0x1f0>)
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	021a      	lsls	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	4a58      	ldr	r2, [pc, #352]	; (8002714 <ADC_Init+0x1f4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d022      	beq.n	80025fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e00f      	b.n	800261e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800260c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800261c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0202 	bic.w	r2, r2, #2
 800262c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7e1b      	ldrb	r3, [r3, #24]
 8002638:	005a      	lsls	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800266a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	3b01      	subs	r3, #1
 8002678:	035a      	lsls	r2, r3, #13
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	e007      	b.n	8002694 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002692:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	051a      	lsls	r2, r3, #20
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026d6:	025a      	lsls	r2, r3, #9
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	029a      	lsls	r2, r3, #10
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40012300 	.word	0x40012300
 8002714:	0f000001 	.word	0x0f000001

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ff4c 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800289a:	f7ff ff61 	bl	8002760 <__NVIC_GetPriorityGrouping>
 800289e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	6978      	ldr	r0, [r7, #20]
 80028a6:	f7ff ffb1 	bl	800280c <NVIC_EncodePriority>
 80028aa:	4602      	mov	r2, r0
 80028ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff80 	bl	80027b8 <__NVIC_SetPriority>
}
 80028b8:	bf00      	nop
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff54 	bl	800277c <__NVIC_EnableIRQ>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e16b      	b.n	8002bd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	f040 815a 	bne.w	8002bca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d005      	beq.n	800292e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292a:	2b02      	cmp	r3, #2
 800292c:	d130      	bne.n	8002990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 0201 	and.w	r2, r3, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b03      	cmp	r3, #3
 800299a:	d017      	beq.n	80029cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d123      	bne.n	8002a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	08da      	lsrs	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3208      	adds	r2, #8
 80029e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3208      	adds	r2, #8
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80b4 	beq.w	8002bca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b60      	ldr	r3, [pc, #384]	; (8002be8 <HAL_GPIO_Init+0x30c>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a5f      	ldr	r2, [pc, #380]	; (8002be8 <HAL_GPIO_Init+0x30c>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <HAL_GPIO_Init+0x30c>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7e:	4a5b      	ldr	r2, [pc, #364]	; (8002bec <HAL_GPIO_Init+0x310>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_GPIO_Init+0x314>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d02b      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a51      	ldr	r2, [pc, #324]	; (8002bf4 <HAL_GPIO_Init+0x318>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d025      	beq.n	8002afe <HAL_GPIO_Init+0x222>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a50      	ldr	r2, [pc, #320]	; (8002bf8 <HAL_GPIO_Init+0x31c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01f      	beq.n	8002afa <HAL_GPIO_Init+0x21e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a4f      	ldr	r2, [pc, #316]	; (8002bfc <HAL_GPIO_Init+0x320>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d019      	beq.n	8002af6 <HAL_GPIO_Init+0x21a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4e      	ldr	r2, [pc, #312]	; (8002c00 <HAL_GPIO_Init+0x324>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_GPIO_Init+0x216>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4d      	ldr	r2, [pc, #308]	; (8002c04 <HAL_GPIO_Init+0x328>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00d      	beq.n	8002aee <HAL_GPIO_Init+0x212>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4c      	ldr	r2, [pc, #304]	; (8002c08 <HAL_GPIO_Init+0x32c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d007      	beq.n	8002aea <HAL_GPIO_Init+0x20e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4b      	ldr	r2, [pc, #300]	; (8002c0c <HAL_GPIO_Init+0x330>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_GPIO_Init+0x20a>
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	e00e      	b.n	8002b04 <HAL_GPIO_Init+0x228>
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	e00c      	b.n	8002b04 <HAL_GPIO_Init+0x228>
 8002aea:	2306      	movs	r3, #6
 8002aec:	e00a      	b.n	8002b04 <HAL_GPIO_Init+0x228>
 8002aee:	2305      	movs	r3, #5
 8002af0:	e008      	b.n	8002b04 <HAL_GPIO_Init+0x228>
 8002af2:	2304      	movs	r3, #4
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x228>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e004      	b.n	8002b04 <HAL_GPIO_Init+0x228>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_Init+0x228>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x228>
 8002b02:	2300      	movs	r3, #0
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	4093      	lsls	r3, r2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b14:	4935      	ldr	r1, [pc, #212]	; (8002bec <HAL_GPIO_Init+0x310>)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b46:	4a32      	ldr	r2, [pc, #200]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b4c:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b70:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc4:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <HAL_GPIO_Init+0x334>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	f67f ae90 	bls.w	80028f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	40020c00 	.word	0x40020c00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40021400 	.word	0x40021400
 8002c08:	40021800 	.word	0x40021800
 8002c0c:	40021c00 	.word	0x40021c00
 8002c10:	40013c00 	.word	0x40013c00

08002c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e001      	b.n	8002c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
 8002c50:	4613      	mov	r3, r2
 8002c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c54:	787b      	ldrb	r3, [r7, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c60:	e003      	b.n	8002c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	041a      	lsls	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	619a      	str	r2, [r3, #24]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e12b      	b.n	8002ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe ff46 	bl	8001b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2224      	movs	r2, #36	; 0x24
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cdc:	f001 f966 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8002ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a81      	ldr	r2, [pc, #516]	; (8002eec <HAL_I2C_Init+0x274>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d807      	bhi.n	8002cfc <HAL_I2C_Init+0x84>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a80      	ldr	r2, [pc, #512]	; (8002ef0 <HAL_I2C_Init+0x278>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e006      	b.n	8002d0a <HAL_I2C_Init+0x92>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_I2C_Init+0x27c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bf94      	ite	ls
 8002d04:	2301      	movls	r3, #1
 8002d06:	2300      	movhi	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0e7      	b.n	8002ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a78      	ldr	r2, [pc, #480]	; (8002ef8 <HAL_I2C_Init+0x280>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0c9b      	lsrs	r3, r3, #18
 8002d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a6a      	ldr	r2, [pc, #424]	; (8002eec <HAL_I2C_Init+0x274>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d802      	bhi.n	8002d4c <HAL_I2C_Init+0xd4>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	e009      	b.n	8002d60 <HAL_I2C_Init+0xe8>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	4a69      	ldr	r2, [pc, #420]	; (8002efc <HAL_I2C_Init+0x284>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	3301      	adds	r3, #1
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	495c      	ldr	r1, [pc, #368]	; (8002eec <HAL_I2C_Init+0x274>)
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d819      	bhi.n	8002db4 <HAL_I2C_Init+0x13c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e59      	subs	r1, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d8e:	1c59      	adds	r1, r3, #1
 8002d90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d94:	400b      	ands	r3, r1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_I2C_Init+0x138>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e59      	subs	r1, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	e051      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002db0:	2304      	movs	r3, #4
 8002db2:	e04f      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <HAL_I2C_Init+0x168>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e012      	b.n	8002e06 <HAL_I2C_Init+0x18e>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e58      	subs	r0, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	0099      	lsls	r1, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Init+0x196>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e022      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10e      	bne.n	8002e34 <HAL_I2C_Init+0x1bc>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1e58      	subs	r0, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	440b      	add	r3, r1
 8002e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Init+0x1dc>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e58      	subs	r0, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	0099      	lsls	r1, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	6809      	ldr	r1, [r1, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6911      	ldr	r1, [r2, #16]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68d2      	ldr	r2, [r2, #12]
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	000186a0 	.word	0x000186a0
 8002ef0:	001e847f 	.word	0x001e847f
 8002ef4:	003d08ff 	.word	0x003d08ff
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	817b      	strh	r3, [r7, #10]
 8002f10:	4613      	mov	r3, r2
 8002f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff f804 	bl	8001f20 <HAL_GetTick>
 8002f18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	f040 80e0 	bne.w	80030e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2319      	movs	r3, #25
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4970      	ldr	r1, [pc, #448]	; (80030f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fa92 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e0d3      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x50>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0cc      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d007      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2221      	movs	r2, #33	; 0x21
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2210      	movs	r2, #16
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	893a      	ldrh	r2, [r7, #8]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a50      	ldr	r2, [pc, #320]	; (80030f8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f9ca 	bl	8003358 <I2C_MasterRequestWrite>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e08d      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fe4:	e066      	b.n	80030b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	6a39      	ldr	r1, [r7, #32]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fb0c 	bl	8003608 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d107      	bne.n	800300e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e06b      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d11b      	bne.n	8003088 <HAL_I2C_Master_Transmit+0x188>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6a39      	ldr	r1, [r7, #32]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fafc 	bl	800368a <I2C_WaitOnBTFFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b04      	cmp	r3, #4
 800309e:	d107      	bne.n	80030b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e01a      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d194      	bne.n	8002fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	00100002 	.word	0x00100002
 80030f8:	ffff0000 	.word	0xffff0000

080030fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	460b      	mov	r3, r1
 800310a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7fe ff08 	bl	8001f20 <HAL_GetTick>
 8003110:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003112:	2301      	movs	r3, #1
 8003114:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	f040 8111 	bne.w	8003346 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2319      	movs	r3, #25
 800312a:	2201      	movs	r2, #1
 800312c:	4988      	ldr	r1, [pc, #544]	; (8003350 <HAL_I2C_IsDeviceReady+0x254>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f994 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	e104      	b.n	8003348 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_I2C_IsDeviceReady+0x50>
 8003148:	2302      	movs	r3, #2
 800314a:	e0fd      	b.n	8003348 <HAL_I2C_IsDeviceReady+0x24c>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d007      	beq.n	8003172 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003180:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2224      	movs	r2, #36	; 0x24
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a70      	ldr	r2, [pc, #448]	; (8003354 <HAL_I2C_IsDeviceReady+0x258>)
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f952 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031cc:	d103      	bne.n	80031d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e0b6      	b.n	8003348 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031ea:	f7fe fe99 	bl	8001f20 <HAL_GetTick>
 80031ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003214:	bf0c      	ite	eq
 8003216:	2301      	moveq	r3, #1
 8003218:	2300      	movne	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800321e:	e025      	b.n	800326c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003220:	f7fe fe7e 	bl	8001f20 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d302      	bcc.n	8003236 <HAL_I2C_IsDeviceReady+0x13a>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22a0      	movs	r2, #160	; 0xa0
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b02      	cmp	r3, #2
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2ba0      	cmp	r3, #160	; 0xa0
 8003276:	d005      	beq.n	8003284 <HAL_I2C_IsDeviceReady+0x188>
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <HAL_I2C_IsDeviceReady+0x188>
 800327e:	7dbb      	ldrb	r3, [r7, #22]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0cd      	beq.n	8003220 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b02      	cmp	r3, #2
 8003298:	d129      	bne.n	80032ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2319      	movs	r3, #25
 80032c6:	2201      	movs	r2, #1
 80032c8:	4921      	ldr	r1, [pc, #132]	; (8003350 <HAL_I2C_IsDeviceReady+0x254>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f8c6 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e036      	b.n	8003348 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e02c      	b.n	8003348 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003306:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2319      	movs	r3, #25
 800330e:	2201      	movs	r2, #1
 8003310:	490f      	ldr	r1, [pc, #60]	; (8003350 <HAL_I2C_IsDeviceReady+0x254>)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8a2 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e012      	b.n	8003348 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	3301      	adds	r3, #1
 8003326:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	f4ff af32 	bcc.w	8003196 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	00100002 	.word	0x00100002
 8003354:	ffff0000 	.word	0xffff0000

08003358 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	460b      	mov	r3, r1
 8003366:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d006      	beq.n	8003382 <I2C_MasterRequestWrite+0x2a>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d003      	beq.n	8003382 <I2C_MasterRequestWrite+0x2a>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003380:	d108      	bne.n	8003394 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e00b      	b.n	80033ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	2b12      	cmp	r3, #18
 800339a:	d107      	bne.n	80033ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f84f 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d2:	d103      	bne.n	80033dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e035      	b.n	800344c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e8:	d108      	bne.n	80033fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033f8:	611a      	str	r2, [r3, #16]
 80033fa:	e01b      	b.n	8003434 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	11db      	asrs	r3, r3, #7
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 0306 	and.w	r3, r3, #6
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f063 030f 	orn	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	490e      	ldr	r1, [pc, #56]	; (8003454 <I2C_MasterRequestWrite+0xfc>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f875 	bl	800350a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e010      	b.n	800344c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4907      	ldr	r1, [pc, #28]	; (8003458 <I2C_MasterRequestWrite+0x100>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f865 	bl	800350a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	00010008 	.word	0x00010008
 8003458:	00010002 	.word	0x00010002

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e025      	b.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d021      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe fd53 	bl	8001f20 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d116      	bne.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f043 0220 	orr.w	r2, r3, #32
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e023      	b.n	8003502 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10d      	bne.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4013      	ands	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf0c      	ite	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	2300      	movne	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	e00c      	b.n	80034fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d0b6      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003518:	e051      	b.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003528:	d123      	bne.n	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003542:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e046      	b.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d021      	beq.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fe fcd1 	bl	8001f20 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d116      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e020      	b.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d10c      	bne.n	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e00b      	b.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	43da      	mvns	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d18d      	bne.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003614:	e02d      	b.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f878 	bl	800370c <I2C_IsAcknowledgeFailed>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e02d      	b.n	8003682 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d021      	beq.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe fc77 	bl	8001f20 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d116      	bne.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e007      	b.n	8003682 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d1ca      	bne.n	8003616 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003696:	e02d      	b.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f837 	bl	800370c <I2C_IsAcknowledgeFailed>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e02d      	b.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d021      	beq.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b0:	f7fe fc36 	bl	8001f20 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e007      	b.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d1ca      	bne.n	8003698 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d11b      	bne.n	800375c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800372c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e264      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d075      	beq.n	8003876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800378a:	4ba3      	ldr	r3, [pc, #652]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d00c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4ba0      	ldr	r3, [pc, #640]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d112      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a2:	4b9d      	ldr	r3, [pc, #628]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	4b99      	ldr	r3, [pc, #612]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d05b      	beq.n	8003874 <HAL_RCC_OscConfig+0x108>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d157      	bne.n	8003874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e23f      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d106      	bne.n	80037e0 <HAL_RCC_OscConfig+0x74>
 80037d2:	4b91      	ldr	r3, [pc, #580]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a90      	ldr	r2, [pc, #576]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e01d      	b.n	800381c <HAL_RCC_OscConfig+0xb0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x98>
 80037ea:	4b8b      	ldr	r3, [pc, #556]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a8a      	ldr	r2, [pc, #552]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a87      	ldr	r2, [pc, #540]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0xb0>
 8003804:	4b84      	ldr	r3, [pc, #528]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a83      	ldr	r2, [pc, #524]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a80      	ldr	r2, [pc, #512]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe fb7c 	bl	8001f20 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe fb78 	bl	8001f20 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e204      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0xc0>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fb68 	bl	8001f20 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe fb64 	bl	8001f20 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1f0      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0xe8>
 8003872:	e000      	b.n	8003876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d063      	beq.n	800394a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003882:	4b65      	ldr	r3, [pc, #404]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b62      	ldr	r3, [pc, #392]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003896:	2b08      	cmp	r3, #8
 8003898:	d11c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389a:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_RCC_OscConfig+0x152>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e1c4      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	4b56      	ldr	r3, [pc, #344]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4952      	ldr	r1, [pc, #328]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d2:	e03a      	b.n	800394a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038dc:	4b4f      	ldr	r3, [pc, #316]	; (8003a1c <HAL_RCC_OscConfig+0x2b0>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe fb1d 	bl	8001f20 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fe fb19 	bl	8001f20 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1a5      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4940      	ldr	r1, [pc, #256]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
 800391c:	e015      	b.n	800394a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391e:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCC_OscConfig+0x2b0>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe fafc 	bl	8001f20 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392c:	f7fe faf8 	bl	8001f20 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e184      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d030      	beq.n	80039b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_RCC_OscConfig+0x2b4>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe fadc 	bl	8001f20 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe fad8 	bl	8001f20 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e164      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x200>
 800398a:	e015      	b.n	80039b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_OscConfig+0x2b4>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fac5 	bl	8001f20 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe fac1 	bl	8001f20 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e14d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a0 	beq.w	8003b06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_OscConfig+0x2b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d121      	bne.n	8003a46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_RCC_OscConfig+0x2b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <HAL_RCC_OscConfig+0x2b8>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7fe fa87 	bl	8001f20 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	e011      	b.n	8003a3a <HAL_RCC_OscConfig+0x2ce>
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000
 8003a20:	42470e80 	.word	0x42470e80
 8003a24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a28:	f7fe fa7a 	bl	8001f20 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e106      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x4e4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d106      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2f0>
 8003a4e:	4b81      	ldr	r3, [pc, #516]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	4a80      	ldr	r2, [pc, #512]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5a:	e01c      	b.n	8003a96 <HAL_RCC_OscConfig+0x32a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d10c      	bne.n	8003a7e <HAL_RCC_OscConfig+0x312>
 8003a64:	4b7b      	ldr	r3, [pc, #492]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a7a      	ldr	r2, [pc, #488]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	4b78      	ldr	r3, [pc, #480]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a77      	ldr	r2, [pc, #476]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCC_OscConfig+0x32a>
 8003a7e:	4b75      	ldr	r3, [pc, #468]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a74      	ldr	r2, [pc, #464]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	4b72      	ldr	r3, [pc, #456]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a71      	ldr	r2, [pc, #452]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d015      	beq.n	8003aca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fa3f 	bl	8001f20 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fa3b 	bl	8001f20 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0c5      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ee      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x33a>
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fa29 	bl	8001f20 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fe fa25 	bl	8001f20 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0af      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae8:	4b5a      	ldr	r3, [pc, #360]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afa:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a55      	ldr	r2, [pc, #340]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 809b 	beq.w	8003c46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b10:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d05c      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d141      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe f9f9 	bl	8001f20 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fe f9f5 	bl	8001f20 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e081      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f0      	bne.n	8003b32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	019b      	lsls	r3, r3, #6
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	4937      	ldr	r1, [pc, #220]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fe f9ce 	bl	8001f20 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fe f9ca 	bl	8001f20 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e056      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x41c>
 8003ba6:	e04e      	b.n	8003c46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bae:	f7fe f9b7 	bl	8001f20 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb6:	f7fe f9b3 	bl	8001f20 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e03f      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x44a>
 8003bd4:	e037      	b.n	8003c46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e032      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <HAL_RCC_OscConfig+0x4e8>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d028      	beq.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d121      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d11a      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c12:	4013      	ands	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d111      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40007000 	.word	0x40007000
 8003c54:	40023800 	.word	0x40023800
 8003c58:	42470060 	.word	0x42470060

08003c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0cc      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b68      	ldr	r3, [pc, #416]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d90c      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b63      	ldr	r3, [pc, #396]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b8      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb0:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc8:	4b53      	ldr	r3, [pc, #332]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	494d      	ldr	r1, [pc, #308]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d044      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d119      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e06f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e067      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4934      	ldr	r1, [pc, #208]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d4c:	f7fe f8e8 	bl	8001f20 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fe f8e4 	bl	8001f20 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e04f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d20c      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e032      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4916      	ldr	r1, [pc, #88]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	490e      	ldr	r1, [pc, #56]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003de2:	f000 f821 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	490a      	ldr	r1, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	5ccb      	ldrb	r3, [r1, r3]
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd fedc 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023c00 	.word	0x40023c00
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	0800c558 	.word	0x0800c558
 8003e20:	20000008 	.word	0x20000008
 8003e24:	2000000c 	.word	0x2000000c

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b5b0      	push	{r4, r5, r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6079      	str	r1, [r7, #4]
 8003e32:	2100      	movs	r1, #0
 8003e34:	60f9      	str	r1, [r7, #12]
 8003e36:	2100      	movs	r1, #0
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e3e:	4952      	ldr	r1, [pc, #328]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e40:	6889      	ldr	r1, [r1, #8]
 8003e42:	f001 010c 	and.w	r1, r1, #12
 8003e46:	2908      	cmp	r1, #8
 8003e48:	d00d      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x3e>
 8003e4a:	2908      	cmp	r1, #8
 8003e4c:	f200 8094 	bhi.w	8003f78 <HAL_RCC_GetSysClockFreq+0x150>
 8003e50:	2900      	cmp	r1, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x32>
 8003e54:	2904      	cmp	r1, #4
 8003e56:	d003      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x38>
 8003e58:	e08e      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e5a:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003e5c:	60bb      	str	r3, [r7, #8]
       break;
 8003e5e:	e08e      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e62:	60bb      	str	r3, [r7, #8]
      break;
 8003e64:	e08b      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e66:	4948      	ldr	r1, [pc, #288]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e68:	6849      	ldr	r1, [r1, #4]
 8003e6a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e6e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e70:	4945      	ldr	r1, [pc, #276]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e72:	6849      	ldr	r1, [r1, #4]
 8003e74:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e78:	2900      	cmp	r1, #0
 8003e7a:	d024      	beq.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7c:	4942      	ldr	r1, [pc, #264]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e7e:	6849      	ldr	r1, [r1, #4]
 8003e80:	0989      	lsrs	r1, r1, #6
 8003e82:	4608      	mov	r0, r1
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e8c:	f04f 0500 	mov.w	r5, #0
 8003e90:	ea00 0204 	and.w	r2, r0, r4
 8003e94:	ea01 0305 	and.w	r3, r1, r5
 8003e98:	493d      	ldr	r1, [pc, #244]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e9a:	fb01 f003 	mul.w	r0, r1, r3
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	fb01 f102 	mul.w	r1, r1, r2
 8003ea4:	1844      	adds	r4, r0, r1
 8003ea6:	493a      	ldr	r1, [pc, #232]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ea8:	fba2 0101 	umull	r0, r1, r2, r1
 8003eac:	1863      	adds	r3, r4, r1
 8003eae:	4619      	mov	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	f7fc fee6 	bl	8000c88 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e04a      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec6:	4b30      	ldr	r3, [pc, #192]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	ea02 0400 	and.w	r4, r2, r0
 8003ede:	ea03 0501 	and.w	r5, r3, r1
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	014b      	lsls	r3, r1, #5
 8003ef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ef4:	0142      	lsls	r2, r0, #5
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	1b00      	subs	r0, r0, r4
 8003efc:	eb61 0105 	sbc.w	r1, r1, r5
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	018b      	lsls	r3, r1, #6
 8003f0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f0e:	0182      	lsls	r2, r0, #6
 8003f10:	1a12      	subs	r2, r2, r0
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	f04f 0000 	mov.w	r0, #0
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	00d9      	lsls	r1, r3, #3
 8003f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f24:	00d0      	lsls	r0, r2, #3
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	1912      	adds	r2, r2, r4
 8003f2c:	eb45 0303 	adc.w	r3, r5, r3
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	0299      	lsls	r1, r3, #10
 8003f3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f3e:	0290      	lsls	r0, r2, #10
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	f7fc fe9a 	bl	8000c88 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	60bb      	str	r3, [r7, #8]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003f7a:	60bb      	str	r3, [r7, #8]
      break;
 8003f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bdb0      	pop	{r4, r5, r7, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	017d7840 	.word	0x017d7840

08003f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000008 	.word	0x20000008

08003fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fb0:	f7ff fff0 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0a9b      	lsrs	r3, r3, #10
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4903      	ldr	r1, [pc, #12]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	0800c568 	.word	0x0800c568

08003fd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	220f      	movs	r2, #15
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0203 	and.w	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_RCC_GetClockConfig+0x5c>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_GetClockConfig+0x5c>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	08db      	lsrs	r3, r3, #3
 800400e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_RCC_GetClockConfig+0x60>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0207 	and.w	r2, r3, #7
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800
 8004034:	40023c00 	.word	0x40023c00

08004038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e041      	b.n	80040ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f839 	bl	80040d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 f9d8 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d001      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04e      	b.n	80041a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d022      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d01d      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d018      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_TIM_Base_Start_IT+0xd0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x80>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d111      	bne.n	8004190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b06      	cmp	r3, #6
 800417c:	d010      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	e007      	b.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40010400 	.word	0x40010400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40001800 	.word	0x40001800

080041cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d122      	bne.n	8004228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d11b      	bne.n	8004228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0202 	mvn.w	r2, #2
 80041f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8ee 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8e0 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f8f1 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b04      	cmp	r3, #4
 8004234:	d122      	bne.n	800427c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d11b      	bne.n	800427c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0204 	mvn.w	r2, #4
 800424c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f8c4 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8b6 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8c7 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b08      	cmp	r3, #8
 8004288:	d122      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b08      	cmp	r3, #8
 8004296:	d11b      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0208 	mvn.w	r2, #8
 80042a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2204      	movs	r2, #4
 80042a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f89a 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 80042bc:	e005      	b.n	80042ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f88c 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f89d 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d122      	bne.n	8004324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d11b      	bne.n	8004324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0210 	mvn.w	r2, #16
 80042f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2208      	movs	r2, #8
 80042fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f870 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f862 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f873 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0201 	mvn.w	r2, #1
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fd fa98 	bl	8001880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b80      	cmp	r3, #128	; 0x80
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f902 	bl	8004580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f838 	bl	8004418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d10e      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d107      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0220 	mvn.w	r2, #32
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f8cc 	bl	800456c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a40      	ldr	r2, [pc, #256]	; (8004540 <TIM_Base_SetConfig+0x114>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d00f      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3d      	ldr	r2, [pc, #244]	; (8004544 <TIM_Base_SetConfig+0x118>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00b      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a3c      	ldr	r2, [pc, #240]	; (8004548 <TIM_Base_SetConfig+0x11c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3b      	ldr	r2, [pc, #236]	; (800454c <TIM_Base_SetConfig+0x120>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3a      	ldr	r2, [pc, #232]	; (8004550 <TIM_Base_SetConfig+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <TIM_Base_SetConfig+0x114>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d02b      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d027      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a2c      	ldr	r2, [pc, #176]	; (8004544 <TIM_Base_SetConfig+0x118>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d023      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <TIM_Base_SetConfig+0x11c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2a      	ldr	r2, [pc, #168]	; (800454c <TIM_Base_SetConfig+0x120>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01b      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a29      	ldr	r2, [pc, #164]	; (8004550 <TIM_Base_SetConfig+0x124>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d017      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a28      	ldr	r2, [pc, #160]	; (8004554 <TIM_Base_SetConfig+0x128>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a27      	ldr	r2, [pc, #156]	; (8004558 <TIM_Base_SetConfig+0x12c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00f      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a26      	ldr	r2, [pc, #152]	; (800455c <TIM_Base_SetConfig+0x130>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a25      	ldr	r2, [pc, #148]	; (8004560 <TIM_Base_SetConfig+0x134>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a24      	ldr	r2, [pc, #144]	; (8004564 <TIM_Base_SetConfig+0x138>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a23      	ldr	r2, [pc, #140]	; (8004568 <TIM_Base_SetConfig+0x13c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <TIM_Base_SetConfig+0x114>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <TIM_Base_SetConfig+0x124>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d103      	bne.n	800452c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	615a      	str	r2, [r3, #20]
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40010000 	.word	0x40010000
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40010400 	.word	0x40010400
 8004554:	40014000 	.word	0x40014000
 8004558:	40014400 	.word	0x40014400
 800455c:	40014800 	.word	0x40014800
 8004560:	40001800 	.word	0x40001800
 8004564:	40001c00 	.word	0x40001c00
 8004568:	40002000 	.word	0x40002000

0800456c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <SysTick_Handler+0x1c>)
 800459a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800459c:	f001 fc36 	bl	8005e0c <xTaskGetSchedulerState>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d001      	beq.n	80045aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045a6:	f002 fa1f 	bl	80069e8 <xPortSysTickHandler>
  }
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010

080045b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a07      	ldr	r2, [pc, #28]	; (80045e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80045c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4a06      	ldr	r2, [pc, #24]	; (80045e4 <vApplicationGetIdleTaskMemory+0x30>)
 80045ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	601a      	str	r2, [r3, #0]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20000614 	.word	0x20000614
 80045e4:	20000670 	.word	0x20000670

080045e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a07      	ldr	r2, [pc, #28]	; (8004614 <vApplicationGetTimerTaskMemory+0x2c>)
 80045f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a06      	ldr	r2, [pc, #24]	; (8004618 <vApplicationGetTimerTaskMemory+0x30>)
 80045fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004606:	601a      	str	r2, [r3, #0]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	20000870 	.word	0x20000870
 8004618:	200008cc 	.word	0x200008cc

0800461c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f103 0208 	add.w	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f103 0208 	add.w	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f103 0208 	add.w	r2, r3, #8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d103      	bne.n	80046de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	e00c      	b.n	80046f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3308      	adds	r3, #8
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e002      	b.n	80046ec <vListInsert+0x2e>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d2f6      	bcs.n	80046e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6892      	ldr	r2, [r2, #8]
 8004746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6852      	ldr	r2, [r2, #4]
 8004750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d103      	bne.n	8004764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	1e5a      	subs	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047ae:	f002 f889 	bl	80068c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	441a      	add	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	3b01      	subs	r3, #1
 80047e0:	68f9      	ldr	r1, [r7, #12]
 80047e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	441a      	add	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	22ff      	movs	r2, #255	; 0xff
 80047fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d114      	bne.n	800482e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01a      	beq.n	8004842 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3310      	adds	r3, #16
 8004810:	4618      	mov	r0, r3
 8004812:	f001 f93d 	bl	8005a90 <xTaskRemoveFromEventList>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d012      	beq.n	8004842 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <xQueueGenericReset+0xcc>)
 800481e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	e009      	b.n	8004842 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3310      	adds	r3, #16
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fef2 	bl	800461c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff feed 	bl	800461c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004842:	f002 f86f 	bl	8006924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004846:	2301      	movs	r3, #1
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08e      	sub	sp, #56	; 0x38
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <xQueueGenericCreateStatic+0x52>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <xQueueGenericCreateStatic+0x56>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <xQueueGenericCreateStatic+0x58>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	623b      	str	r3, [r7, #32]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <xQueueGenericCreateStatic+0x7e>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <xQueueGenericCreateStatic+0x82>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <xQueueGenericCreateStatic+0x84>
 80048d6:	2300      	movs	r3, #0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	61fb      	str	r3, [r7, #28]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048f2:	2350      	movs	r3, #80	; 0x50
 80048f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b50      	cmp	r3, #80	; 0x50
 80048fa:	d00a      	beq.n	8004912 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	61bb      	str	r3, [r7, #24]
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004912:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004926:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f83f 	bl	80049b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800493c:	4618      	mov	r0, r3
 800493e:	3730      	adds	r7, #48	; 0x30
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	613b      	str	r3, [r7, #16]
}
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	3350      	adds	r3, #80	; 0x50
 800497c:	4618      	mov	r0, r3
 800497e:	f002 f8c3 	bl	8006b08 <pvPortMalloc>
 8004982:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d011      	beq.n	80049ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	3350      	adds	r3, #80	; 0x50
 8004992:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800499c:	79fa      	ldrb	r2, [r7, #7]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f805 	bl	80049b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049ae:	69bb      	ldr	r3, [r7, #24]
	}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d103      	bne.n	80049d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e002      	b.n	80049da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049e6:	2101      	movs	r1, #1
 80049e8:	69b8      	ldr	r0, [r7, #24]
 80049ea:	f7ff fecb 	bl	8004784 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueGenericSend+0x32>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <xQueueGenericSend+0x40>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <xQueueGenericSend+0x44>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <xQueueGenericSend+0x46>
 8004a44:	2300      	movs	r3, #0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <xQueueGenericSend+0x60>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d103      	bne.n	8004a6e <xQueueGenericSend+0x6e>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <xQueueGenericSend+0x72>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <xQueueGenericSend+0x74>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <xQueueGenericSend+0x8e>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	623b      	str	r3, [r7, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a8e:	f001 f9bd 	bl	8005e0c <xTaskGetSchedulerState>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <xQueueGenericSend+0x9e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <xQueueGenericSend+0xa2>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericSend+0xa4>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueGenericSend+0xbe>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	61fb      	str	r3, [r7, #28]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004abe:	f001 ff01 	bl	80068c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <xQueueGenericSend+0xd4>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d129      	bne.n	8004b28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ada:	f000 fa0b 	bl	8004ef4 <prvCopyDataToQueue>
 8004ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	3324      	adds	r3, #36	; 0x24
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 ffcf 	bl	8005a90 <xTaskRemoveFromEventList>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004af8:	4b3f      	ldr	r3, [pc, #252]	; (8004bf8 <xQueueGenericSend+0x1f8>)
 8004afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	e00a      	b.n	8004b20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b10:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <xQueueGenericSend+0x1f8>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b20:	f001 ff00 	bl	8006924 <vPortExitCritical>
				return pdPASS;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e063      	b.n	8004bf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b2e:	f001 fef9 	bl	8006924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e05c      	b.n	8004bf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b3c:	f107 0314 	add.w	r3, r7, #20
 8004b40:	4618      	mov	r0, r3
 8004b42:	f001 f809 	bl	8005b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b46:	2301      	movs	r3, #1
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b4a:	f001 feeb 	bl	8006924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b4e:	f000 fd7b 	bl	8005648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b52:	f001 feb7 	bl	80068c4 <vPortEnterCritical>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b5c:	b25b      	sxtb	r3, r3
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d103      	bne.n	8004b6c <xQueueGenericSend+0x16c>
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b72:	b25b      	sxtb	r3, r3
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d103      	bne.n	8004b82 <xQueueGenericSend+0x182>
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b82:	f001 fecf 	bl	8006924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b86:	1d3a      	adds	r2, r7, #4
 8004b88:	f107 0314 	add.w	r3, r7, #20
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fff8 	bl	8005b84 <xTaskCheckForTimeOut>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d124      	bne.n	8004be4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b9c:	f000 faa2 	bl	80050e4 <prvIsQueueFull>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d018      	beq.n	8004bd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	3310      	adds	r3, #16
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 ff1e 	bl	80059f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb6:	f000 fa2d 	bl	8005014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bba:	f000 fd53 	bl	8005664 <xTaskResumeAll>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f47f af7c 	bne.w	8004abe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <xQueueGenericSend+0x1f8>)
 8004bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	e772      	b.n	8004abe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bda:	f000 fa1b 	bl	8005014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bde:	f000 fd41 	bl	8005664 <xTaskResumeAll>
 8004be2:	e76c      	b.n	8004abe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be6:	f000 fa15 	bl	8005014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bea:	f000 fd3b 	bl	8005664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3738      	adds	r7, #56	; 0x38
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b090      	sub	sp, #64	; 0x40
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <xQueueGenericSendFromISR+0x3c>
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <xQueueGenericSendFromISR+0x40>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <xQueueGenericSendFromISR+0x42>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d103      	bne.n	8004c66 <xQueueGenericSendFromISR+0x6a>
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <xQueueGenericSendFromISR+0x6e>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <xQueueGenericSendFromISR+0x70>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	623b      	str	r3, [r7, #32]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c86:	f001 feff 	bl	8006a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	61fa      	str	r2, [r7, #28]
 8004ca0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <xQueueGenericSendFromISR+0xbc>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d12f      	bne.n	8004d18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cce:	f000 f911 	bl	8004ef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d112      	bne.n	8004d02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d016      	beq.n	8004d12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	3324      	adds	r3, #36	; 0x24
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fed1 	bl	8005a90 <xTaskRemoveFromEventList>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00e      	beq.n	8004d12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e007      	b.n	8004d12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d06:	3301      	adds	r3, #1
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	b25a      	sxtb	r2, r3
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d12:	2301      	movs	r3, #1
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d16:	e001      	b.n	8004d1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3740      	adds	r7, #64	; 0x40
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08c      	sub	sp, #48	; 0x30
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <xQueueReceive+0x30>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	623b      	str	r3, [r7, #32]
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <xQueueReceive+0x3e>
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <xQueueReceive+0x42>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <xQueueReceive+0x44>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xQueueReceive+0x5e>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	61fb      	str	r3, [r7, #28]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d92:	f001 f83b 	bl	8005e0c <xTaskGetSchedulerState>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <xQueueReceive+0x6e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <xQueueReceive+0x72>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <xQueueReceive+0x74>
 8004da6:	2300      	movs	r3, #0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <xQueueReceive+0x8e>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	61bb      	str	r3, [r7, #24]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dc2:	f001 fd7f 	bl	80068c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01f      	beq.n	8004e12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd6:	f000 f8f7 	bl	8004fc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	1e5a      	subs	r2, r3, #1
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00f      	beq.n	8004e0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	3310      	adds	r3, #16
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fe4e 	bl	8005a90 <xTaskRemoveFromEventList>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dfa:	4b3d      	ldr	r3, [pc, #244]	; (8004ef0 <xQueueReceive+0x1bc>)
 8004dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e0a:	f001 fd8b 	bl	8006924 <vPortExitCritical>
				return pdPASS;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e069      	b.n	8004ee6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d103      	bne.n	8004e20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e18:	f001 fd84 	bl	8006924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e062      	b.n	8004ee6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e26:	f107 0310 	add.w	r3, r7, #16
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fe94 	bl	8005b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e34:	f001 fd76 	bl	8006924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e38:	f000 fc06 	bl	8005648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e3c:	f001 fd42 	bl	80068c4 <vPortEnterCritical>
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e46:	b25b      	sxtb	r3, r3
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d103      	bne.n	8004e56 <xQueueReceive+0x122>
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5c:	b25b      	sxtb	r3, r3
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d103      	bne.n	8004e6c <xQueueReceive+0x138>
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e6c:	f001 fd5a 	bl	8006924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e70:	1d3a      	adds	r2, r7, #4
 8004e72:	f107 0310 	add.w	r3, r7, #16
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fe83 	bl	8005b84 <xTaskCheckForTimeOut>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d123      	bne.n	8004ecc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e86:	f000 f917 	bl	80050b8 <prvIsQueueEmpty>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d017      	beq.n	8004ec0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4611      	mov	r1, r2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fda9 	bl	80059f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea0:	f000 f8b8 	bl	8005014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ea4:	f000 fbde 	bl	8005664 <xTaskResumeAll>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d189      	bne.n	8004dc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004eae:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <xQueueReceive+0x1bc>)
 8004eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	e780      	b.n	8004dc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec2:	f000 f8a7 	bl	8005014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec6:	f000 fbcd 	bl	8005664 <xTaskResumeAll>
 8004eca:	e77a      	b.n	8004dc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ece:	f000 f8a1 	bl	8005014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ed2:	f000 fbc7 	bl	8005664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed8:	f000 f8ee 	bl	80050b8 <prvIsQueueEmpty>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f43f af6f 	beq.w	8004dc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3730      	adds	r7, #48	; 0x30
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d14d      	bne.n	8004fb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 ff92 	bl	8005e48 <xTaskPriorityDisinherit>
 8004f24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	e043      	b.n	8004fb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d119      	bne.n	8004f68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6858      	ldr	r0, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	f001 fff6 	bl	8006f30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d32b      	bcc.n	8004fb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	e026      	b.n	8004fb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68d8      	ldr	r0, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	461a      	mov	r2, r3
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	f001 ffdc 	bl	8006f30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	425b      	negs	r3, r3
 8004f82:	441a      	add	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d207      	bcs.n	8004fa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	425b      	negs	r3, r3
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d105      	bne.n	8004fb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fbe:	697b      	ldr	r3, [r7, #20]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d018      	beq.n	800500c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	441a      	add	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d303      	bcc.n	8004ffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68d9      	ldr	r1, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	461a      	mov	r2, r3
 8005006:	6838      	ldr	r0, [r7, #0]
 8005008:	f001 ff92 	bl	8006f30 <memcpy>
	}
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800501c:	f001 fc52 	bl	80068c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005028:	e011      	b.n	800504e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d012      	beq.n	8005058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3324      	adds	r3, #36	; 0x24
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fd2a 	bl	8005a90 <xTaskRemoveFromEventList>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005042:	f000 fe01 	bl	8005c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	3b01      	subs	r3, #1
 800504a:	b2db      	uxtb	r3, r3
 800504c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800504e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005052:	2b00      	cmp	r3, #0
 8005054:	dce9      	bgt.n	800502a <prvUnlockQueue+0x16>
 8005056:	e000      	b.n	800505a <prvUnlockQueue+0x46>
					break;
 8005058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005062:	f001 fc5f 	bl	8006924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005066:	f001 fc2d 	bl	80068c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005072:	e011      	b.n	8005098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d012      	beq.n	80050a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3310      	adds	r3, #16
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fd05 	bl	8005a90 <xTaskRemoveFromEventList>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800508c:	f000 fddc 	bl	8005c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	3b01      	subs	r3, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dce9      	bgt.n	8005074 <prvUnlockQueue+0x60>
 80050a0:	e000      	b.n	80050a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	22ff      	movs	r2, #255	; 0xff
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050ac:	f001 fc3a 	bl	8006924 <vPortExitCritical>
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050c0:	f001 fc00 	bl	80068c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e001      	b.n	80050d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050d6:	f001 fc25 	bl	8006924 <vPortExitCritical>

	return xReturn;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050ec:	f001 fbea 	bl	80068c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d102      	bne.n	8005102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e001      	b.n	8005106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005106:	f001 fc0d 	bl	8006924 <vPortExitCritical>

	return xReturn;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e014      	b.n	800514e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005124:	4a0f      	ldr	r2, [pc, #60]	; (8005164 <vQueueAddToRegistry+0x50>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005130:	490c      	ldr	r1, [pc, #48]	; (8005164 <vQueueAddToRegistry+0x50>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <vQueueAddToRegistry+0x50>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005146:	e006      	b.n	8005156 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b07      	cmp	r3, #7
 8005152:	d9e7      	bls.n	8005124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20005088 	.word	0x20005088

08005168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005178:	f001 fba4 	bl	80068c4 <vPortEnterCritical>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005182:	b25b      	sxtb	r3, r3
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d103      	bne.n	8005192 <vQueueWaitForMessageRestricted+0x2a>
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005198:	b25b      	sxtb	r3, r3
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d103      	bne.n	80051a8 <vQueueWaitForMessageRestricted+0x40>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	f001 fbbc 	bl	8006924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	3324      	adds	r3, #36	; 0x24
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fc3b 	bl	8005a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051c2:	6978      	ldr	r0, [r7, #20]
 80051c4:	f7ff ff26 	bl	8005014 <prvUnlockQueue>
	}
 80051c8:	bf00      	nop
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08e      	sub	sp, #56	; 0x38
 80051d4:	af04      	add	r7, sp, #16
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	623b      	str	r3, [r7, #32]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <xTaskCreateStatic+0x46>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	61fb      	str	r3, [r7, #28]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005216:	235c      	movs	r3, #92	; 0x5c
 8005218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b5c      	cmp	r3, #92	; 0x5c
 800521e:	d00a      	beq.n	8005236 <xTaskCreateStatic+0x66>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61bb      	str	r3, [r7, #24]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005236:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01e      	beq.n	800527c <xTaskCreateStatic+0xac>
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2202      	movs	r2, #2
 8005252:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005256:	2300      	movs	r3, #0
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	9302      	str	r3, [sp, #8]
 800525e:	f107 0314 	add.w	r3, r7, #20
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f850 	bl	8005314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005276:	f000 f8dd 	bl	8005434 <prvAddNewTaskToReadyList>
 800527a:	e001      	b.n	8005280 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005280:	697b      	ldr	r3, [r7, #20]
	}
 8005282:	4618      	mov	r0, r3
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800528a:	b580      	push	{r7, lr}
 800528c:	b08c      	sub	sp, #48	; 0x30
 800528e:	af04      	add	r7, sp, #16
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 fc32 	bl	8006b08 <pvPortMalloc>
 80052a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00e      	beq.n	80052ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052ac:	205c      	movs	r0, #92	; 0x5c
 80052ae:	f001 fc2b 	bl	8006b08 <pvPortMalloc>
 80052b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
 80052c0:	e005      	b.n	80052ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052c2:	6978      	ldr	r0, [r7, #20]
 80052c4:	f001 fcec 	bl	8006ca0 <vPortFree>
 80052c8:	e001      	b.n	80052ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d017      	beq.n	8005304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	2300      	movs	r3, #0
 80052e0:	9303      	str	r3, [sp, #12]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	9302      	str	r3, [sp, #8]
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f80e 	bl	8005314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052f8:	69f8      	ldr	r0, [r7, #28]
 80052fa:	f000 f89b 	bl	8005434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052fe:	2301      	movs	r3, #1
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e002      	b.n	800530a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800530a:	69bb      	ldr	r3, [r7, #24]
	}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	461a      	mov	r2, r3
 800532c:	21a5      	movs	r1, #165	; 0xa5
 800532e:	f001 fe0d 	bl	8006f4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800533c:	3b01      	subs	r3, #1
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	617b      	str	r3, [r7, #20]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01f      	beq.n	80053b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	e012      	b.n	800539e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	7819      	ldrb	r1, [r3, #0]
 8005380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	3334      	adds	r3, #52	; 0x34
 8005388:	460a      	mov	r2, r1
 800538a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d9e9      	bls.n	8005378 <prvInitialiseNewTask+0x64>
 80053a4:	e000      	b.n	80053a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80053a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b0:	e003      	b.n	80053ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b37      	cmp	r3, #55	; 0x37
 80053be:	d901      	bls.n	80053c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053c0:	2337      	movs	r3, #55	; 0x37
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2200      	movs	r2, #0
 80053d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	3304      	adds	r3, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff f93e 	bl	800465c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	3318      	adds	r3, #24
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff f939 	bl	800465c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	68f9      	ldr	r1, [r7, #12]
 8005412:	69b8      	ldr	r0, [r7, #24]
 8005414:	f001 f928 	bl	8006668 <pxPortInitialiseStack>
 8005418:	4602      	mov	r2, r0
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800542a:	bf00      	nop
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800543c:	f001 fa42 	bl	80068c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <prvAddNewTaskToReadyList+0xc4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	4a2c      	ldr	r2, [pc, #176]	; (80054f8 <prvAddNewTaskToReadyList+0xc4>)
 8005448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800544a:	4b2c      	ldr	r3, [pc, #176]	; (80054fc <prvAddNewTaskToReadyList+0xc8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005452:	4a2a      	ldr	r2, [pc, #168]	; (80054fc <prvAddNewTaskToReadyList+0xc8>)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005458:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <prvAddNewTaskToReadyList+0xc4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d110      	bne.n	8005482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005460:	f000 fc16 	bl	8005c90 <prvInitialiseTaskLists>
 8005464:	e00d      	b.n	8005482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <prvAddNewTaskToReadyList+0xcc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800546e:	4b23      	ldr	r3, [pc, #140]	; (80054fc <prvAddNewTaskToReadyList+0xc8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	429a      	cmp	r2, r3
 800547a:	d802      	bhi.n	8005482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800547c:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <prvAddNewTaskToReadyList+0xc8>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <prvAddNewTaskToReadyList+0xd0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3301      	adds	r3, #1
 8005488:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <prvAddNewTaskToReadyList+0xd0>)
 800548a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800548c:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <prvAddNewTaskToReadyList+0xd0>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <prvAddNewTaskToReadyList+0xd4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d903      	bls.n	80054a8 <prvAddNewTaskToReadyList+0x74>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	4a18      	ldr	r2, [pc, #96]	; (8005508 <prvAddNewTaskToReadyList+0xd4>)
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4a15      	ldr	r2, [pc, #84]	; (800550c <prvAddNewTaskToReadyList+0xd8>)
 80054b6:	441a      	add	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f7ff f8d9 	bl	8004676 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054c4:	f001 fa2e 	bl	8006924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054c8:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <prvAddNewTaskToReadyList+0xcc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <prvAddNewTaskToReadyList+0xc8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	429a      	cmp	r2, r3
 80054dc:	d207      	bcs.n	80054ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <prvAddNewTaskToReadyList+0xdc>)
 80054e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200011a0 	.word	0x200011a0
 80054fc:	20000ccc 	.word	0x20000ccc
 8005500:	200011ac 	.word	0x200011ac
 8005504:	200011bc 	.word	0x200011bc
 8005508:	200011a8 	.word	0x200011a8
 800550c:	20000cd0 	.word	0x20000cd0
 8005510:	e000ed04 	.word	0xe000ed04

08005514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <vTaskDelay+0x60>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <vTaskDelay+0x30>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60bb      	str	r3, [r7, #8]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005544:	f000 f880 	bl	8005648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005548:	2100      	movs	r1, #0
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fcea 	bl	8005f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005550:	f000 f888 	bl	8005664 <xTaskResumeAll>
 8005554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <vTaskDelay+0x64>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200011c8 	.word	0x200011c8
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800558a:	463a      	mov	r2, r7
 800558c:	1d39      	adds	r1, r7, #4
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff f80e 	bl	80045b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	9202      	str	r2, [sp, #8]
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	2300      	movs	r3, #0
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	2300      	movs	r3, #0
 80055a8:	460a      	mov	r2, r1
 80055aa:	4921      	ldr	r1, [pc, #132]	; (8005630 <vTaskStartScheduler+0xb4>)
 80055ac:	4821      	ldr	r0, [pc, #132]	; (8005634 <vTaskStartScheduler+0xb8>)
 80055ae:	f7ff fe0f 	bl	80051d0 <xTaskCreateStatic>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4a20      	ldr	r2, [pc, #128]	; (8005638 <vTaskStartScheduler+0xbc>)
 80055b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055b8:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <vTaskStartScheduler+0xbc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e001      	b.n	80055ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d102      	bne.n	80055d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055d0:	f000 fcfc 	bl	8005fcc <xTimerCreateTimerTask>
 80055d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d116      	bne.n	800560a <vTaskStartScheduler+0x8e>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	613b      	str	r3, [r7, #16]
}
 80055ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055f0:	4b12      	ldr	r3, [pc, #72]	; (800563c <vTaskStartScheduler+0xc0>)
 80055f2:	f04f 32ff 	mov.w	r2, #4294967295
 80055f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055f8:	4b11      	ldr	r3, [pc, #68]	; (8005640 <vTaskStartScheduler+0xc4>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055fe:	4b11      	ldr	r3, [pc, #68]	; (8005644 <vTaskStartScheduler+0xc8>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005604:	f001 f8bc 	bl	8006780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005608:	e00e      	b.n	8005628 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d10a      	bne.n	8005628 <vTaskStartScheduler+0xac>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	60fb      	str	r3, [r7, #12]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <vTaskStartScheduler+0xaa>
}
 8005628:	bf00      	nop
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	0800b7e4 	.word	0x0800b7e4
 8005634:	08005c61 	.word	0x08005c61
 8005638:	200011c4 	.word	0x200011c4
 800563c:	200011c0 	.word	0x200011c0
 8005640:	200011ac 	.word	0x200011ac
 8005644:	200011a4 	.word	0x200011a4

08005648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800564c:	4b04      	ldr	r3, [pc, #16]	; (8005660 <vTaskSuspendAll+0x18>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a03      	ldr	r2, [pc, #12]	; (8005660 <vTaskSuspendAll+0x18>)
 8005654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005656:	bf00      	nop
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	200011c8 	.word	0x200011c8

08005664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005672:	4b42      	ldr	r3, [pc, #264]	; (800577c <xTaskResumeAll+0x118>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <xTaskResumeAll+0x2c>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	603b      	str	r3, [r7, #0]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005690:	f001 f918 	bl	80068c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005694:	4b39      	ldr	r3, [pc, #228]	; (800577c <xTaskResumeAll+0x118>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3b01      	subs	r3, #1
 800569a:	4a38      	ldr	r2, [pc, #224]	; (800577c <xTaskResumeAll+0x118>)
 800569c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800569e:	4b37      	ldr	r3, [pc, #220]	; (800577c <xTaskResumeAll+0x118>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d162      	bne.n	800576c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <xTaskResumeAll+0x11c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d05e      	beq.n	800576c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ae:	e02f      	b.n	8005710 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b0:	4b34      	ldr	r3, [pc, #208]	; (8005784 <xTaskResumeAll+0x120>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3318      	adds	r3, #24
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff f837 	bl	8004730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff f832 	bl	8004730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <xTaskResumeAll+0x124>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d903      	bls.n	80056e0 <xTaskResumeAll+0x7c>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a2a      	ldr	r2, [pc, #168]	; (8005788 <xTaskResumeAll+0x124>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a27      	ldr	r2, [pc, #156]	; (800578c <xTaskResumeAll+0x128>)
 80056ee:	441a      	add	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7fe ffbd 	bl	8004676 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005700:	4b23      	ldr	r3, [pc, #140]	; (8005790 <xTaskResumeAll+0x12c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	429a      	cmp	r2, r3
 8005708:	d302      	bcc.n	8005710 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800570a:	4b22      	ldr	r3, [pc, #136]	; (8005794 <xTaskResumeAll+0x130>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005710:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <xTaskResumeAll+0x120>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1cb      	bne.n	80056b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800571e:	f000 fb55 	bl	8005dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <xTaskResumeAll+0x134>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d010      	beq.n	8005750 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800572e:	f000 f847 	bl	80057c0 <xTaskIncrementTick>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005738:	4b16      	ldr	r3, [pc, #88]	; (8005794 <xTaskResumeAll+0x130>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3b01      	subs	r3, #1
 8005742:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f1      	bne.n	800572e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <xTaskResumeAll+0x134>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <xTaskResumeAll+0x130>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d009      	beq.n	800576c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005758:	2301      	movs	r3, #1
 800575a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800575c:	4b0f      	ldr	r3, [pc, #60]	; (800579c <xTaskResumeAll+0x138>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800576c:	f001 f8da 	bl	8006924 <vPortExitCritical>

	return xAlreadyYielded;
 8005770:	68bb      	ldr	r3, [r7, #8]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	200011c8 	.word	0x200011c8
 8005780:	200011a0 	.word	0x200011a0
 8005784:	20001160 	.word	0x20001160
 8005788:	200011a8 	.word	0x200011a8
 800578c:	20000cd0 	.word	0x20000cd0
 8005790:	20000ccc 	.word	0x20000ccc
 8005794:	200011b4 	.word	0x200011b4
 8005798:	200011b0 	.word	0x200011b0
 800579c:	e000ed04 	.word	0xe000ed04

080057a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <xTaskGetTickCount+0x1c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057ac:	687b      	ldr	r3, [r7, #4]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	200011a4 	.word	0x200011a4

080057c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ca:	4b4f      	ldr	r3, [pc, #316]	; (8005908 <xTaskIncrementTick+0x148>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 808f 	bne.w	80058f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057d4:	4b4d      	ldr	r3, [pc, #308]	; (800590c <xTaskIncrementTick+0x14c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057dc:	4a4b      	ldr	r2, [pc, #300]	; (800590c <xTaskIncrementTick+0x14c>)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d120      	bne.n	800582a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057e8:	4b49      	ldr	r3, [pc, #292]	; (8005910 <xTaskIncrementTick+0x150>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <xTaskIncrementTick+0x48>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	603b      	str	r3, [r7, #0]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <xTaskIncrementTick+0x46>
 8005808:	4b41      	ldr	r3, [pc, #260]	; (8005910 <xTaskIncrementTick+0x150>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	4b41      	ldr	r3, [pc, #260]	; (8005914 <xTaskIncrementTick+0x154>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a3f      	ldr	r2, [pc, #252]	; (8005910 <xTaskIncrementTick+0x150>)
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	4a3f      	ldr	r2, [pc, #252]	; (8005914 <xTaskIncrementTick+0x154>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4b3e      	ldr	r3, [pc, #248]	; (8005918 <xTaskIncrementTick+0x158>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	4a3d      	ldr	r2, [pc, #244]	; (8005918 <xTaskIncrementTick+0x158>)
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	f000 fad1 	bl	8005dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800582a:	4b3c      	ldr	r3, [pc, #240]	; (800591c <xTaskIncrementTick+0x15c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d349      	bcc.n	80058c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005834:	4b36      	ldr	r3, [pc, #216]	; (8005910 <xTaskIncrementTick+0x150>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <xTaskIncrementTick+0x15c>)
 8005840:	f04f 32ff 	mov.w	r2, #4294967295
 8005844:	601a      	str	r2, [r3, #0]
					break;
 8005846:	e03f      	b.n	80058c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005848:	4b31      	ldr	r3, [pc, #196]	; (8005910 <xTaskIncrementTick+0x150>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d203      	bcs.n	8005868 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005860:	4a2e      	ldr	r2, [pc, #184]	; (800591c <xTaskIncrementTick+0x15c>)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005866:	e02f      	b.n	80058c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	3304      	adds	r3, #4
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe ff5f 	bl	8004730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	3318      	adds	r3, #24
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe ff56 	bl	8004730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	4b25      	ldr	r3, [pc, #148]	; (8005920 <xTaskIncrementTick+0x160>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d903      	bls.n	8005898 <xTaskIncrementTick+0xd8>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	4a22      	ldr	r2, [pc, #136]	; (8005920 <xTaskIncrementTick+0x160>)
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <xTaskIncrementTick+0x164>)
 80058a6:	441a      	add	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f7fe fee1 	bl	8004676 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <xTaskIncrementTick+0x168>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	429a      	cmp	r2, r3
 80058c0:	d3b8      	bcc.n	8005834 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058c2:	2301      	movs	r3, #1
 80058c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c6:	e7b5      	b.n	8005834 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058c8:	4b17      	ldr	r3, [pc, #92]	; (8005928 <xTaskIncrementTick+0x168>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ce:	4915      	ldr	r1, [pc, #84]	; (8005924 <xTaskIncrementTick+0x164>)
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d901      	bls.n	80058e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058e4:	4b11      	ldr	r3, [pc, #68]	; (800592c <xTaskIncrementTick+0x16c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e004      	b.n	80058fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058f2:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <xTaskIncrementTick+0x170>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3301      	adds	r3, #1
 80058f8:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <xTaskIncrementTick+0x170>)
 80058fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058fc:	697b      	ldr	r3, [r7, #20]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200011c8 	.word	0x200011c8
 800590c:	200011a4 	.word	0x200011a4
 8005910:	20001158 	.word	0x20001158
 8005914:	2000115c 	.word	0x2000115c
 8005918:	200011b8 	.word	0x200011b8
 800591c:	200011c0 	.word	0x200011c0
 8005920:	200011a8 	.word	0x200011a8
 8005924:	20000cd0 	.word	0x20000cd0
 8005928:	20000ccc 	.word	0x20000ccc
 800592c:	200011b4 	.word	0x200011b4
 8005930:	200011b0 	.word	0x200011b0

08005934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800593a:	4b28      	ldr	r3, [pc, #160]	; (80059dc <vTaskSwitchContext+0xa8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005942:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <vTaskSwitchContext+0xac>)
 8005944:	2201      	movs	r2, #1
 8005946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005948:	e041      	b.n	80059ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800594a:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <vTaskSwitchContext+0xac>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005950:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <vTaskSwitchContext+0xb0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e010      	b.n	800597a <vTaskSwitchContext+0x46>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <vTaskSwitchContext+0x40>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	607b      	str	r3, [r7, #4]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vTaskSwitchContext+0x3e>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3b01      	subs	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	491b      	ldr	r1, [pc, #108]	; (80059e8 <vTaskSwitchContext+0xb4>)
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0e4      	beq.n	8005958 <vTaskSwitchContext+0x24>
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <vTaskSwitchContext+0xb4>)
 800599a:	4413      	add	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	605a      	str	r2, [r3, #4]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	3308      	adds	r3, #8
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d104      	bne.n	80059be <vTaskSwitchContext+0x8a>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4a09      	ldr	r2, [pc, #36]	; (80059ec <vTaskSwitchContext+0xb8>)
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	4a06      	ldr	r2, [pc, #24]	; (80059e4 <vTaskSwitchContext+0xb0>)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6013      	str	r3, [r2, #0]
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	200011c8 	.word	0x200011c8
 80059e0:	200011b4 	.word	0x200011b4
 80059e4:	200011a8 	.word	0x200011a8
 80059e8:	20000cd0 	.word	0x20000cd0
 80059ec:	20000ccc 	.word	0x20000ccc

080059f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a16:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <vTaskPlaceOnEventList+0x44>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fe fe4d 	bl	80046be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a24:	2101      	movs	r1, #1
 8005a26:	6838      	ldr	r0, [r7, #0]
 8005a28:	f000 fa7c 	bl	8005f24 <prvAddCurrentTaskToDelayedList>
}
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000ccc 	.word	0x20000ccc

08005a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	617b      	str	r3, [r7, #20]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <vTaskPlaceOnEventListRestricted+0x54>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3318      	adds	r3, #24
 8005a66:	4619      	mov	r1, r3
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7fe fe04 	bl	8004676 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295
 8005a78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	68b8      	ldr	r0, [r7, #8]
 8005a7e:	f000 fa51 	bl	8005f24 <prvAddCurrentTaskToDelayedList>
	}
 8005a82:	bf00      	nop
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000ccc 	.word	0x20000ccc

08005a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60fb      	str	r3, [r7, #12]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3318      	adds	r3, #24
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe fe35 	bl	8004730 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac6:	4b1e      	ldr	r3, [pc, #120]	; (8005b40 <xTaskRemoveFromEventList+0xb0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d11d      	bne.n	8005b0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fe2c 	bl	8004730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <xTaskRemoveFromEventList+0xb4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d903      	bls.n	8005aec <xTaskRemoveFromEventList+0x5c>
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <xTaskRemoveFromEventList+0xb4>)
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <xTaskRemoveFromEventList+0xb8>)
 8005afa:	441a      	add	r2, r3
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f7fe fdb7 	bl	8004676 <vListInsertEnd>
 8005b08:	e005      	b.n	8005b16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3318      	adds	r3, #24
 8005b0e:	4619      	mov	r1, r3
 8005b10:	480e      	ldr	r0, [pc, #56]	; (8005b4c <xTaskRemoveFromEventList+0xbc>)
 8005b12:	f7fe fdb0 	bl	8004676 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <xTaskRemoveFromEventList+0xc0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d905      	bls.n	8005b30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <xTaskRemoveFromEventList+0xc4>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e001      	b.n	8005b34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b34:	697b      	ldr	r3, [r7, #20]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200011c8 	.word	0x200011c8
 8005b44:	200011a8 	.word	0x200011a8
 8005b48:	20000cd0 	.word	0x20000cd0
 8005b4c:	20001160 	.word	0x20001160
 8005b50:	20000ccc 	.word	0x20000ccc
 8005b54:	200011b4 	.word	0x200011b4

08005b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <vTaskInternalSetTimeOutState+0x24>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <vTaskInternalSetTimeOutState+0x28>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	605a      	str	r2, [r3, #4]
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	200011b8 	.word	0x200011b8
 8005b80:	200011a4 	.word	0x200011a4

08005b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	613b      	str	r3, [r7, #16]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	60fb      	str	r3, [r7, #12]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005bc6:	f000 fe7d 	bl	80068c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bca:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <xTaskCheckForTimeOut+0xbc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d102      	bne.n	8005bea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	e023      	b.n	8005c32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <xTaskCheckForTimeOut+0xc0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d007      	beq.n	8005c06 <xTaskCheckForTimeOut+0x82>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d302      	bcc.n	8005c06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e015      	b.n	8005c32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d20b      	bcs.n	8005c28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff ff9b 	bl	8005b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	e004      	b.n	8005c32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c32:	f000 fe77 	bl	8006924 <vPortExitCritical>

	return xReturn;
 8005c36:	69fb      	ldr	r3, [r7, #28]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	200011a4 	.word	0x200011a4
 8005c44:	200011b8 	.word	0x200011b8

08005c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <vTaskMissedYield+0x14>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	200011b4 	.word	0x200011b4

08005c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c68:	f000 f852 	bl	8005d10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <prvIdleTask+0x28>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d9f9      	bls.n	8005c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <prvIdleTask+0x2c>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c84:	e7f0      	b.n	8005c68 <prvIdleTask+0x8>
 8005c86:	bf00      	nop
 8005c88:	20000cd0 	.word	0x20000cd0
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c96:	2300      	movs	r3, #0
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	e00c      	b.n	8005cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <prvInitialiseTaskLists+0x60>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fcb6 	bl	800461c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b37      	cmp	r3, #55	; 0x37
 8005cba:	d9ef      	bls.n	8005c9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cbc:	480d      	ldr	r0, [pc, #52]	; (8005cf4 <prvInitialiseTaskLists+0x64>)
 8005cbe:	f7fe fcad 	bl	800461c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cc2:	480d      	ldr	r0, [pc, #52]	; (8005cf8 <prvInitialiseTaskLists+0x68>)
 8005cc4:	f7fe fcaa 	bl	800461c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cc8:	480c      	ldr	r0, [pc, #48]	; (8005cfc <prvInitialiseTaskLists+0x6c>)
 8005cca:	f7fe fca7 	bl	800461c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cce:	480c      	ldr	r0, [pc, #48]	; (8005d00 <prvInitialiseTaskLists+0x70>)
 8005cd0:	f7fe fca4 	bl	800461c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cd4:	480b      	ldr	r0, [pc, #44]	; (8005d04 <prvInitialiseTaskLists+0x74>)
 8005cd6:	f7fe fca1 	bl	800461c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <prvInitialiseTaskLists+0x78>)
 8005cdc:	4a05      	ldr	r2, [pc, #20]	; (8005cf4 <prvInitialiseTaskLists+0x64>)
 8005cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <prvInitialiseTaskLists+0x7c>)
 8005ce2:	4a05      	ldr	r2, [pc, #20]	; (8005cf8 <prvInitialiseTaskLists+0x68>)
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000cd0 	.word	0x20000cd0
 8005cf4:	20001130 	.word	0x20001130
 8005cf8:	20001144 	.word	0x20001144
 8005cfc:	20001160 	.word	0x20001160
 8005d00:	20001174 	.word	0x20001174
 8005d04:	2000118c 	.word	0x2000118c
 8005d08:	20001158 	.word	0x20001158
 8005d0c:	2000115c 	.word	0x2000115c

08005d10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d16:	e019      	b.n	8005d4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d18:	f000 fdd4 	bl	80068c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1c:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <prvCheckTasksWaitingTermination+0x50>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe fd01 	bl	8004730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <prvCheckTasksWaitingTermination+0x54>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	4a0b      	ldr	r2, [pc, #44]	; (8005d64 <prvCheckTasksWaitingTermination+0x54>)
 8005d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <prvCheckTasksWaitingTermination+0x58>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <prvCheckTasksWaitingTermination+0x58>)
 8005d40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d42:	f000 fdef 	bl	8006924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f810 	bl	8005d6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <prvCheckTasksWaitingTermination+0x58>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e1      	bne.n	8005d18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20001174 	.word	0x20001174
 8005d64:	200011a0 	.word	0x200011a0
 8005d68:	20001188 	.word	0x20001188

08005d6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d108      	bne.n	8005d90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 ff8c 	bl	8006ca0 <vPortFree>
				vPortFree( pxTCB );
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 ff89 	bl	8006ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d8e:	e018      	b.n	8005dc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d103      	bne.n	8005da2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 ff80 	bl	8006ca0 <vPortFree>
	}
 8005da0:	e00f      	b.n	8005dc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d00a      	beq.n	8005dc2 <prvDeleteTCB+0x56>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60fb      	str	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <prvDeleteTCB+0x54>
	}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <prvResetNextTaskUnblockTime+0x38>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <prvResetNextTaskUnblockTime+0x3c>)
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295
 8005de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005de4:	e008      	b.n	8005df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <prvResetNextTaskUnblockTime+0x38>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <prvResetNextTaskUnblockTime+0x3c>)
 8005df6:	6013      	str	r3, [r2, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	20001158 	.word	0x20001158
 8005e08:	200011c0 	.word	0x200011c0

08005e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <xTaskGetSchedulerState+0x34>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	607b      	str	r3, [r7, #4]
 8005e1e:	e008      	b.n	8005e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e20:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <xTaskGetSchedulerState+0x38>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	e001      	b.n	8005e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e32:	687b      	ldr	r3, [r7, #4]
	}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	200011ac 	.word	0x200011ac
 8005e44:	200011c8 	.word	0x200011c8

08005e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d056      	beq.n	8005f0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e5e:	4b2e      	ldr	r3, [pc, #184]	; (8005f18 <xTaskPriorityDisinherit+0xd0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d00a      	beq.n	8005e7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	60fb      	str	r3, [r7, #12]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60bb      	str	r3, [r7, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d02c      	beq.n	8005f0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d128      	bne.n	8005f0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe fc36 	bl	8004730 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <xTaskPriorityDisinherit+0xd4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d903      	bls.n	8005eec <xTaskPriorityDisinherit+0xa4>
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <xTaskPriorityDisinherit+0xd4>)
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <xTaskPriorityDisinherit+0xd8>)
 8005efa:	441a      	add	r2, r3
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7fe fbb7 	bl	8004676 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f0c:	697b      	ldr	r3, [r7, #20]
	}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000ccc 	.word	0x20000ccc
 8005f1c:	200011a8 	.word	0x200011a8
 8005f20:	20000cd0 	.word	0x20000cd0

08005f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f2e:	4b21      	ldr	r3, [pc, #132]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f34:	4b20      	ldr	r3, [pc, #128]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fbf8 	bl	8004730 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d10a      	bne.n	8005f5e <prvAddCurrentTaskToDelayedList+0x3a>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4819      	ldr	r0, [pc, #100]	; (8005fbc <prvAddCurrentTaskToDelayedList+0x98>)
 8005f58:	f7fe fb8d 	bl	8004676 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f5c:	e026      	b.n	8005fac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4413      	add	r3, r2
 8005f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f66:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d209      	bcs.n	8005f8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f7fe fb9b 	bl	80046be <vListInsert>
}
 8005f88:	e010      	b.n	8005fac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f7fe fb91 	bl	80046be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d202      	bcs.n	8005fac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fa6:	4a08      	ldr	r2, [pc, #32]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6013      	str	r3, [r2, #0]
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	200011a4 	.word	0x200011a4
 8005fb8:	20000ccc 	.word	0x20000ccc
 8005fbc:	2000118c 	.word	0x2000118c
 8005fc0:	2000115c 	.word	0x2000115c
 8005fc4:	20001158 	.word	0x20001158
 8005fc8:	200011c0 	.word	0x200011c0

08005fcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fd6:	f000 fb07 	bl	80065e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fda:	4b1c      	ldr	r3, [pc, #112]	; (800604c <xTimerCreateTimerTask+0x80>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d021      	beq.n	8006026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fea:	1d3a      	adds	r2, r7, #4
 8005fec:	f107 0108 	add.w	r1, r7, #8
 8005ff0:	f107 030c 	add.w	r3, r7, #12
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe faf7 	bl	80045e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	9202      	str	r2, [sp, #8]
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	2302      	movs	r3, #2
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	2300      	movs	r3, #0
 800600a:	460a      	mov	r2, r1
 800600c:	4910      	ldr	r1, [pc, #64]	; (8006050 <xTimerCreateTimerTask+0x84>)
 800600e:	4811      	ldr	r0, [pc, #68]	; (8006054 <xTimerCreateTimerTask+0x88>)
 8006010:	f7ff f8de 	bl	80051d0 <xTaskCreateStatic>
 8006014:	4603      	mov	r3, r0
 8006016:	4a10      	ldr	r2, [pc, #64]	; (8006058 <xTimerCreateTimerTask+0x8c>)
 8006018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <xTimerCreateTimerTask+0x8c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006022:	2301      	movs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	613b      	str	r3, [r7, #16]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006042:	697b      	ldr	r3, [r7, #20]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	200011fc 	.word	0x200011fc
 8006050:	0800b7ec 	.word	0x0800b7ec
 8006054:	08006191 	.word	0x08006191
 8006058:	20001200 	.word	0x20001200

0800605c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800606a:	2300      	movs	r3, #0
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	623b      	str	r3, [r7, #32]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <xTimerGenericCommand+0x98>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d02a      	beq.n	80060e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b05      	cmp	r3, #5
 80060a2:	dc18      	bgt.n	80060d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060a4:	f7ff feb2 	bl	8005e0c <xTaskGetSchedulerState>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d109      	bne.n	80060c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <xTimerGenericCommand+0x98>)
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	f107 0110 	add.w	r1, r7, #16
 80060b6:	2300      	movs	r3, #0
 80060b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ba:	f7fe fca1 	bl	8004a00 <xQueueGenericSend>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24
 80060c0:	e012      	b.n	80060e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <xTimerGenericCommand+0x98>)
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	f107 0110 	add.w	r1, r7, #16
 80060ca:	2300      	movs	r3, #0
 80060cc:	2200      	movs	r2, #0
 80060ce:	f7fe fc97 	bl	8004a00 <xQueueGenericSend>
 80060d2:	6278      	str	r0, [r7, #36]	; 0x24
 80060d4:	e008      	b.n	80060e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060d6:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <xTimerGenericCommand+0x98>)
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	f107 0110 	add.w	r1, r7, #16
 80060de:	2300      	movs	r3, #0
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	f7fe fd8b 	bl	8004bfc <xQueueGenericSendFromISR>
 80060e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3728      	adds	r7, #40	; 0x28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	200011fc 	.word	0x200011fc

080060f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006102:	4b22      	ldr	r3, [pc, #136]	; (800618c <prvProcessExpiredTimer+0x94>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	3304      	adds	r3, #4
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe fb0d 	bl	8004730 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d022      	beq.n	800616a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	699a      	ldr	r2, [r3, #24]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	18d1      	adds	r1, r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	6978      	ldr	r0, [r7, #20]
 8006132:	f000 f8d1 	bl	80062d8 <prvInsertTimerInActiveList>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01f      	beq.n	800617c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800613c:	2300      	movs	r3, #0
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	2300      	movs	r3, #0
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	2100      	movs	r1, #0
 8006146:	6978      	ldr	r0, [r7, #20]
 8006148:	f7ff ff88 	bl	800605c <xTimerGenericCommand>
 800614c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d113      	bne.n	800617c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	60fb      	str	r3, [r7, #12]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	b2da      	uxtb	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	6978      	ldr	r0, [r7, #20]
 8006182:	4798      	blx	r3
}
 8006184:	bf00      	nop
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	200011f4 	.word	0x200011f4

08006190 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006198:	f107 0308 	add.w	r3, r7, #8
 800619c:	4618      	mov	r0, r3
 800619e:	f000 f857 	bl	8006250 <prvGetNextExpireTime>
 80061a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4619      	mov	r1, r3
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f803 	bl	80061b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061ae:	f000 f8d5 	bl	800635c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061b2:	e7f1      	b.n	8006198 <prvTimerTask+0x8>

080061b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061be:	f7ff fa43 	bl	8005648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061c2:	f107 0308 	add.w	r3, r7, #8
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 f866 	bl	8006298 <prvSampleTimeNow>
 80061cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d130      	bne.n	8006236 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <prvProcessTimerOrBlockTask+0x3c>
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d806      	bhi.n	80061f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061e2:	f7ff fa3f 	bl	8005664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff85 	bl	80060f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061ee:	e024      	b.n	800623a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <prvProcessTimerOrBlockTask+0x90>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <prvProcessTimerOrBlockTask+0x50>
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <prvProcessTimerOrBlockTask+0x52>
 8006204:	2300      	movs	r3, #0
 8006206:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <prvProcessTimerOrBlockTask+0x94>)
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	4619      	mov	r1, r3
 8006216:	f7fe ffa7 	bl	8005168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800621a:	f7ff fa23 	bl	8005664 <xTaskResumeAll>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006224:	4b09      	ldr	r3, [pc, #36]	; (800624c <prvProcessTimerOrBlockTask+0x98>)
 8006226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	f3bf 8f6f 	isb	sy
}
 8006234:	e001      	b.n	800623a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006236:	f7ff fa15 	bl	8005664 <xTaskResumeAll>
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	200011f8 	.word	0x200011f8
 8006248:	200011fc 	.word	0x200011fc
 800624c:	e000ed04 	.word	0xe000ed04

08006250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006258:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <prvGetNextExpireTime+0x44>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <prvGetNextExpireTime+0x16>
 8006262:	2201      	movs	r2, #1
 8006264:	e000      	b.n	8006268 <prvGetNextExpireTime+0x18>
 8006266:	2200      	movs	r2, #0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006274:	4b07      	ldr	r3, [pc, #28]	; (8006294 <prvGetNextExpireTime+0x44>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e001      	b.n	8006284 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006284:	68fb      	ldr	r3, [r7, #12]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	200011f4 	.word	0x200011f4

08006298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062a0:	f7ff fa7e 	bl	80057a0 <xTaskGetTickCount>
 80062a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <prvSampleTimeNow+0x3c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d205      	bcs.n	80062bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062b0:	f000 f936 	bl	8006520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062c2:	4a04      	ldr	r2, [pc, #16]	; (80062d4 <prvSampleTimeNow+0x3c>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062c8:	68fb      	ldr	r3, [r7, #12]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20001204 	.word	0x20001204

080062d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d812      	bhi.n	8006324 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	d302      	bcc.n	8006312 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	e01b      	b.n	800634a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006312:	4b10      	ldr	r3, [pc, #64]	; (8006354 <prvInsertTimerInActiveList+0x7c>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7fe f9ce 	bl	80046be <vListInsert>
 8006322:	e012      	b.n	800634a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d206      	bcs.n	800633a <prvInsertTimerInActiveList+0x62>
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d302      	bcc.n	800633a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e007      	b.n	800634a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <prvInsertTimerInActiveList+0x80>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3304      	adds	r3, #4
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7fe f9ba 	bl	80046be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800634a:	697b      	ldr	r3, [r7, #20]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200011f8 	.word	0x200011f8
 8006358:	200011f4 	.word	0x200011f4

0800635c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08e      	sub	sp, #56	; 0x38
 8006360:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006362:	e0ca      	b.n	80064fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	da18      	bge.n	800639c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	3304      	adds	r3, #4
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	61fb      	str	r3, [r7, #28]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006392:	6850      	ldr	r0, [r2, #4]
 8006394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006396:	6892      	ldr	r2, [r2, #8]
 8006398:	4611      	mov	r1, r2
 800639a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f2c0 80aa 	blt.w	80064f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	3304      	adds	r3, #4
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe f9bb 	bl	8004730 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063ba:	463b      	mov	r3, r7
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff ff6b 	bl	8006298 <prvSampleTimeNow>
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b09      	cmp	r3, #9
 80063c8:	f200 8097 	bhi.w	80064fa <prvProcessReceivedCommands+0x19e>
 80063cc:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <prvProcessReceivedCommands+0x78>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063fd 	.word	0x080063fd
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	080063fd 	.word	0x080063fd
 80063e0:	08006471 	.word	0x08006471
 80063e4:	08006485 	.word	0x08006485
 80063e8:	080064cf 	.word	0x080064cf
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	080063fd 	.word	0x080063fd
 80063f4:	08006471 	.word	0x08006471
 80063f8:	08006485 	.word	0x08006485
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	18d1      	adds	r1, r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641c:	f7ff ff5c 	bl	80062d8 <prvInsertTimerInActiveList>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d069      	beq.n	80064fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d05e      	beq.n	80064fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	441a      	add	r2, r3
 8006444:	2300      	movs	r3, #0
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2300      	movs	r3, #0
 800644a:	2100      	movs	r1, #0
 800644c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800644e:	f7ff fe05 	bl	800605c <xTimerGenericCommand>
 8006452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d14f      	bne.n	80064fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	61bb      	str	r3, [r7, #24]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006482:	e03a      	b.n	80064fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	617b      	str	r3, [r7, #20]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	18d1      	adds	r1, r2, r3
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c8:	f7ff ff06 	bl	80062d8 <prvInsertTimerInActiveList>
					break;
 80064cc:	e015      	b.n	80064fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d103      	bne.n	80064e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80064dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064de:	f000 fbdf 	bl	8006ca0 <vPortFree>
 80064e2:	e00a      	b.n	80064fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064f6:	e000      	b.n	80064fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80064f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064fa:	4b08      	ldr	r3, [pc, #32]	; (800651c <prvProcessReceivedCommands+0x1c0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	1d39      	adds	r1, r7, #4
 8006500:	2200      	movs	r2, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fc16 	bl	8004d34 <xQueueReceive>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	f47f af2a 	bne.w	8006364 <prvProcessReceivedCommands+0x8>
	}
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	3730      	adds	r7, #48	; 0x30
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200011fc 	.word	0x200011fc

08006520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006526:	e048      	b.n	80065ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006528:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <prvSwitchTimerLists+0xc0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006532:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <prvSwitchTimerLists+0xc0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe f8f5 	bl	8004730 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02e      	beq.n	80065ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4413      	add	r3, r2
 8006564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	429a      	cmp	r2, r3
 800656c:	d90e      	bls.n	800658c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800657a:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <prvSwitchTimerLists+0xc0>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3304      	adds	r3, #4
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f7fe f89a 	bl	80046be <vListInsert>
 800658a:	e016      	b.n	80065ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800658c:	2300      	movs	r3, #0
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	2300      	movs	r3, #0
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff fd60 	bl	800605c <xTimerGenericCommand>
 800659c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	603b      	str	r3, [r7, #0]
}
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <prvSwitchTimerLists+0xc0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1b1      	bne.n	8006528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <prvSwitchTimerLists+0xc0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <prvSwitchTimerLists+0xc4>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a04      	ldr	r2, [pc, #16]	; (80065e0 <prvSwitchTimerLists+0xc0>)
 80065d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065d2:	4a04      	ldr	r2, [pc, #16]	; (80065e4 <prvSwitchTimerLists+0xc4>)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	6013      	str	r3, [r2, #0]
}
 80065d8:	bf00      	nop
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	200011f4 	.word	0x200011f4
 80065e4:	200011f8 	.word	0x200011f8

080065e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065ee:	f000 f969 	bl	80068c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065f2:	4b15      	ldr	r3, [pc, #84]	; (8006648 <prvCheckForValidListAndQueue+0x60>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d120      	bne.n	800663c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065fa:	4814      	ldr	r0, [pc, #80]	; (800664c <prvCheckForValidListAndQueue+0x64>)
 80065fc:	f7fe f80e 	bl	800461c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006600:	4813      	ldr	r0, [pc, #76]	; (8006650 <prvCheckForValidListAndQueue+0x68>)
 8006602:	f7fe f80b 	bl	800461c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006606:	4b13      	ldr	r3, [pc, #76]	; (8006654 <prvCheckForValidListAndQueue+0x6c>)
 8006608:	4a10      	ldr	r2, [pc, #64]	; (800664c <prvCheckForValidListAndQueue+0x64>)
 800660a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800660c:	4b12      	ldr	r3, [pc, #72]	; (8006658 <prvCheckForValidListAndQueue+0x70>)
 800660e:	4a10      	ldr	r2, [pc, #64]	; (8006650 <prvCheckForValidListAndQueue+0x68>)
 8006610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006612:	2300      	movs	r3, #0
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4b11      	ldr	r3, [pc, #68]	; (800665c <prvCheckForValidListAndQueue+0x74>)
 8006618:	4a11      	ldr	r2, [pc, #68]	; (8006660 <prvCheckForValidListAndQueue+0x78>)
 800661a:	2110      	movs	r1, #16
 800661c:	200a      	movs	r0, #10
 800661e:	f7fe f919 	bl	8004854 <xQueueGenericCreateStatic>
 8006622:	4603      	mov	r3, r0
 8006624:	4a08      	ldr	r2, [pc, #32]	; (8006648 <prvCheckForValidListAndQueue+0x60>)
 8006626:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <prvCheckForValidListAndQueue+0x60>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <prvCheckForValidListAndQueue+0x60>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	490b      	ldr	r1, [pc, #44]	; (8006664 <prvCheckForValidListAndQueue+0x7c>)
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fd6c 	bl	8005114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800663c:	f000 f972 	bl	8006924 <vPortExitCritical>
}
 8006640:	bf00      	nop
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	200011fc 	.word	0x200011fc
 800664c:	200011cc 	.word	0x200011cc
 8006650:	200011e0 	.word	0x200011e0
 8006654:	200011f4 	.word	0x200011f4
 8006658:	200011f8 	.word	0x200011f8
 800665c:	200012a8 	.word	0x200012a8
 8006660:	20001208 	.word	0x20001208
 8006664:	0800b7f4 	.word	0x0800b7f4

08006668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3b04      	subs	r3, #4
 8006678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3b04      	subs	r3, #4
 8006686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f023 0201 	bic.w	r2, r3, #1
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b04      	subs	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006698:	4a0c      	ldr	r2, [pc, #48]	; (80066cc <pxPortInitialiseStack+0x64>)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b14      	subs	r3, #20
 80066a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b04      	subs	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f06f 0202 	mvn.w	r2, #2
 80066b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3b20      	subs	r3, #32
 80066bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066be:	68fb      	ldr	r3, [r7, #12]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	080066d1 	.word	0x080066d1

080066d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <prvTaskExitError+0x54>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d00a      	beq.n	80066fa <prvTaskExitError+0x2a>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	60fb      	str	r3, [r7, #12]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <prvTaskExitError+0x28>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	60bb      	str	r3, [r7, #8]
}
 800670c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800670e:	bf00      	nop
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0fc      	beq.n	8006710 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	20000014 	.word	0x20000014
	...

08006730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <pxCurrentTCBConst2>)
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	6808      	ldr	r0, [r1, #0]
 8006736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673a:	f380 8809 	msr	PSP, r0
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8811 	msr	BASEPRI, r0
 800674a:	4770      	bx	lr
 800674c:	f3af 8000 	nop.w

08006750 <pxCurrentTCBConst2>:
 8006750:	20000ccc 	.word	0x20000ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop

08006758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006758:	4808      	ldr	r0, [pc, #32]	; (800677c <prvPortStartFirstTask+0x24>)
 800675a:	6800      	ldr	r0, [r0, #0]
 800675c:	6800      	ldr	r0, [r0, #0]
 800675e:	f380 8808 	msr	MSP, r0
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8814 	msr	CONTROL, r0
 800676a:	b662      	cpsie	i
 800676c:	b661      	cpsie	f
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	df00      	svc	0
 8006778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800677a:	bf00      	nop
 800677c:	e000ed08 	.word	0xe000ed08

08006780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006786:	4b46      	ldr	r3, [pc, #280]	; (80068a0 <xPortStartScheduler+0x120>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a46      	ldr	r2, [pc, #280]	; (80068a4 <xPortStartScheduler+0x124>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10a      	bne.n	80067a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	613b      	str	r3, [r7, #16]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067a6:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <xPortStartScheduler+0x120>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a3f      	ldr	r2, [pc, #252]	; (80068a8 <xPortStartScheduler+0x128>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10a      	bne.n	80067c6 <xPortStartScheduler+0x46>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	60fb      	str	r3, [r7, #12]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067c6:	4b39      	ldr	r3, [pc, #228]	; (80068ac <xPortStartScheduler+0x12c>)
 80067c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	22ff      	movs	r2, #255	; 0xff
 80067d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <xPortStartScheduler+0x130>)
 80067ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ee:	4b31      	ldr	r3, [pc, #196]	; (80068b4 <xPortStartScheduler+0x134>)
 80067f0:	2207      	movs	r2, #7
 80067f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067f4:	e009      	b.n	800680a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067f6:	4b2f      	ldr	r3, [pc, #188]	; (80068b4 <xPortStartScheduler+0x134>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	4a2d      	ldr	r2, [pc, #180]	; (80068b4 <xPortStartScheduler+0x134>)
 80067fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	b2db      	uxtb	r3, r3
 8006808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d0ef      	beq.n	80067f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006816:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <xPortStartScheduler+0x134>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1c3 0307 	rsb	r3, r3, #7
 800681e:	2b04      	cmp	r3, #4
 8006820:	d00a      	beq.n	8006838 <xPortStartScheduler+0xb8>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60bb      	str	r3, [r7, #8]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006838:	4b1e      	ldr	r3, [pc, #120]	; (80068b4 <xPortStartScheduler+0x134>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <xPortStartScheduler+0x134>)
 8006840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006842:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <xPortStartScheduler+0x134>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800684a:	4a1a      	ldr	r2, [pc, #104]	; (80068b4 <xPortStartScheduler+0x134>)
 800684c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006856:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <xPortStartScheduler+0x138>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <xPortStartScheduler+0x138>)
 800685c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <xPortStartScheduler+0x138>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <xPortStartScheduler+0x138>)
 8006868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800686c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800686e:	f000 f8dd 	bl	8006a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006872:	4b12      	ldr	r3, [pc, #72]	; (80068bc <xPortStartScheduler+0x13c>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006878:	f000 f8fc 	bl	8006a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <xPortStartScheduler+0x140>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a0f      	ldr	r2, [pc, #60]	; (80068c0 <xPortStartScheduler+0x140>)
 8006882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006888:	f7ff ff66 	bl	8006758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800688c:	f7ff f852 	bl	8005934 <vTaskSwitchContext>
	prvTaskExitError();
 8006890:	f7ff ff1e 	bl	80066d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	e000ed00 	.word	0xe000ed00
 80068a4:	410fc271 	.word	0x410fc271
 80068a8:	410fc270 	.word	0x410fc270
 80068ac:	e000e400 	.word	0xe000e400
 80068b0:	200012f8 	.word	0x200012f8
 80068b4:	200012fc 	.word	0x200012fc
 80068b8:	e000ed20 	.word	0xe000ed20
 80068bc:	20000014 	.word	0x20000014
 80068c0:	e000ef34 	.word	0xe000ef34

080068c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	607b      	str	r3, [r7, #4]
}
 80068dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <vPortEnterCritical+0x58>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	4a0d      	ldr	r2, [pc, #52]	; (800691c <vPortEnterCritical+0x58>)
 80068e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068e8:	4b0c      	ldr	r3, [pc, #48]	; (800691c <vPortEnterCritical+0x58>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d10f      	bne.n	8006910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068f0:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <vPortEnterCritical+0x5c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <vPortEnterCritical+0x4c>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	603b      	str	r3, [r7, #0]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vPortEnterCritical+0x4a>
	}
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	20000014 	.word	0x20000014
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800692a:	4b12      	ldr	r3, [pc, #72]	; (8006974 <vPortExitCritical+0x50>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <vPortExitCritical+0x24>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	607b      	str	r3, [r7, #4]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <vPortExitCritical+0x50>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3b01      	subs	r3, #1
 800694e:	4a09      	ldr	r2, [pc, #36]	; (8006974 <vPortExitCritical+0x50>)
 8006950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <vPortExitCritical+0x50>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d105      	bne.n	8006966 <vPortExitCritical+0x42>
 800695a:	2300      	movs	r3, #0
 800695c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f383 8811 	msr	BASEPRI, r3
}
 8006964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000014 	.word	0x20000014
	...

08006980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006980:	f3ef 8009 	mrs	r0, PSP
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <pxCurrentTCBConst>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f01e 0f10 	tst.w	lr, #16
 8006990:	bf08      	it	eq
 8006992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699a:	6010      	str	r0, [r2, #0]
 800699c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069a4:	f380 8811 	msr	BASEPRI, r0
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f7fe ffc0 	bl	8005934 <vTaskSwitchContext>
 80069b4:	f04f 0000 	mov.w	r0, #0
 80069b8:	f380 8811 	msr	BASEPRI, r0
 80069bc:	bc09      	pop	{r0, r3}
 80069be:	6819      	ldr	r1, [r3, #0]
 80069c0:	6808      	ldr	r0, [r1, #0]
 80069c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c6:	f01e 0f10 	tst.w	lr, #16
 80069ca:	bf08      	it	eq
 80069cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069d0:	f380 8809 	msr	PSP, r0
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst>:
 80069e0:	20000ccc 	.word	0x20000ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a02:	f7fe fedd 	bl	80057c0 <xTaskIncrementTick>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a0c:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <xPortSysTickHandler+0x40>)
 8006a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	2300      	movs	r3, #0
 8006a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f383 8811 	msr	BASEPRI, r3
}
 8006a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <vPortSetupTimerInterrupt+0x34>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <vPortSetupTimerInterrupt+0x38>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <vPortSetupTimerInterrupt+0x3c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <vPortSetupTimerInterrupt+0x40>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	099b      	lsrs	r3, r3, #6
 8006a48:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <vPortSetupTimerInterrupt+0x44>)
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a4e:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <vPortSetupTimerInterrupt+0x34>)
 8006a50:	2207      	movs	r2, #7
 8006a52:	601a      	str	r2, [r3, #0]
}
 8006a54:	bf00      	nop
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	e000e010 	.word	0xe000e010
 8006a64:	e000e018 	.word	0xe000e018
 8006a68:	20000008 	.word	0x20000008
 8006a6c:	10624dd3 	.word	0x10624dd3
 8006a70:	e000e014 	.word	0xe000e014

08006a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a84 <vPortEnableVFP+0x10>
 8006a78:	6801      	ldr	r1, [r0, #0]
 8006a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a7e:	6001      	str	r1, [r0, #0]
 8006a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a82:	bf00      	nop
 8006a84:	e000ed88 	.word	0xe000ed88

08006a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a8e:	f3ef 8305 	mrs	r3, IPSR
 8006a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b0f      	cmp	r3, #15
 8006a98:	d914      	bls.n	8006ac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a9a:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <vPortValidateInterruptPriority+0x70>)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006aa4:	4b15      	ldr	r3, [pc, #84]	; (8006afc <vPortValidateInterruptPriority+0x74>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	7afa      	ldrb	r2, [r7, #11]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d20a      	bcs.n	8006ac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <vPortValidateInterruptPriority+0x78>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006acc:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <vPortValidateInterruptPriority+0x7c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d90a      	bls.n	8006aea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	603b      	str	r3, [r7, #0]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <vPortValidateInterruptPriority+0x60>
	}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	e000e3f0 	.word	0xe000e3f0
 8006afc:	200012f8 	.word	0x200012f8
 8006b00:	e000ed0c 	.word	0xe000ed0c
 8006b04:	200012fc 	.word	0x200012fc

08006b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	; 0x28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b14:	f7fe fd98 	bl	8005648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b18:	4b5b      	ldr	r3, [pc, #364]	; (8006c88 <pvPortMalloc+0x180>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b20:	f000 f920 	bl	8006d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b24:	4b59      	ldr	r3, [pc, #356]	; (8006c8c <pvPortMalloc+0x184>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 8093 	bne.w	8006c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01d      	beq.n	8006b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b38:	2208      	movs	r2, #8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d014      	beq.n	8006b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f023 0307 	bic.w	r3, r3, #7
 8006b50:	3308      	adds	r3, #8
 8006b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <pvPortMalloc+0x6c>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	617b      	str	r3, [r7, #20]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d06e      	beq.n	8006c58 <pvPortMalloc+0x150>
 8006b7a:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <pvPortMalloc+0x188>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d869      	bhi.n	8006c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b84:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <pvPortMalloc+0x18c>)
 8006b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b88:	4b42      	ldr	r3, [pc, #264]	; (8006c94 <pvPortMalloc+0x18c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8e:	e004      	b.n	8006b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d903      	bls.n	8006bac <pvPortMalloc+0xa4>
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f1      	bne.n	8006b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bac:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <pvPortMalloc+0x180>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d050      	beq.n	8006c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2208      	movs	r2, #8
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d91f      	bls.n	8006c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4413      	add	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <pvPortMalloc+0xf8>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	613b      	str	r3, [r7, #16]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	1ad2      	subs	r2, r2, r3
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c12:	69b8      	ldr	r0, [r7, #24]
 8006c14:	f000 f908 	bl	8006e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c18:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <pvPortMalloc+0x188>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <pvPortMalloc+0x188>)
 8006c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <pvPortMalloc+0x188>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b1b      	ldr	r3, [pc, #108]	; (8006c98 <pvPortMalloc+0x190>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d203      	bcs.n	8006c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c32:	4b17      	ldr	r3, [pc, #92]	; (8006c90 <pvPortMalloc+0x188>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <pvPortMalloc+0x190>)
 8006c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <pvPortMalloc+0x184>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	431a      	orrs	r2, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <pvPortMalloc+0x194>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	4a11      	ldr	r2, [pc, #68]	; (8006c9c <pvPortMalloc+0x194>)
 8006c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c58:	f7fe fd04 	bl	8005664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <pvPortMalloc+0x174>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60fb      	str	r3, [r7, #12]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <pvPortMalloc+0x172>
	return pvReturn;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20004f08 	.word	0x20004f08
 8006c8c:	20004f1c 	.word	0x20004f1c
 8006c90:	20004f0c 	.word	0x20004f0c
 8006c94:	20004f00 	.word	0x20004f00
 8006c98:	20004f10 	.word	0x20004f10
 8006c9c:	20004f14 	.word	0x20004f14

08006ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d04d      	beq.n	8006d4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	425b      	negs	r3, r3
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4413      	add	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	4b24      	ldr	r3, [pc, #144]	; (8006d58 <vPortFree+0xb8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <vPortFree+0x44>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60fb      	str	r3, [r7, #12]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <vPortFree+0x62>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60bb      	str	r3, [r7, #8]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <vPortFree+0xb8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01e      	beq.n	8006d4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11a      	bne.n	8006d4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <vPortFree+0xb8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	43db      	mvns	r3, r3
 8006d22:	401a      	ands	r2, r3
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d28:	f7fe fc8e 	bl	8005648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <vPortFree+0xbc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4413      	add	r3, r2
 8006d36:	4a09      	ldr	r2, [pc, #36]	; (8006d5c <vPortFree+0xbc>)
 8006d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d3a:	6938      	ldr	r0, [r7, #16]
 8006d3c:	f000 f874 	bl	8006e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <vPortFree+0xc0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	4a06      	ldr	r2, [pc, #24]	; (8006d60 <vPortFree+0xc0>)
 8006d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d4a:	f7fe fc8b 	bl	8005664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d4e:	bf00      	nop
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20004f1c 	.word	0x20004f1c
 8006d5c:	20004f0c 	.word	0x20004f0c
 8006d60:	20004f18 	.word	0x20004f18

08006d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d70:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <prvHeapInit+0xac>)
 8006d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00c      	beq.n	8006d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3307      	adds	r3, #7
 8006d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <prvHeapInit+0xac>)
 8006d94:	4413      	add	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <prvHeapInit+0xb0>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006da2:	4b1c      	ldr	r3, [pc, #112]	; (8006e14 <prvHeapInit+0xb0>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	4413      	add	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006db0:	2208      	movs	r2, #8
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0307 	bic.w	r3, r3, #7
 8006dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <prvHeapInit+0xb4>)
 8006dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <prvHeapInit+0xb4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dce:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <prvHeapInit+0xb4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <prvHeapInit+0xb4>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <prvHeapInit+0xb8>)
 8006df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <prvHeapInit+0xbc>)
 8006dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <prvHeapInit+0xc0>)
 8006dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e02:	601a      	str	r2, [r3, #0]
}
 8006e04:	bf00      	nop
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	20001300 	.word	0x20001300
 8006e14:	20004f00 	.word	0x20004f00
 8006e18:	20004f08 	.word	0x20004f08
 8006e1c:	20004f10 	.word	0x20004f10
 8006e20:	20004f0c 	.word	0x20004f0c
 8006e24:	20004f1c 	.word	0x20004f1c

08006e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e30:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <prvInsertBlockIntoFreeList+0xac>)
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e002      	b.n	8006e3c <prvInsertBlockIntoFreeList+0x14>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d8f7      	bhi.n	8006e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4413      	add	r3, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d108      	bne.n	8006e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	441a      	add	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	441a      	add	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d118      	bne.n	8006eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d00d      	beq.n	8006ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	441a      	add	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e008      	b.n	8006eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e003      	b.n	8006eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d002      	beq.n	8006ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20004f00 	.word	0x20004f00
 8006ed8:	20004f08 	.word	0x20004f08

08006edc <__errno>:
 8006edc:	4b01      	ldr	r3, [pc, #4]	; (8006ee4 <__errno+0x8>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000018 	.word	0x20000018

08006ee8 <__libc_init_array>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4d0d      	ldr	r5, [pc, #52]	; (8006f20 <__libc_init_array+0x38>)
 8006eec:	4c0d      	ldr	r4, [pc, #52]	; (8006f24 <__libc_init_array+0x3c>)
 8006eee:	1b64      	subs	r4, r4, r5
 8006ef0:	10a4      	asrs	r4, r4, #2
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	42a6      	cmp	r6, r4
 8006ef6:	d109      	bne.n	8006f0c <__libc_init_array+0x24>
 8006ef8:	4d0b      	ldr	r5, [pc, #44]	; (8006f28 <__libc_init_array+0x40>)
 8006efa:	4c0c      	ldr	r4, [pc, #48]	; (8006f2c <__libc_init_array+0x44>)
 8006efc:	f004 fc48 	bl	800b790 <_init>
 8006f00:	1b64      	subs	r4, r4, r5
 8006f02:	10a4      	asrs	r4, r4, #2
 8006f04:	2600      	movs	r6, #0
 8006f06:	42a6      	cmp	r6, r4
 8006f08:	d105      	bne.n	8006f16 <__libc_init_array+0x2e>
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f10:	4798      	blx	r3
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7ee      	b.n	8006ef4 <__libc_init_array+0xc>
 8006f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1a:	4798      	blx	r3
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	e7f2      	b.n	8006f06 <__libc_init_array+0x1e>
 8006f20:	0800ca2c 	.word	0x0800ca2c
 8006f24:	0800ca2c 	.word	0x0800ca2c
 8006f28:	0800ca2c 	.word	0x0800ca2c
 8006f2c:	0800ca30 	.word	0x0800ca30

08006f30 <memcpy>:
 8006f30:	440a      	add	r2, r1
 8006f32:	4291      	cmp	r1, r2
 8006f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f38:	d100      	bne.n	8006f3c <memcpy+0xc>
 8006f3a:	4770      	bx	lr
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f46:	4291      	cmp	r1, r2
 8006f48:	d1f9      	bne.n	8006f3e <memcpy+0xe>
 8006f4a:	bd10      	pop	{r4, pc}

08006f4c <memset>:
 8006f4c:	4402      	add	r2, r0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d100      	bne.n	8006f56 <memset+0xa>
 8006f54:	4770      	bx	lr
 8006f56:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5a:	e7f9      	b.n	8006f50 <memset+0x4>

08006f5c <__cvt>:
 8006f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	ec55 4b10 	vmov	r4, r5, d0
 8006f64:	2d00      	cmp	r5, #0
 8006f66:	460e      	mov	r6, r1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	bfbb      	ittet	lt
 8006f6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f72:	461d      	movlt	r5, r3
 8006f74:	2300      	movge	r3, #0
 8006f76:	232d      	movlt	r3, #45	; 0x2d
 8006f78:	700b      	strb	r3, [r1, #0]
 8006f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f80:	4691      	mov	r9, r2
 8006f82:	f023 0820 	bic.w	r8, r3, #32
 8006f86:	bfbc      	itt	lt
 8006f88:	4622      	movlt	r2, r4
 8006f8a:	4614      	movlt	r4, r2
 8006f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f90:	d005      	beq.n	8006f9e <__cvt+0x42>
 8006f92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f96:	d100      	bne.n	8006f9a <__cvt+0x3e>
 8006f98:	3601      	adds	r6, #1
 8006f9a:	2102      	movs	r1, #2
 8006f9c:	e000      	b.n	8006fa0 <__cvt+0x44>
 8006f9e:	2103      	movs	r1, #3
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	ab02      	add	r3, sp, #8
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	ec45 4b10 	vmov	d0, r4, r5
 8006fac:	4653      	mov	r3, sl
 8006fae:	4632      	mov	r2, r6
 8006fb0:	f001 fdb6 	bl	8008b20 <_dtoa_r>
 8006fb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fb8:	4607      	mov	r7, r0
 8006fba:	d102      	bne.n	8006fc2 <__cvt+0x66>
 8006fbc:	f019 0f01 	tst.w	r9, #1
 8006fc0:	d022      	beq.n	8007008 <__cvt+0xac>
 8006fc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc6:	eb07 0906 	add.w	r9, r7, r6
 8006fca:	d110      	bne.n	8006fee <__cvt+0x92>
 8006fcc:	783b      	ldrb	r3, [r7, #0]
 8006fce:	2b30      	cmp	r3, #48	; 0x30
 8006fd0:	d10a      	bne.n	8006fe8 <__cvt+0x8c>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fde:	b918      	cbnz	r0, 8006fe8 <__cvt+0x8c>
 8006fe0:	f1c6 0601 	rsb	r6, r6, #1
 8006fe4:	f8ca 6000 	str.w	r6, [sl]
 8006fe8:	f8da 3000 	ldr.w	r3, [sl]
 8006fec:	4499      	add	r9, r3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f7f9 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ffa:	b108      	cbz	r0, 8007000 <__cvt+0xa4>
 8006ffc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007000:	2230      	movs	r2, #48	; 0x30
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	454b      	cmp	r3, r9
 8007006:	d307      	bcc.n	8007018 <__cvt+0xbc>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800700c:	1bdb      	subs	r3, r3, r7
 800700e:	4638      	mov	r0, r7
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	b004      	add	sp, #16
 8007014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007018:	1c59      	adds	r1, r3, #1
 800701a:	9103      	str	r1, [sp, #12]
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e7f0      	b.n	8007002 <__cvt+0xa6>

08007020 <__exponent>:
 8007020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007022:	4603      	mov	r3, r0
 8007024:	2900      	cmp	r1, #0
 8007026:	bfb8      	it	lt
 8007028:	4249      	neglt	r1, r1
 800702a:	f803 2b02 	strb.w	r2, [r3], #2
 800702e:	bfb4      	ite	lt
 8007030:	222d      	movlt	r2, #45	; 0x2d
 8007032:	222b      	movge	r2, #43	; 0x2b
 8007034:	2909      	cmp	r1, #9
 8007036:	7042      	strb	r2, [r0, #1]
 8007038:	dd2a      	ble.n	8007090 <__exponent+0x70>
 800703a:	f10d 0407 	add.w	r4, sp, #7
 800703e:	46a4      	mov	ip, r4
 8007040:	270a      	movs	r7, #10
 8007042:	46a6      	mov	lr, r4
 8007044:	460a      	mov	r2, r1
 8007046:	fb91 f6f7 	sdiv	r6, r1, r7
 800704a:	fb07 1516 	mls	r5, r7, r6, r1
 800704e:	3530      	adds	r5, #48	; 0x30
 8007050:	2a63      	cmp	r2, #99	; 0x63
 8007052:	f104 34ff 	add.w	r4, r4, #4294967295
 8007056:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800705a:	4631      	mov	r1, r6
 800705c:	dcf1      	bgt.n	8007042 <__exponent+0x22>
 800705e:	3130      	adds	r1, #48	; 0x30
 8007060:	f1ae 0502 	sub.w	r5, lr, #2
 8007064:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007068:	1c44      	adds	r4, r0, #1
 800706a:	4629      	mov	r1, r5
 800706c:	4561      	cmp	r1, ip
 800706e:	d30a      	bcc.n	8007086 <__exponent+0x66>
 8007070:	f10d 0209 	add.w	r2, sp, #9
 8007074:	eba2 020e 	sub.w	r2, r2, lr
 8007078:	4565      	cmp	r5, ip
 800707a:	bf88      	it	hi
 800707c:	2200      	movhi	r2, #0
 800707e:	4413      	add	r3, r2
 8007080:	1a18      	subs	r0, r3, r0
 8007082:	b003      	add	sp, #12
 8007084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800708a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800708e:	e7ed      	b.n	800706c <__exponent+0x4c>
 8007090:	2330      	movs	r3, #48	; 0x30
 8007092:	3130      	adds	r1, #48	; 0x30
 8007094:	7083      	strb	r3, [r0, #2]
 8007096:	70c1      	strb	r1, [r0, #3]
 8007098:	1d03      	adds	r3, r0, #4
 800709a:	e7f1      	b.n	8007080 <__exponent+0x60>

0800709c <_printf_float>:
 800709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	ed2d 8b02 	vpush	{d8}
 80070a4:	b08d      	sub	sp, #52	; 0x34
 80070a6:	460c      	mov	r4, r1
 80070a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070ac:	4616      	mov	r6, r2
 80070ae:	461f      	mov	r7, r3
 80070b0:	4605      	mov	r5, r0
 80070b2:	f002 fe91 	bl	8009dd8 <_localeconv_r>
 80070b6:	f8d0 a000 	ldr.w	sl, [r0]
 80070ba:	4650      	mov	r0, sl
 80070bc:	f7f9 f888 	bl	80001d0 <strlen>
 80070c0:	2300      	movs	r3, #0
 80070c2:	930a      	str	r3, [sp, #40]	; 0x28
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	9305      	str	r3, [sp, #20]
 80070c8:	f8d8 3000 	ldr.w	r3, [r8]
 80070cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070d0:	3307      	adds	r3, #7
 80070d2:	f023 0307 	bic.w	r3, r3, #7
 80070d6:	f103 0208 	add.w	r2, r3, #8
 80070da:	f8c8 2000 	str.w	r2, [r8]
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80070f4:	ee08 0a10 	vmov	s16, r0
 80070f8:	4b9f      	ldr	r3, [pc, #636]	; (8007378 <_printf_float+0x2dc>)
 80070fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	f7f9 fd13 	bl	8000b2c <__aeabi_dcmpun>
 8007106:	bb88      	cbnz	r0, 800716c <_printf_float+0xd0>
 8007108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800710c:	4b9a      	ldr	r3, [pc, #616]	; (8007378 <_printf_float+0x2dc>)
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	f7f9 fced 	bl	8000af0 <__aeabi_dcmple>
 8007116:	bb48      	cbnz	r0, 800716c <_printf_float+0xd0>
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8007124:	b110      	cbz	r0, 800712c <_printf_float+0x90>
 8007126:	232d      	movs	r3, #45	; 0x2d
 8007128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800712c:	4b93      	ldr	r3, [pc, #588]	; (800737c <_printf_float+0x2e0>)
 800712e:	4894      	ldr	r0, [pc, #592]	; (8007380 <_printf_float+0x2e4>)
 8007130:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007134:	bf94      	ite	ls
 8007136:	4698      	movls	r8, r3
 8007138:	4680      	movhi	r8, r0
 800713a:	2303      	movs	r3, #3
 800713c:	6123      	str	r3, [r4, #16]
 800713e:	9b05      	ldr	r3, [sp, #20]
 8007140:	f023 0204 	bic.w	r2, r3, #4
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	9700      	str	r7, [sp, #0]
 800714c:	4633      	mov	r3, r6
 800714e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f9d8 	bl	8007508 <_printf_common>
 8007158:	3001      	adds	r0, #1
 800715a:	f040 8090 	bne.w	800727e <_printf_float+0x1e2>
 800715e:	f04f 30ff 	mov.w	r0, #4294967295
 8007162:	b00d      	add	sp, #52	; 0x34
 8007164:	ecbd 8b02 	vpop	{d8}
 8007168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 fcda 	bl	8000b2c <__aeabi_dcmpun>
 8007178:	b140      	cbz	r0, 800718c <_printf_float+0xf0>
 800717a:	464b      	mov	r3, r9
 800717c:	2b00      	cmp	r3, #0
 800717e:	bfbc      	itt	lt
 8007180:	232d      	movlt	r3, #45	; 0x2d
 8007182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007186:	487f      	ldr	r0, [pc, #508]	; (8007384 <_printf_float+0x2e8>)
 8007188:	4b7f      	ldr	r3, [pc, #508]	; (8007388 <_printf_float+0x2ec>)
 800718a:	e7d1      	b.n	8007130 <_printf_float+0x94>
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007192:	9206      	str	r2, [sp, #24]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	d13f      	bne.n	8007218 <_printf_float+0x17c>
 8007198:	2306      	movs	r3, #6
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	9b05      	ldr	r3, [sp, #20]
 800719e:	6861      	ldr	r1, [r4, #4]
 80071a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071a4:	2300      	movs	r3, #0
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	ab0a      	add	r3, sp, #40	; 0x28
 80071aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071ae:	ab09      	add	r3, sp, #36	; 0x24
 80071b0:	ec49 8b10 	vmov	d0, r8, r9
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071bc:	4628      	mov	r0, r5
 80071be:	f7ff fecd 	bl	8006f5c <__cvt>
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071c6:	2b47      	cmp	r3, #71	; 0x47
 80071c8:	4680      	mov	r8, r0
 80071ca:	d108      	bne.n	80071de <_printf_float+0x142>
 80071cc:	1cc8      	adds	r0, r1, #3
 80071ce:	db02      	blt.n	80071d6 <_printf_float+0x13a>
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	4299      	cmp	r1, r3
 80071d4:	dd41      	ble.n	800725a <_printf_float+0x1be>
 80071d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80071da:	fa5f fb8b 	uxtb.w	fp, fp
 80071de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071e2:	d820      	bhi.n	8007226 <_printf_float+0x18a>
 80071e4:	3901      	subs	r1, #1
 80071e6:	465a      	mov	r2, fp
 80071e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071ec:	9109      	str	r1, [sp, #36]	; 0x24
 80071ee:	f7ff ff17 	bl	8007020 <__exponent>
 80071f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f4:	1813      	adds	r3, r2, r0
 80071f6:	2a01      	cmp	r2, #1
 80071f8:	4681      	mov	r9, r0
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	dc02      	bgt.n	8007204 <_printf_float+0x168>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	07d2      	lsls	r2, r2, #31
 8007202:	d501      	bpl.n	8007208 <_printf_float+0x16c>
 8007204:	3301      	adds	r3, #1
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800720c:	2b00      	cmp	r3, #0
 800720e:	d09c      	beq.n	800714a <_printf_float+0xae>
 8007210:	232d      	movs	r3, #45	; 0x2d
 8007212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007216:	e798      	b.n	800714a <_printf_float+0xae>
 8007218:	9a06      	ldr	r2, [sp, #24]
 800721a:	2a47      	cmp	r2, #71	; 0x47
 800721c:	d1be      	bne.n	800719c <_printf_float+0x100>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1bc      	bne.n	800719c <_printf_float+0x100>
 8007222:	2301      	movs	r3, #1
 8007224:	e7b9      	b.n	800719a <_printf_float+0xfe>
 8007226:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800722a:	d118      	bne.n	800725e <_printf_float+0x1c2>
 800722c:	2900      	cmp	r1, #0
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	dd0b      	ble.n	800724a <_printf_float+0x1ae>
 8007232:	6121      	str	r1, [r4, #16]
 8007234:	b913      	cbnz	r3, 800723c <_printf_float+0x1a0>
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	07d0      	lsls	r0, r2, #31
 800723a:	d502      	bpl.n	8007242 <_printf_float+0x1a6>
 800723c:	3301      	adds	r3, #1
 800723e:	440b      	add	r3, r1
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	65a1      	str	r1, [r4, #88]	; 0x58
 8007244:	f04f 0900 	mov.w	r9, #0
 8007248:	e7de      	b.n	8007208 <_printf_float+0x16c>
 800724a:	b913      	cbnz	r3, 8007252 <_printf_float+0x1b6>
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	07d2      	lsls	r2, r2, #31
 8007250:	d501      	bpl.n	8007256 <_printf_float+0x1ba>
 8007252:	3302      	adds	r3, #2
 8007254:	e7f4      	b.n	8007240 <_printf_float+0x1a4>
 8007256:	2301      	movs	r3, #1
 8007258:	e7f2      	b.n	8007240 <_printf_float+0x1a4>
 800725a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800725e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007260:	4299      	cmp	r1, r3
 8007262:	db05      	blt.n	8007270 <_printf_float+0x1d4>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	6121      	str	r1, [r4, #16]
 8007268:	07d8      	lsls	r0, r3, #31
 800726a:	d5ea      	bpl.n	8007242 <_printf_float+0x1a6>
 800726c:	1c4b      	adds	r3, r1, #1
 800726e:	e7e7      	b.n	8007240 <_printf_float+0x1a4>
 8007270:	2900      	cmp	r1, #0
 8007272:	bfd4      	ite	le
 8007274:	f1c1 0202 	rsble	r2, r1, #2
 8007278:	2201      	movgt	r2, #1
 800727a:	4413      	add	r3, r2
 800727c:	e7e0      	b.n	8007240 <_printf_float+0x1a4>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	055a      	lsls	r2, r3, #21
 8007282:	d407      	bmi.n	8007294 <_printf_float+0x1f8>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	4642      	mov	r2, r8
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	d12c      	bne.n	80072ec <_printf_float+0x250>
 8007292:	e764      	b.n	800715e <_printf_float+0xc2>
 8007294:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007298:	f240 80e0 	bls.w	800745c <_printf_float+0x3c0>
 800729c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a0:	2200      	movs	r2, #0
 80072a2:	2300      	movs	r3, #0
 80072a4:	f7f9 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d034      	beq.n	8007316 <_printf_float+0x27a>
 80072ac:	4a37      	ldr	r2, [pc, #220]	; (800738c <_printf_float+0x2f0>)
 80072ae:	2301      	movs	r3, #1
 80072b0:	4631      	mov	r1, r6
 80072b2:	4628      	mov	r0, r5
 80072b4:	47b8      	blx	r7
 80072b6:	3001      	adds	r0, #1
 80072b8:	f43f af51 	beq.w	800715e <_printf_float+0xc2>
 80072bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072c0:	429a      	cmp	r2, r3
 80072c2:	db02      	blt.n	80072ca <_printf_float+0x22e>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	07d8      	lsls	r0, r3, #31
 80072c8:	d510      	bpl.n	80072ec <_printf_float+0x250>
 80072ca:	ee18 3a10 	vmov	r3, s16
 80072ce:	4652      	mov	r2, sl
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f af41 	beq.w	800715e <_printf_float+0xc2>
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	f104 091a 	add.w	r9, r4, #26
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	3b01      	subs	r3, #1
 80072e8:	4543      	cmp	r3, r8
 80072ea:	dc09      	bgt.n	8007300 <_printf_float+0x264>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	079b      	lsls	r3, r3, #30
 80072f0:	f100 8105 	bmi.w	80074fe <_printf_float+0x462>
 80072f4:	68e0      	ldr	r0, [r4, #12]
 80072f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f8:	4298      	cmp	r0, r3
 80072fa:	bfb8      	it	lt
 80072fc:	4618      	movlt	r0, r3
 80072fe:	e730      	b.n	8007162 <_printf_float+0xc6>
 8007300:	2301      	movs	r3, #1
 8007302:	464a      	mov	r2, r9
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f af27 	beq.w	800715e <_printf_float+0xc2>
 8007310:	f108 0801 	add.w	r8, r8, #1
 8007314:	e7e6      	b.n	80072e4 <_printf_float+0x248>
 8007316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	dc39      	bgt.n	8007390 <_printf_float+0x2f4>
 800731c:	4a1b      	ldr	r2, [pc, #108]	; (800738c <_printf_float+0x2f0>)
 800731e:	2301      	movs	r3, #1
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f af19 	beq.w	800715e <_printf_float+0xc2>
 800732c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007330:	4313      	orrs	r3, r2
 8007332:	d102      	bne.n	800733a <_printf_float+0x29e>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07d9      	lsls	r1, r3, #31
 8007338:	d5d8      	bpl.n	80072ec <_printf_float+0x250>
 800733a:	ee18 3a10 	vmov	r3, s16
 800733e:	4652      	mov	r2, sl
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f af09 	beq.w	800715e <_printf_float+0xc2>
 800734c:	f04f 0900 	mov.w	r9, #0
 8007350:	f104 0a1a 	add.w	sl, r4, #26
 8007354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007356:	425b      	negs	r3, r3
 8007358:	454b      	cmp	r3, r9
 800735a:	dc01      	bgt.n	8007360 <_printf_float+0x2c4>
 800735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735e:	e792      	b.n	8007286 <_printf_float+0x1ea>
 8007360:	2301      	movs	r3, #1
 8007362:	4652      	mov	r2, sl
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	f43f aef7 	beq.w	800715e <_printf_float+0xc2>
 8007370:	f109 0901 	add.w	r9, r9, #1
 8007374:	e7ee      	b.n	8007354 <_printf_float+0x2b8>
 8007376:	bf00      	nop
 8007378:	7fefffff 	.word	0x7fefffff
 800737c:	0800c574 	.word	0x0800c574
 8007380:	0800c578 	.word	0x0800c578
 8007384:	0800c580 	.word	0x0800c580
 8007388:	0800c57c 	.word	0x0800c57c
 800738c:	0800c584 	.word	0x0800c584
 8007390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007394:	429a      	cmp	r2, r3
 8007396:	bfa8      	it	ge
 8007398:	461a      	movge	r2, r3
 800739a:	2a00      	cmp	r2, #0
 800739c:	4691      	mov	r9, r2
 800739e:	dc37      	bgt.n	8007410 <_printf_float+0x374>
 80073a0:	f04f 0b00 	mov.w	fp, #0
 80073a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073a8:	f104 021a 	add.w	r2, r4, #26
 80073ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073ae:	9305      	str	r3, [sp, #20]
 80073b0:	eba3 0309 	sub.w	r3, r3, r9
 80073b4:	455b      	cmp	r3, fp
 80073b6:	dc33      	bgt.n	8007420 <_printf_float+0x384>
 80073b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073bc:	429a      	cmp	r2, r3
 80073be:	db3b      	blt.n	8007438 <_printf_float+0x39c>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07da      	lsls	r2, r3, #31
 80073c4:	d438      	bmi.n	8007438 <_printf_float+0x39c>
 80073c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c8:	9b05      	ldr	r3, [sp, #20]
 80073ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	eba2 0901 	sub.w	r9, r2, r1
 80073d2:	4599      	cmp	r9, r3
 80073d4:	bfa8      	it	ge
 80073d6:	4699      	movge	r9, r3
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	dc35      	bgt.n	800744a <_printf_float+0x3ae>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073e6:	f104 0a1a 	add.w	sl, r4, #26
 80073ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	eba3 0309 	sub.w	r3, r3, r9
 80073f4:	4543      	cmp	r3, r8
 80073f6:	f77f af79 	ble.w	80072ec <_printf_float+0x250>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4652      	mov	r2, sl
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	f43f aeaa 	beq.w	800715e <_printf_float+0xc2>
 800740a:	f108 0801 	add.w	r8, r8, #1
 800740e:	e7ec      	b.n	80073ea <_printf_float+0x34e>
 8007410:	4613      	mov	r3, r2
 8007412:	4631      	mov	r1, r6
 8007414:	4642      	mov	r2, r8
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	d1c0      	bne.n	80073a0 <_printf_float+0x304>
 800741e:	e69e      	b.n	800715e <_printf_float+0xc2>
 8007420:	2301      	movs	r3, #1
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	9205      	str	r2, [sp, #20]
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f ae97 	beq.w	800715e <_printf_float+0xc2>
 8007430:	9a05      	ldr	r2, [sp, #20]
 8007432:	f10b 0b01 	add.w	fp, fp, #1
 8007436:	e7b9      	b.n	80073ac <_printf_float+0x310>
 8007438:	ee18 3a10 	vmov	r3, s16
 800743c:	4652      	mov	r2, sl
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	d1be      	bne.n	80073c6 <_printf_float+0x32a>
 8007448:	e689      	b.n	800715e <_printf_float+0xc2>
 800744a:	9a05      	ldr	r2, [sp, #20]
 800744c:	464b      	mov	r3, r9
 800744e:	4442      	add	r2, r8
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	d1c1      	bne.n	80073de <_printf_float+0x342>
 800745a:	e680      	b.n	800715e <_printf_float+0xc2>
 800745c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800745e:	2a01      	cmp	r2, #1
 8007460:	dc01      	bgt.n	8007466 <_printf_float+0x3ca>
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d538      	bpl.n	80074d8 <_printf_float+0x43c>
 8007466:	2301      	movs	r3, #1
 8007468:	4642      	mov	r2, r8
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f ae74 	beq.w	800715e <_printf_float+0xc2>
 8007476:	ee18 3a10 	vmov	r3, s16
 800747a:	4652      	mov	r2, sl
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f ae6b 	beq.w	800715e <_printf_float+0xc2>
 8007488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800748c:	2200      	movs	r2, #0
 800748e:	2300      	movs	r3, #0
 8007490:	f7f9 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007494:	b9d8      	cbnz	r0, 80074ce <_printf_float+0x432>
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	f108 0201 	add.w	r2, r8, #1
 800749c:	3b01      	subs	r3, #1
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	d10e      	bne.n	80074c6 <_printf_float+0x42a>
 80074a8:	e659      	b.n	800715e <_printf_float+0xc2>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4652      	mov	r2, sl
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f ae52 	beq.w	800715e <_printf_float+0xc2>
 80074ba:	f108 0801 	add.w	r8, r8, #1
 80074be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4543      	cmp	r3, r8
 80074c4:	dcf1      	bgt.n	80074aa <_printf_float+0x40e>
 80074c6:	464b      	mov	r3, r9
 80074c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074cc:	e6dc      	b.n	8007288 <_printf_float+0x1ec>
 80074ce:	f04f 0800 	mov.w	r8, #0
 80074d2:	f104 0a1a 	add.w	sl, r4, #26
 80074d6:	e7f2      	b.n	80074be <_printf_float+0x422>
 80074d8:	2301      	movs	r3, #1
 80074da:	4642      	mov	r2, r8
 80074dc:	e7df      	b.n	800749e <_printf_float+0x402>
 80074de:	2301      	movs	r3, #1
 80074e0:	464a      	mov	r2, r9
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae38 	beq.w	800715e <_printf_float+0xc2>
 80074ee:	f108 0801 	add.w	r8, r8, #1
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	4543      	cmp	r3, r8
 80074fa:	dcf0      	bgt.n	80074de <_printf_float+0x442>
 80074fc:	e6fa      	b.n	80072f4 <_printf_float+0x258>
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	f104 0919 	add.w	r9, r4, #25
 8007506:	e7f4      	b.n	80074f2 <_printf_float+0x456>

08007508 <_printf_common>:
 8007508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800750c:	4616      	mov	r6, r2
 800750e:	4699      	mov	r9, r3
 8007510:	688a      	ldr	r2, [r1, #8]
 8007512:	690b      	ldr	r3, [r1, #16]
 8007514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007518:	4293      	cmp	r3, r2
 800751a:	bfb8      	it	lt
 800751c:	4613      	movlt	r3, r2
 800751e:	6033      	str	r3, [r6, #0]
 8007520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007524:	4607      	mov	r7, r0
 8007526:	460c      	mov	r4, r1
 8007528:	b10a      	cbz	r2, 800752e <_printf_common+0x26>
 800752a:	3301      	adds	r3, #1
 800752c:	6033      	str	r3, [r6, #0]
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	0699      	lsls	r1, r3, #26
 8007532:	bf42      	ittt	mi
 8007534:	6833      	ldrmi	r3, [r6, #0]
 8007536:	3302      	addmi	r3, #2
 8007538:	6033      	strmi	r3, [r6, #0]
 800753a:	6825      	ldr	r5, [r4, #0]
 800753c:	f015 0506 	ands.w	r5, r5, #6
 8007540:	d106      	bne.n	8007550 <_printf_common+0x48>
 8007542:	f104 0a19 	add.w	sl, r4, #25
 8007546:	68e3      	ldr	r3, [r4, #12]
 8007548:	6832      	ldr	r2, [r6, #0]
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	42ab      	cmp	r3, r5
 800754e:	dc26      	bgt.n	800759e <_printf_common+0x96>
 8007550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007554:	1e13      	subs	r3, r2, #0
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	bf18      	it	ne
 800755a:	2301      	movne	r3, #1
 800755c:	0692      	lsls	r2, r2, #26
 800755e:	d42b      	bmi.n	80075b8 <_printf_common+0xb0>
 8007560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007564:	4649      	mov	r1, r9
 8007566:	4638      	mov	r0, r7
 8007568:	47c0      	blx	r8
 800756a:	3001      	adds	r0, #1
 800756c:	d01e      	beq.n	80075ac <_printf_common+0xa4>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	68e5      	ldr	r5, [r4, #12]
 8007572:	6832      	ldr	r2, [r6, #0]
 8007574:	f003 0306 	and.w	r3, r3, #6
 8007578:	2b04      	cmp	r3, #4
 800757a:	bf08      	it	eq
 800757c:	1aad      	subeq	r5, r5, r2
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	6922      	ldr	r2, [r4, #16]
 8007582:	bf0c      	ite	eq
 8007584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007588:	2500      	movne	r5, #0
 800758a:	4293      	cmp	r3, r2
 800758c:	bfc4      	itt	gt
 800758e:	1a9b      	subgt	r3, r3, r2
 8007590:	18ed      	addgt	r5, r5, r3
 8007592:	2600      	movs	r6, #0
 8007594:	341a      	adds	r4, #26
 8007596:	42b5      	cmp	r5, r6
 8007598:	d11a      	bne.n	80075d0 <_printf_common+0xc8>
 800759a:	2000      	movs	r0, #0
 800759c:	e008      	b.n	80075b0 <_printf_common+0xa8>
 800759e:	2301      	movs	r3, #1
 80075a0:	4652      	mov	r2, sl
 80075a2:	4649      	mov	r1, r9
 80075a4:	4638      	mov	r0, r7
 80075a6:	47c0      	blx	r8
 80075a8:	3001      	adds	r0, #1
 80075aa:	d103      	bne.n	80075b4 <_printf_common+0xac>
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b4:	3501      	adds	r5, #1
 80075b6:	e7c6      	b.n	8007546 <_printf_common+0x3e>
 80075b8:	18e1      	adds	r1, r4, r3
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	2030      	movs	r0, #48	; 0x30
 80075be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075c2:	4422      	add	r2, r4
 80075c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075cc:	3302      	adds	r3, #2
 80075ce:	e7c7      	b.n	8007560 <_printf_common+0x58>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4622      	mov	r2, r4
 80075d4:	4649      	mov	r1, r9
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c0      	blx	r8
 80075da:	3001      	adds	r0, #1
 80075dc:	d0e6      	beq.n	80075ac <_printf_common+0xa4>
 80075de:	3601      	adds	r6, #1
 80075e0:	e7d9      	b.n	8007596 <_printf_common+0x8e>
	...

080075e4 <_printf_i>:
 80075e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	460c      	mov	r4, r1
 80075ea:	4691      	mov	r9, r2
 80075ec:	7e27      	ldrb	r7, [r4, #24]
 80075ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075f0:	2f78      	cmp	r7, #120	; 0x78
 80075f2:	4680      	mov	r8, r0
 80075f4:	469a      	mov	sl, r3
 80075f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075fa:	d807      	bhi.n	800760c <_printf_i+0x28>
 80075fc:	2f62      	cmp	r7, #98	; 0x62
 80075fe:	d80a      	bhi.n	8007616 <_printf_i+0x32>
 8007600:	2f00      	cmp	r7, #0
 8007602:	f000 80d8 	beq.w	80077b6 <_printf_i+0x1d2>
 8007606:	2f58      	cmp	r7, #88	; 0x58
 8007608:	f000 80a3 	beq.w	8007752 <_printf_i+0x16e>
 800760c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007614:	e03a      	b.n	800768c <_printf_i+0xa8>
 8007616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800761a:	2b15      	cmp	r3, #21
 800761c:	d8f6      	bhi.n	800760c <_printf_i+0x28>
 800761e:	a001      	add	r0, pc, #4	; (adr r0, 8007624 <_printf_i+0x40>)
 8007620:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007624:	0800767d 	.word	0x0800767d
 8007628:	08007691 	.word	0x08007691
 800762c:	0800760d 	.word	0x0800760d
 8007630:	0800760d 	.word	0x0800760d
 8007634:	0800760d 	.word	0x0800760d
 8007638:	0800760d 	.word	0x0800760d
 800763c:	08007691 	.word	0x08007691
 8007640:	0800760d 	.word	0x0800760d
 8007644:	0800760d 	.word	0x0800760d
 8007648:	0800760d 	.word	0x0800760d
 800764c:	0800760d 	.word	0x0800760d
 8007650:	0800779d 	.word	0x0800779d
 8007654:	080076c1 	.word	0x080076c1
 8007658:	0800777f 	.word	0x0800777f
 800765c:	0800760d 	.word	0x0800760d
 8007660:	0800760d 	.word	0x0800760d
 8007664:	080077bf 	.word	0x080077bf
 8007668:	0800760d 	.word	0x0800760d
 800766c:	080076c1 	.word	0x080076c1
 8007670:	0800760d 	.word	0x0800760d
 8007674:	0800760d 	.word	0x0800760d
 8007678:	08007787 	.word	0x08007787
 800767c:	680b      	ldr	r3, [r1, #0]
 800767e:	1d1a      	adds	r2, r3, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	600a      	str	r2, [r1, #0]
 8007684:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800768c:	2301      	movs	r3, #1
 800768e:	e0a3      	b.n	80077d8 <_printf_i+0x1f4>
 8007690:	6825      	ldr	r5, [r4, #0]
 8007692:	6808      	ldr	r0, [r1, #0]
 8007694:	062e      	lsls	r6, r5, #24
 8007696:	f100 0304 	add.w	r3, r0, #4
 800769a:	d50a      	bpl.n	80076b2 <_printf_i+0xce>
 800769c:	6805      	ldr	r5, [r0, #0]
 800769e:	600b      	str	r3, [r1, #0]
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	da03      	bge.n	80076ac <_printf_i+0xc8>
 80076a4:	232d      	movs	r3, #45	; 0x2d
 80076a6:	426d      	negs	r5, r5
 80076a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ac:	485e      	ldr	r0, [pc, #376]	; (8007828 <_printf_i+0x244>)
 80076ae:	230a      	movs	r3, #10
 80076b0:	e019      	b.n	80076e6 <_printf_i+0x102>
 80076b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076b6:	6805      	ldr	r5, [r0, #0]
 80076b8:	600b      	str	r3, [r1, #0]
 80076ba:	bf18      	it	ne
 80076bc:	b22d      	sxthne	r5, r5
 80076be:	e7ef      	b.n	80076a0 <_printf_i+0xbc>
 80076c0:	680b      	ldr	r3, [r1, #0]
 80076c2:	6825      	ldr	r5, [r4, #0]
 80076c4:	1d18      	adds	r0, r3, #4
 80076c6:	6008      	str	r0, [r1, #0]
 80076c8:	0628      	lsls	r0, r5, #24
 80076ca:	d501      	bpl.n	80076d0 <_printf_i+0xec>
 80076cc:	681d      	ldr	r5, [r3, #0]
 80076ce:	e002      	b.n	80076d6 <_printf_i+0xf2>
 80076d0:	0669      	lsls	r1, r5, #25
 80076d2:	d5fb      	bpl.n	80076cc <_printf_i+0xe8>
 80076d4:	881d      	ldrh	r5, [r3, #0]
 80076d6:	4854      	ldr	r0, [pc, #336]	; (8007828 <_printf_i+0x244>)
 80076d8:	2f6f      	cmp	r7, #111	; 0x6f
 80076da:	bf0c      	ite	eq
 80076dc:	2308      	moveq	r3, #8
 80076de:	230a      	movne	r3, #10
 80076e0:	2100      	movs	r1, #0
 80076e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076e6:	6866      	ldr	r6, [r4, #4]
 80076e8:	60a6      	str	r6, [r4, #8]
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	bfa2      	ittt	ge
 80076ee:	6821      	ldrge	r1, [r4, #0]
 80076f0:	f021 0104 	bicge.w	r1, r1, #4
 80076f4:	6021      	strge	r1, [r4, #0]
 80076f6:	b90d      	cbnz	r5, 80076fc <_printf_i+0x118>
 80076f8:	2e00      	cmp	r6, #0
 80076fa:	d04d      	beq.n	8007798 <_printf_i+0x1b4>
 80076fc:	4616      	mov	r6, r2
 80076fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007702:	fb03 5711 	mls	r7, r3, r1, r5
 8007706:	5dc7      	ldrb	r7, [r0, r7]
 8007708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800770c:	462f      	mov	r7, r5
 800770e:	42bb      	cmp	r3, r7
 8007710:	460d      	mov	r5, r1
 8007712:	d9f4      	bls.n	80076fe <_printf_i+0x11a>
 8007714:	2b08      	cmp	r3, #8
 8007716:	d10b      	bne.n	8007730 <_printf_i+0x14c>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	07df      	lsls	r7, r3, #31
 800771c:	d508      	bpl.n	8007730 <_printf_i+0x14c>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	6861      	ldr	r1, [r4, #4]
 8007722:	4299      	cmp	r1, r3
 8007724:	bfde      	ittt	le
 8007726:	2330      	movle	r3, #48	; 0x30
 8007728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800772c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007730:	1b92      	subs	r2, r2, r6
 8007732:	6122      	str	r2, [r4, #16]
 8007734:	f8cd a000 	str.w	sl, [sp]
 8007738:	464b      	mov	r3, r9
 800773a:	aa03      	add	r2, sp, #12
 800773c:	4621      	mov	r1, r4
 800773e:	4640      	mov	r0, r8
 8007740:	f7ff fee2 	bl	8007508 <_printf_common>
 8007744:	3001      	adds	r0, #1
 8007746:	d14c      	bne.n	80077e2 <_printf_i+0x1fe>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	b004      	add	sp, #16
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	4835      	ldr	r0, [pc, #212]	; (8007828 <_printf_i+0x244>)
 8007754:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	680e      	ldr	r6, [r1, #0]
 800775c:	061f      	lsls	r7, r3, #24
 800775e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007762:	600e      	str	r6, [r1, #0]
 8007764:	d514      	bpl.n	8007790 <_printf_i+0x1ac>
 8007766:	07d9      	lsls	r1, r3, #31
 8007768:	bf44      	itt	mi
 800776a:	f043 0320 	orrmi.w	r3, r3, #32
 800776e:	6023      	strmi	r3, [r4, #0]
 8007770:	b91d      	cbnz	r5, 800777a <_printf_i+0x196>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f023 0320 	bic.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	2310      	movs	r3, #16
 800777c:	e7b0      	b.n	80076e0 <_printf_i+0xfc>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	f043 0320 	orr.w	r3, r3, #32
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	2378      	movs	r3, #120	; 0x78
 8007788:	4828      	ldr	r0, [pc, #160]	; (800782c <_printf_i+0x248>)
 800778a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800778e:	e7e3      	b.n	8007758 <_printf_i+0x174>
 8007790:	065e      	lsls	r6, r3, #25
 8007792:	bf48      	it	mi
 8007794:	b2ad      	uxthmi	r5, r5
 8007796:	e7e6      	b.n	8007766 <_printf_i+0x182>
 8007798:	4616      	mov	r6, r2
 800779a:	e7bb      	b.n	8007714 <_printf_i+0x130>
 800779c:	680b      	ldr	r3, [r1, #0]
 800779e:	6826      	ldr	r6, [r4, #0]
 80077a0:	6960      	ldr	r0, [r4, #20]
 80077a2:	1d1d      	adds	r5, r3, #4
 80077a4:	600d      	str	r5, [r1, #0]
 80077a6:	0635      	lsls	r5, r6, #24
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0x1cc>
 80077ac:	6018      	str	r0, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <_printf_i+0x1d2>
 80077b0:	0671      	lsls	r1, r6, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0x1c8>
 80077b4:	8018      	strh	r0, [r3, #0]
 80077b6:	2300      	movs	r3, #0
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	4616      	mov	r6, r2
 80077bc:	e7ba      	b.n	8007734 <_printf_i+0x150>
 80077be:	680b      	ldr	r3, [r1, #0]
 80077c0:	1d1a      	adds	r2, r3, #4
 80077c2:	600a      	str	r2, [r1, #0]
 80077c4:	681e      	ldr	r6, [r3, #0]
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7f8 fd08 	bl	80001e0 <memchr>
 80077d0:	b108      	cbz	r0, 80077d6 <_printf_i+0x1f2>
 80077d2:	1b80      	subs	r0, r0, r6
 80077d4:	6060      	str	r0, [r4, #4]
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	2300      	movs	r3, #0
 80077dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e0:	e7a8      	b.n	8007734 <_printf_i+0x150>
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	4632      	mov	r2, r6
 80077e6:	4649      	mov	r1, r9
 80077e8:	4640      	mov	r0, r8
 80077ea:	47d0      	blx	sl
 80077ec:	3001      	adds	r0, #1
 80077ee:	d0ab      	beq.n	8007748 <_printf_i+0x164>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	079b      	lsls	r3, r3, #30
 80077f4:	d413      	bmi.n	800781e <_printf_i+0x23a>
 80077f6:	68e0      	ldr	r0, [r4, #12]
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	4298      	cmp	r0, r3
 80077fc:	bfb8      	it	lt
 80077fe:	4618      	movlt	r0, r3
 8007800:	e7a4      	b.n	800774c <_printf_i+0x168>
 8007802:	2301      	movs	r3, #1
 8007804:	4632      	mov	r2, r6
 8007806:	4649      	mov	r1, r9
 8007808:	4640      	mov	r0, r8
 800780a:	47d0      	blx	sl
 800780c:	3001      	adds	r0, #1
 800780e:	d09b      	beq.n	8007748 <_printf_i+0x164>
 8007810:	3501      	adds	r5, #1
 8007812:	68e3      	ldr	r3, [r4, #12]
 8007814:	9903      	ldr	r1, [sp, #12]
 8007816:	1a5b      	subs	r3, r3, r1
 8007818:	42ab      	cmp	r3, r5
 800781a:	dcf2      	bgt.n	8007802 <_printf_i+0x21e>
 800781c:	e7eb      	b.n	80077f6 <_printf_i+0x212>
 800781e:	2500      	movs	r5, #0
 8007820:	f104 0619 	add.w	r6, r4, #25
 8007824:	e7f5      	b.n	8007812 <_printf_i+0x22e>
 8007826:	bf00      	nop
 8007828:	0800c586 	.word	0x0800c586
 800782c:	0800c597 	.word	0x0800c597

08007830 <_scanf_float>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	b087      	sub	sp, #28
 8007836:	4617      	mov	r7, r2
 8007838:	9303      	str	r3, [sp, #12]
 800783a:	688b      	ldr	r3, [r1, #8]
 800783c:	1e5a      	subs	r2, r3, #1
 800783e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007842:	bf83      	ittte	hi
 8007844:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007848:	195b      	addhi	r3, r3, r5
 800784a:	9302      	strhi	r3, [sp, #8]
 800784c:	2300      	movls	r3, #0
 800784e:	bf86      	itte	hi
 8007850:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007854:	608b      	strhi	r3, [r1, #8]
 8007856:	9302      	strls	r3, [sp, #8]
 8007858:	680b      	ldr	r3, [r1, #0]
 800785a:	468b      	mov	fp, r1
 800785c:	2500      	movs	r5, #0
 800785e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007862:	f84b 3b1c 	str.w	r3, [fp], #28
 8007866:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800786a:	4680      	mov	r8, r0
 800786c:	460c      	mov	r4, r1
 800786e:	465e      	mov	r6, fp
 8007870:	46aa      	mov	sl, r5
 8007872:	46a9      	mov	r9, r5
 8007874:	9501      	str	r5, [sp, #4]
 8007876:	68a2      	ldr	r2, [r4, #8]
 8007878:	b152      	cbz	r2, 8007890 <_scanf_float+0x60>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b4e      	cmp	r3, #78	; 0x4e
 8007880:	d864      	bhi.n	800794c <_scanf_float+0x11c>
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d83c      	bhi.n	8007900 <_scanf_float+0xd0>
 8007886:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800788a:	b2c8      	uxtb	r0, r1
 800788c:	280e      	cmp	r0, #14
 800788e:	d93a      	bls.n	8007906 <_scanf_float+0xd6>
 8007890:	f1b9 0f00 	cmp.w	r9, #0
 8007894:	d003      	beq.n	800789e <_scanf_float+0x6e>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078a2:	f1ba 0f01 	cmp.w	sl, #1
 80078a6:	f200 8113 	bhi.w	8007ad0 <_scanf_float+0x2a0>
 80078aa:	455e      	cmp	r6, fp
 80078ac:	f200 8105 	bhi.w	8007aba <_scanf_float+0x28a>
 80078b0:	2501      	movs	r5, #1
 80078b2:	4628      	mov	r0, r5
 80078b4:	b007      	add	sp, #28
 80078b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80078be:	2a0d      	cmp	r2, #13
 80078c0:	d8e6      	bhi.n	8007890 <_scanf_float+0x60>
 80078c2:	a101      	add	r1, pc, #4	; (adr r1, 80078c8 <_scanf_float+0x98>)
 80078c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078c8:	08007a07 	.word	0x08007a07
 80078cc:	08007891 	.word	0x08007891
 80078d0:	08007891 	.word	0x08007891
 80078d4:	08007891 	.word	0x08007891
 80078d8:	08007a67 	.word	0x08007a67
 80078dc:	08007a3f 	.word	0x08007a3f
 80078e0:	08007891 	.word	0x08007891
 80078e4:	08007891 	.word	0x08007891
 80078e8:	08007a15 	.word	0x08007a15
 80078ec:	08007891 	.word	0x08007891
 80078f0:	08007891 	.word	0x08007891
 80078f4:	08007891 	.word	0x08007891
 80078f8:	08007891 	.word	0x08007891
 80078fc:	080079cd 	.word	0x080079cd
 8007900:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007904:	e7db      	b.n	80078be <_scanf_float+0x8e>
 8007906:	290e      	cmp	r1, #14
 8007908:	d8c2      	bhi.n	8007890 <_scanf_float+0x60>
 800790a:	a001      	add	r0, pc, #4	; (adr r0, 8007910 <_scanf_float+0xe0>)
 800790c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007910:	080079bf 	.word	0x080079bf
 8007914:	08007891 	.word	0x08007891
 8007918:	080079bf 	.word	0x080079bf
 800791c:	08007a53 	.word	0x08007a53
 8007920:	08007891 	.word	0x08007891
 8007924:	0800796d 	.word	0x0800796d
 8007928:	080079a9 	.word	0x080079a9
 800792c:	080079a9 	.word	0x080079a9
 8007930:	080079a9 	.word	0x080079a9
 8007934:	080079a9 	.word	0x080079a9
 8007938:	080079a9 	.word	0x080079a9
 800793c:	080079a9 	.word	0x080079a9
 8007940:	080079a9 	.word	0x080079a9
 8007944:	080079a9 	.word	0x080079a9
 8007948:	080079a9 	.word	0x080079a9
 800794c:	2b6e      	cmp	r3, #110	; 0x6e
 800794e:	d809      	bhi.n	8007964 <_scanf_float+0x134>
 8007950:	2b60      	cmp	r3, #96	; 0x60
 8007952:	d8b2      	bhi.n	80078ba <_scanf_float+0x8a>
 8007954:	2b54      	cmp	r3, #84	; 0x54
 8007956:	d077      	beq.n	8007a48 <_scanf_float+0x218>
 8007958:	2b59      	cmp	r3, #89	; 0x59
 800795a:	d199      	bne.n	8007890 <_scanf_float+0x60>
 800795c:	2d07      	cmp	r5, #7
 800795e:	d197      	bne.n	8007890 <_scanf_float+0x60>
 8007960:	2508      	movs	r5, #8
 8007962:	e029      	b.n	80079b8 <_scanf_float+0x188>
 8007964:	2b74      	cmp	r3, #116	; 0x74
 8007966:	d06f      	beq.n	8007a48 <_scanf_float+0x218>
 8007968:	2b79      	cmp	r3, #121	; 0x79
 800796a:	e7f6      	b.n	800795a <_scanf_float+0x12a>
 800796c:	6821      	ldr	r1, [r4, #0]
 800796e:	05c8      	lsls	r0, r1, #23
 8007970:	d51a      	bpl.n	80079a8 <_scanf_float+0x178>
 8007972:	9b02      	ldr	r3, [sp, #8]
 8007974:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007978:	6021      	str	r1, [r4, #0]
 800797a:	f109 0901 	add.w	r9, r9, #1
 800797e:	b11b      	cbz	r3, 8007988 <_scanf_float+0x158>
 8007980:	3b01      	subs	r3, #1
 8007982:	3201      	adds	r2, #1
 8007984:	9302      	str	r3, [sp, #8]
 8007986:	60a2      	str	r2, [r4, #8]
 8007988:	68a3      	ldr	r3, [r4, #8]
 800798a:	3b01      	subs	r3, #1
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	3301      	adds	r3, #1
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3b01      	subs	r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	f340 8084 	ble.w	8007aa8 <_scanf_float+0x278>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	3301      	adds	r3, #1
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	e766      	b.n	8007876 <_scanf_float+0x46>
 80079a8:	eb1a 0f05 	cmn.w	sl, r5
 80079ac:	f47f af70 	bne.w	8007890 <_scanf_float+0x60>
 80079b0:	6822      	ldr	r2, [r4, #0]
 80079b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80079b6:	6022      	str	r2, [r4, #0]
 80079b8:	f806 3b01 	strb.w	r3, [r6], #1
 80079bc:	e7e4      	b.n	8007988 <_scanf_float+0x158>
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	0610      	lsls	r0, r2, #24
 80079c2:	f57f af65 	bpl.w	8007890 <_scanf_float+0x60>
 80079c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ca:	e7f4      	b.n	80079b6 <_scanf_float+0x186>
 80079cc:	f1ba 0f00 	cmp.w	sl, #0
 80079d0:	d10e      	bne.n	80079f0 <_scanf_float+0x1c0>
 80079d2:	f1b9 0f00 	cmp.w	r9, #0
 80079d6:	d10e      	bne.n	80079f6 <_scanf_float+0x1c6>
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079e2:	d108      	bne.n	80079f6 <_scanf_float+0x1c6>
 80079e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079e8:	6022      	str	r2, [r4, #0]
 80079ea:	f04f 0a01 	mov.w	sl, #1
 80079ee:	e7e3      	b.n	80079b8 <_scanf_float+0x188>
 80079f0:	f1ba 0f02 	cmp.w	sl, #2
 80079f4:	d055      	beq.n	8007aa2 <_scanf_float+0x272>
 80079f6:	2d01      	cmp	r5, #1
 80079f8:	d002      	beq.n	8007a00 <_scanf_float+0x1d0>
 80079fa:	2d04      	cmp	r5, #4
 80079fc:	f47f af48 	bne.w	8007890 <_scanf_float+0x60>
 8007a00:	3501      	adds	r5, #1
 8007a02:	b2ed      	uxtb	r5, r5
 8007a04:	e7d8      	b.n	80079b8 <_scanf_float+0x188>
 8007a06:	f1ba 0f01 	cmp.w	sl, #1
 8007a0a:	f47f af41 	bne.w	8007890 <_scanf_float+0x60>
 8007a0e:	f04f 0a02 	mov.w	sl, #2
 8007a12:	e7d1      	b.n	80079b8 <_scanf_float+0x188>
 8007a14:	b97d      	cbnz	r5, 8007a36 <_scanf_float+0x206>
 8007a16:	f1b9 0f00 	cmp.w	r9, #0
 8007a1a:	f47f af3c 	bne.w	8007896 <_scanf_float+0x66>
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a28:	f47f af39 	bne.w	800789e <_scanf_float+0x6e>
 8007a2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a30:	6022      	str	r2, [r4, #0]
 8007a32:	2501      	movs	r5, #1
 8007a34:	e7c0      	b.n	80079b8 <_scanf_float+0x188>
 8007a36:	2d03      	cmp	r5, #3
 8007a38:	d0e2      	beq.n	8007a00 <_scanf_float+0x1d0>
 8007a3a:	2d05      	cmp	r5, #5
 8007a3c:	e7de      	b.n	80079fc <_scanf_float+0x1cc>
 8007a3e:	2d02      	cmp	r5, #2
 8007a40:	f47f af26 	bne.w	8007890 <_scanf_float+0x60>
 8007a44:	2503      	movs	r5, #3
 8007a46:	e7b7      	b.n	80079b8 <_scanf_float+0x188>
 8007a48:	2d06      	cmp	r5, #6
 8007a4a:	f47f af21 	bne.w	8007890 <_scanf_float+0x60>
 8007a4e:	2507      	movs	r5, #7
 8007a50:	e7b2      	b.n	80079b8 <_scanf_float+0x188>
 8007a52:	6822      	ldr	r2, [r4, #0]
 8007a54:	0591      	lsls	r1, r2, #22
 8007a56:	f57f af1b 	bpl.w	8007890 <_scanf_float+0x60>
 8007a5a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a5e:	6022      	str	r2, [r4, #0]
 8007a60:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a64:	e7a8      	b.n	80079b8 <_scanf_float+0x188>
 8007a66:	6822      	ldr	r2, [r4, #0]
 8007a68:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a6c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a70:	d006      	beq.n	8007a80 <_scanf_float+0x250>
 8007a72:	0550      	lsls	r0, r2, #21
 8007a74:	f57f af0c 	bpl.w	8007890 <_scanf_float+0x60>
 8007a78:	f1b9 0f00 	cmp.w	r9, #0
 8007a7c:	f43f af0f 	beq.w	800789e <_scanf_float+0x6e>
 8007a80:	0591      	lsls	r1, r2, #22
 8007a82:	bf58      	it	pl
 8007a84:	9901      	ldrpl	r1, [sp, #4]
 8007a86:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a8a:	bf58      	it	pl
 8007a8c:	eba9 0101 	subpl.w	r1, r9, r1
 8007a90:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a94:	bf58      	it	pl
 8007a96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a9a:	6022      	str	r2, [r4, #0]
 8007a9c:	f04f 0900 	mov.w	r9, #0
 8007aa0:	e78a      	b.n	80079b8 <_scanf_float+0x188>
 8007aa2:	f04f 0a03 	mov.w	sl, #3
 8007aa6:	e787      	b.n	80079b8 <_scanf_float+0x188>
 8007aa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007aac:	4639      	mov	r1, r7
 8007aae:	4640      	mov	r0, r8
 8007ab0:	4798      	blx	r3
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f43f aedf 	beq.w	8007876 <_scanf_float+0x46>
 8007ab8:	e6ea      	b.n	8007890 <_scanf_float+0x60>
 8007aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007abe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ac2:	463a      	mov	r2, r7
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	4798      	blx	r3
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	e6ec      	b.n	80078aa <_scanf_float+0x7a>
 8007ad0:	1e6b      	subs	r3, r5, #1
 8007ad2:	2b06      	cmp	r3, #6
 8007ad4:	d825      	bhi.n	8007b22 <_scanf_float+0x2f2>
 8007ad6:	2d02      	cmp	r5, #2
 8007ad8:	d836      	bhi.n	8007b48 <_scanf_float+0x318>
 8007ada:	455e      	cmp	r6, fp
 8007adc:	f67f aee8 	bls.w	80078b0 <_scanf_float+0x80>
 8007ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ae4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ae8:	463a      	mov	r2, r7
 8007aea:	4640      	mov	r0, r8
 8007aec:	4798      	blx	r3
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	e7f1      	b.n	8007ada <_scanf_float+0x2aa>
 8007af6:	9802      	ldr	r0, [sp, #8]
 8007af8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007afc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b00:	9002      	str	r0, [sp, #8]
 8007b02:	463a      	mov	r2, r7
 8007b04:	4640      	mov	r0, r8
 8007b06:	4798      	blx	r3
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b12:	fa5f fa8a 	uxtb.w	sl, sl
 8007b16:	f1ba 0f02 	cmp.w	sl, #2
 8007b1a:	d1ec      	bne.n	8007af6 <_scanf_float+0x2c6>
 8007b1c:	3d03      	subs	r5, #3
 8007b1e:	b2ed      	uxtb	r5, r5
 8007b20:	1b76      	subs	r6, r6, r5
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	05da      	lsls	r2, r3, #23
 8007b26:	d52f      	bpl.n	8007b88 <_scanf_float+0x358>
 8007b28:	055b      	lsls	r3, r3, #21
 8007b2a:	d510      	bpl.n	8007b4e <_scanf_float+0x31e>
 8007b2c:	455e      	cmp	r6, fp
 8007b2e:	f67f aebf 	bls.w	80078b0 <_scanf_float+0x80>
 8007b32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b3a:	463a      	mov	r2, r7
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4798      	blx	r3
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	e7f1      	b.n	8007b2c <_scanf_float+0x2fc>
 8007b48:	46aa      	mov	sl, r5
 8007b4a:	9602      	str	r6, [sp, #8]
 8007b4c:	e7df      	b.n	8007b0e <_scanf_float+0x2de>
 8007b4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	2965      	cmp	r1, #101	; 0x65
 8007b56:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b5e:	6123      	str	r3, [r4, #16]
 8007b60:	d00c      	beq.n	8007b7c <_scanf_float+0x34c>
 8007b62:	2945      	cmp	r1, #69	; 0x45
 8007b64:	d00a      	beq.n	8007b7c <_scanf_float+0x34c>
 8007b66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b6a:	463a      	mov	r2, r7
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4798      	blx	r3
 8007b70:	6923      	ldr	r3, [r4, #16]
 8007b72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	1eb5      	subs	r5, r6, #2
 8007b7a:	6123      	str	r3, [r4, #16]
 8007b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b80:	463a      	mov	r2, r7
 8007b82:	4640      	mov	r0, r8
 8007b84:	4798      	blx	r3
 8007b86:	462e      	mov	r6, r5
 8007b88:	6825      	ldr	r5, [r4, #0]
 8007b8a:	f015 0510 	ands.w	r5, r5, #16
 8007b8e:	d158      	bne.n	8007c42 <_scanf_float+0x412>
 8007b90:	7035      	strb	r5, [r6, #0]
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9c:	d11c      	bne.n	8007bd8 <_scanf_float+0x3a8>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	454b      	cmp	r3, r9
 8007ba2:	eba3 0209 	sub.w	r2, r3, r9
 8007ba6:	d124      	bne.n	8007bf2 <_scanf_float+0x3c2>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4659      	mov	r1, fp
 8007bac:	4640      	mov	r0, r8
 8007bae:	f000 fe9d 	bl	80088ec <_strtod_r>
 8007bb2:	9b03      	ldr	r3, [sp, #12]
 8007bb4:	6821      	ldr	r1, [r4, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f011 0f02 	tst.w	r1, #2
 8007bbc:	ec57 6b10 	vmov	r6, r7, d0
 8007bc0:	f103 0204 	add.w	r2, r3, #4
 8007bc4:	d020      	beq.n	8007c08 <_scanf_float+0x3d8>
 8007bc6:	9903      	ldr	r1, [sp, #12]
 8007bc8:	600a      	str	r2, [r1, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	e9c3 6700 	strd	r6, r7, [r3]
 8007bd0:	68e3      	ldr	r3, [r4, #12]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	60e3      	str	r3, [r4, #12]
 8007bd6:	e66c      	b.n	80078b2 <_scanf_float+0x82>
 8007bd8:	9b04      	ldr	r3, [sp, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0e4      	beq.n	8007ba8 <_scanf_float+0x378>
 8007bde:	9905      	ldr	r1, [sp, #20]
 8007be0:	230a      	movs	r3, #10
 8007be2:	462a      	mov	r2, r5
 8007be4:	3101      	adds	r1, #1
 8007be6:	4640      	mov	r0, r8
 8007be8:	f000 ff0a 	bl	8008a00 <_strtol_r>
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	9e05      	ldr	r6, [sp, #20]
 8007bf0:	1ac2      	subs	r2, r0, r3
 8007bf2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007bf6:	429e      	cmp	r6, r3
 8007bf8:	bf28      	it	cs
 8007bfa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007bfe:	4912      	ldr	r1, [pc, #72]	; (8007c48 <_scanf_float+0x418>)
 8007c00:	4630      	mov	r0, r6
 8007c02:	f000 f82b 	bl	8007c5c <siprintf>
 8007c06:	e7cf      	b.n	8007ba8 <_scanf_float+0x378>
 8007c08:	f011 0f04 	tst.w	r1, #4
 8007c0c:	9903      	ldr	r1, [sp, #12]
 8007c0e:	600a      	str	r2, [r1, #0]
 8007c10:	d1db      	bne.n	8007bca <_scanf_float+0x39a>
 8007c12:	f8d3 8000 	ldr.w	r8, [r3]
 8007c16:	ee10 2a10 	vmov	r2, s0
 8007c1a:	ee10 0a10 	vmov	r0, s0
 8007c1e:	463b      	mov	r3, r7
 8007c20:	4639      	mov	r1, r7
 8007c22:	f7f8 ff83 	bl	8000b2c <__aeabi_dcmpun>
 8007c26:	b128      	cbz	r0, 8007c34 <_scanf_float+0x404>
 8007c28:	4808      	ldr	r0, [pc, #32]	; (8007c4c <_scanf_float+0x41c>)
 8007c2a:	f000 f811 	bl	8007c50 <nanf>
 8007c2e:	ed88 0a00 	vstr	s0, [r8]
 8007c32:	e7cd      	b.n	8007bd0 <_scanf_float+0x3a0>
 8007c34:	4630      	mov	r0, r6
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 ffd6 	bl	8000be8 <__aeabi_d2f>
 8007c3c:	f8c8 0000 	str.w	r0, [r8]
 8007c40:	e7c6      	b.n	8007bd0 <_scanf_float+0x3a0>
 8007c42:	2500      	movs	r5, #0
 8007c44:	e635      	b.n	80078b2 <_scanf_float+0x82>
 8007c46:	bf00      	nop
 8007c48:	0800c5a8 	.word	0x0800c5a8
 8007c4c:	0800c9c0 	.word	0x0800c9c0

08007c50 <nanf>:
 8007c50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c58 <nanf+0x8>
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	7fc00000 	.word	0x7fc00000

08007c5c <siprintf>:
 8007c5c:	b40e      	push	{r1, r2, r3}
 8007c5e:	b500      	push	{lr}
 8007c60:	b09c      	sub	sp, #112	; 0x70
 8007c62:	ab1d      	add	r3, sp, #116	; 0x74
 8007c64:	9002      	str	r0, [sp, #8]
 8007c66:	9006      	str	r0, [sp, #24]
 8007c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c6c:	4809      	ldr	r0, [pc, #36]	; (8007c94 <siprintf+0x38>)
 8007c6e:	9107      	str	r1, [sp, #28]
 8007c70:	9104      	str	r1, [sp, #16]
 8007c72:	4909      	ldr	r1, [pc, #36]	; (8007c98 <siprintf+0x3c>)
 8007c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	a902      	add	r1, sp, #8
 8007c80:	f002 fe98 	bl	800a9b4 <_svfiprintf_r>
 8007c84:	9b02      	ldr	r3, [sp, #8]
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	b01c      	add	sp, #112	; 0x70
 8007c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c90:	b003      	add	sp, #12
 8007c92:	4770      	bx	lr
 8007c94:	20000018 	.word	0x20000018
 8007c98:	ffff0208 	.word	0xffff0208

08007c9c <sulp>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	ec45 4b10 	vmov	d0, r4, r5
 8007ca6:	4616      	mov	r6, r2
 8007ca8:	f002 fc20 	bl	800a4ec <__ulp>
 8007cac:	ec51 0b10 	vmov	r0, r1, d0
 8007cb0:	b17e      	cbz	r6, 8007cd2 <sulp+0x36>
 8007cb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007cb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dd09      	ble.n	8007cd2 <sulp+0x36>
 8007cbe:	051b      	lsls	r3, r3, #20
 8007cc0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007cc4:	2400      	movs	r4, #0
 8007cc6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007cca:	4622      	mov	r2, r4
 8007ccc:	462b      	mov	r3, r5
 8007cce:	f7f8 fc93 	bl	80005f8 <__aeabi_dmul>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	0000      	movs	r0, r0
	...

08007cd8 <_strtod_l>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	b0a3      	sub	sp, #140	; 0x8c
 8007cde:	461f      	mov	r7, r3
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	931e      	str	r3, [sp, #120]	; 0x78
 8007ce4:	4ba4      	ldr	r3, [pc, #656]	; (8007f78 <_strtod_l+0x2a0>)
 8007ce6:	9219      	str	r2, [sp, #100]	; 0x64
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	9307      	str	r3, [sp, #28]
 8007cec:	4604      	mov	r4, r0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	4688      	mov	r8, r1
 8007cf2:	f7f8 fa6d 	bl	80001d0 <strlen>
 8007cf6:	f04f 0a00 	mov.w	sl, #0
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	f04f 0b00 	mov.w	fp, #0
 8007d00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d06:	781a      	ldrb	r2, [r3, #0]
 8007d08:	2a2b      	cmp	r2, #43	; 0x2b
 8007d0a:	d04c      	beq.n	8007da6 <_strtod_l+0xce>
 8007d0c:	d839      	bhi.n	8007d82 <_strtod_l+0xaa>
 8007d0e:	2a0d      	cmp	r2, #13
 8007d10:	d832      	bhi.n	8007d78 <_strtod_l+0xa0>
 8007d12:	2a08      	cmp	r2, #8
 8007d14:	d832      	bhi.n	8007d7c <_strtod_l+0xa4>
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	d03c      	beq.n	8007d94 <_strtod_l+0xbc>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007d20:	7833      	ldrb	r3, [r6, #0]
 8007d22:	2b30      	cmp	r3, #48	; 0x30
 8007d24:	f040 80b4 	bne.w	8007e90 <_strtod_l+0x1b8>
 8007d28:	7873      	ldrb	r3, [r6, #1]
 8007d2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d2e:	2b58      	cmp	r3, #88	; 0x58
 8007d30:	d16c      	bne.n	8007e0c <_strtod_l+0x134>
 8007d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	ab1e      	add	r3, sp, #120	; 0x78
 8007d38:	9702      	str	r7, [sp, #8]
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	4a8f      	ldr	r2, [pc, #572]	; (8007f7c <_strtod_l+0x2a4>)
 8007d3e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007d40:	a91d      	add	r1, sp, #116	; 0x74
 8007d42:	4620      	mov	r0, r4
 8007d44:	f001 fd40 	bl	80097c8 <__gethex>
 8007d48:	f010 0707 	ands.w	r7, r0, #7
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	d005      	beq.n	8007d5c <_strtod_l+0x84>
 8007d50:	2f06      	cmp	r7, #6
 8007d52:	d12a      	bne.n	8007daa <_strtod_l+0xd2>
 8007d54:	3601      	adds	r6, #1
 8007d56:	2300      	movs	r3, #0
 8007d58:	961d      	str	r6, [sp, #116]	; 0x74
 8007d5a:	930e      	str	r3, [sp, #56]	; 0x38
 8007d5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f040 8596 	bne.w	8008890 <_strtod_l+0xbb8>
 8007d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d66:	b1db      	cbz	r3, 8007da0 <_strtod_l+0xc8>
 8007d68:	4652      	mov	r2, sl
 8007d6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d6e:	ec43 2b10 	vmov	d0, r2, r3
 8007d72:	b023      	add	sp, #140	; 0x8c
 8007d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d78:	2a20      	cmp	r2, #32
 8007d7a:	d1ce      	bne.n	8007d1a <_strtod_l+0x42>
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	931d      	str	r3, [sp, #116]	; 0x74
 8007d80:	e7c0      	b.n	8007d04 <_strtod_l+0x2c>
 8007d82:	2a2d      	cmp	r2, #45	; 0x2d
 8007d84:	d1c9      	bne.n	8007d1a <_strtod_l+0x42>
 8007d86:	2201      	movs	r2, #1
 8007d88:	920e      	str	r2, [sp, #56]	; 0x38
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	921d      	str	r2, [sp, #116]	; 0x74
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1c4      	bne.n	8007d1e <_strtod_l+0x46>
 8007d94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d96:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 8576 	bne.w	800888c <_strtod_l+0xbb4>
 8007da0:	4652      	mov	r2, sl
 8007da2:	465b      	mov	r3, fp
 8007da4:	e7e3      	b.n	8007d6e <_strtod_l+0x96>
 8007da6:	2200      	movs	r2, #0
 8007da8:	e7ee      	b.n	8007d88 <_strtod_l+0xb0>
 8007daa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007dac:	b13a      	cbz	r2, 8007dbe <_strtod_l+0xe6>
 8007dae:	2135      	movs	r1, #53	; 0x35
 8007db0:	a820      	add	r0, sp, #128	; 0x80
 8007db2:	f002 fca6 	bl	800a702 <__copybits>
 8007db6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007db8:	4620      	mov	r0, r4
 8007dba:	f002 f86b 	bl	8009e94 <_Bfree>
 8007dbe:	3f01      	subs	r7, #1
 8007dc0:	2f05      	cmp	r7, #5
 8007dc2:	d807      	bhi.n	8007dd4 <_strtod_l+0xfc>
 8007dc4:	e8df f007 	tbb	[pc, r7]
 8007dc8:	1d180b0e 	.word	0x1d180b0e
 8007dcc:	030e      	.short	0x030e
 8007dce:	f04f 0b00 	mov.w	fp, #0
 8007dd2:	46da      	mov	sl, fp
 8007dd4:	0728      	lsls	r0, r5, #28
 8007dd6:	d5c1      	bpl.n	8007d5c <_strtod_l+0x84>
 8007dd8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007ddc:	e7be      	b.n	8007d5c <_strtod_l+0x84>
 8007dde:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007de2:	e7f7      	b.n	8007dd4 <_strtod_l+0xfc>
 8007de4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007de8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007dea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007df2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007df6:	e7ed      	b.n	8007dd4 <_strtod_l+0xfc>
 8007df8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007f80 <_strtod_l+0x2a8>
 8007dfc:	f04f 0a00 	mov.w	sl, #0
 8007e00:	e7e8      	b.n	8007dd4 <_strtod_l+0xfc>
 8007e02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007e06:	f04f 3aff 	mov.w	sl, #4294967295
 8007e0a:	e7e3      	b.n	8007dd4 <_strtod_l+0xfc>
 8007e0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	921d      	str	r2, [sp, #116]	; 0x74
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d0f9      	beq.n	8007e0c <_strtod_l+0x134>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d09f      	beq.n	8007d5c <_strtod_l+0x84>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e26:	930a      	str	r3, [sp, #40]	; 0x28
 8007e28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e2c:	464f      	mov	r7, r9
 8007e2e:	220a      	movs	r2, #10
 8007e30:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007e32:	7806      	ldrb	r6, [r0, #0]
 8007e34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e38:	b2d9      	uxtb	r1, r3
 8007e3a:	2909      	cmp	r1, #9
 8007e3c:	d92a      	bls.n	8007e94 <_strtod_l+0x1bc>
 8007e3e:	9907      	ldr	r1, [sp, #28]
 8007e40:	462a      	mov	r2, r5
 8007e42:	f002 fed1 	bl	800abe8 <strncmp>
 8007e46:	b398      	cbz	r0, 8007eb0 <_strtod_l+0x1d8>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	4633      	mov	r3, r6
 8007e4c:	463d      	mov	r5, r7
 8007e4e:	9007      	str	r0, [sp, #28]
 8007e50:	4602      	mov	r2, r0
 8007e52:	2b65      	cmp	r3, #101	; 0x65
 8007e54:	d001      	beq.n	8007e5a <_strtod_l+0x182>
 8007e56:	2b45      	cmp	r3, #69	; 0x45
 8007e58:	d118      	bne.n	8007e8c <_strtod_l+0x1b4>
 8007e5a:	b91d      	cbnz	r5, 8007e64 <_strtod_l+0x18c>
 8007e5c:	9b04      	ldr	r3, [sp, #16]
 8007e5e:	4303      	orrs	r3, r0
 8007e60:	d098      	beq.n	8007d94 <_strtod_l+0xbc>
 8007e62:	2500      	movs	r5, #0
 8007e64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007e68:	f108 0301 	add.w	r3, r8, #1
 8007e6c:	931d      	str	r3, [sp, #116]	; 0x74
 8007e6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e72:	2b2b      	cmp	r3, #43	; 0x2b
 8007e74:	d075      	beq.n	8007f62 <_strtod_l+0x28a>
 8007e76:	2b2d      	cmp	r3, #45	; 0x2d
 8007e78:	d07b      	beq.n	8007f72 <_strtod_l+0x29a>
 8007e7a:	f04f 0c00 	mov.w	ip, #0
 8007e7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007e82:	2909      	cmp	r1, #9
 8007e84:	f240 8082 	bls.w	8007f8c <_strtod_l+0x2b4>
 8007e88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	e09d      	b.n	8007fcc <_strtod_l+0x2f4>
 8007e90:	2300      	movs	r3, #0
 8007e92:	e7c4      	b.n	8007e1e <_strtod_l+0x146>
 8007e94:	2f08      	cmp	r7, #8
 8007e96:	bfd8      	it	le
 8007e98:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007e9a:	f100 0001 	add.w	r0, r0, #1
 8007e9e:	bfda      	itte	le
 8007ea0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ea4:	9309      	strle	r3, [sp, #36]	; 0x24
 8007ea6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007eaa:	3701      	adds	r7, #1
 8007eac:	901d      	str	r0, [sp, #116]	; 0x74
 8007eae:	e7bf      	b.n	8007e30 <_strtod_l+0x158>
 8007eb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007eb2:	195a      	adds	r2, r3, r5
 8007eb4:	921d      	str	r2, [sp, #116]	; 0x74
 8007eb6:	5d5b      	ldrb	r3, [r3, r5]
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	d037      	beq.n	8007f2c <_strtod_l+0x254>
 8007ebc:	9007      	str	r0, [sp, #28]
 8007ebe:	463d      	mov	r5, r7
 8007ec0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007ec4:	2a09      	cmp	r2, #9
 8007ec6:	d912      	bls.n	8007eee <_strtod_l+0x216>
 8007ec8:	2201      	movs	r2, #1
 8007eca:	e7c2      	b.n	8007e52 <_strtod_l+0x17a>
 8007ecc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	921d      	str	r2, [sp, #116]	; 0x74
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	2b30      	cmp	r3, #48	; 0x30
 8007ed8:	d0f8      	beq.n	8007ecc <_strtod_l+0x1f4>
 8007eda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007ede:	2a08      	cmp	r2, #8
 8007ee0:	f200 84db 	bhi.w	800889a <_strtod_l+0xbc2>
 8007ee4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007ee6:	9007      	str	r0, [sp, #28]
 8007ee8:	2000      	movs	r0, #0
 8007eea:	920a      	str	r2, [sp, #40]	; 0x28
 8007eec:	4605      	mov	r5, r0
 8007eee:	3b30      	subs	r3, #48	; 0x30
 8007ef0:	f100 0201 	add.w	r2, r0, #1
 8007ef4:	d014      	beq.n	8007f20 <_strtod_l+0x248>
 8007ef6:	9907      	ldr	r1, [sp, #28]
 8007ef8:	4411      	add	r1, r2
 8007efa:	9107      	str	r1, [sp, #28]
 8007efc:	462a      	mov	r2, r5
 8007efe:	eb00 0e05 	add.w	lr, r0, r5
 8007f02:	210a      	movs	r1, #10
 8007f04:	4572      	cmp	r2, lr
 8007f06:	d113      	bne.n	8007f30 <_strtod_l+0x258>
 8007f08:	182a      	adds	r2, r5, r0
 8007f0a:	2a08      	cmp	r2, #8
 8007f0c:	f105 0501 	add.w	r5, r5, #1
 8007f10:	4405      	add	r5, r0
 8007f12:	dc1c      	bgt.n	8007f4e <_strtod_l+0x276>
 8007f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f16:	220a      	movs	r2, #10
 8007f18:	fb02 3301 	mla	r3, r2, r1, r3
 8007f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1e:	2200      	movs	r2, #0
 8007f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f22:	1c59      	adds	r1, r3, #1
 8007f24:	911d      	str	r1, [sp, #116]	; 0x74
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	e7c9      	b.n	8007ec0 <_strtod_l+0x1e8>
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	e7d2      	b.n	8007ed6 <_strtod_l+0x1fe>
 8007f30:	2a08      	cmp	r2, #8
 8007f32:	dc04      	bgt.n	8007f3e <_strtod_l+0x266>
 8007f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f36:	434e      	muls	r6, r1
 8007f38:	9609      	str	r6, [sp, #36]	; 0x24
 8007f3a:	3201      	adds	r2, #1
 8007f3c:	e7e2      	b.n	8007f04 <_strtod_l+0x22c>
 8007f3e:	f102 0c01 	add.w	ip, r2, #1
 8007f42:	f1bc 0f10 	cmp.w	ip, #16
 8007f46:	bfd8      	it	le
 8007f48:	fb01 f909 	mulle.w	r9, r1, r9
 8007f4c:	e7f5      	b.n	8007f3a <_strtod_l+0x262>
 8007f4e:	2d10      	cmp	r5, #16
 8007f50:	bfdc      	itt	le
 8007f52:	220a      	movle	r2, #10
 8007f54:	fb02 3909 	mlale	r9, r2, r9, r3
 8007f58:	e7e1      	b.n	8007f1e <_strtod_l+0x246>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	e77c      	b.n	8007e5c <_strtod_l+0x184>
 8007f62:	f04f 0c00 	mov.w	ip, #0
 8007f66:	f108 0302 	add.w	r3, r8, #2
 8007f6a:	931d      	str	r3, [sp, #116]	; 0x74
 8007f6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007f70:	e785      	b.n	8007e7e <_strtod_l+0x1a6>
 8007f72:	f04f 0c01 	mov.w	ip, #1
 8007f76:	e7f6      	b.n	8007f66 <_strtod_l+0x28e>
 8007f78:	0800c800 	.word	0x0800c800
 8007f7c:	0800c5b0 	.word	0x0800c5b0
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f86:	1c59      	adds	r1, r3, #1
 8007f88:	911d      	str	r1, [sp, #116]	; 0x74
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b30      	cmp	r3, #48	; 0x30
 8007f8e:	d0f9      	beq.n	8007f84 <_strtod_l+0x2ac>
 8007f90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007f94:	2908      	cmp	r1, #8
 8007f96:	f63f af79 	bhi.w	8007e8c <_strtod_l+0x1b4>
 8007f9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007f9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fa0:	9308      	str	r3, [sp, #32]
 8007fa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fa4:	1c59      	adds	r1, r3, #1
 8007fa6:	911d      	str	r1, [sp, #116]	; 0x74
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007fae:	2e09      	cmp	r6, #9
 8007fb0:	d937      	bls.n	8008022 <_strtod_l+0x34a>
 8007fb2:	9e08      	ldr	r6, [sp, #32]
 8007fb4:	1b89      	subs	r1, r1, r6
 8007fb6:	2908      	cmp	r1, #8
 8007fb8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007fbc:	dc02      	bgt.n	8007fc4 <_strtod_l+0x2ec>
 8007fbe:	4576      	cmp	r6, lr
 8007fc0:	bfa8      	it	ge
 8007fc2:	4676      	movge	r6, lr
 8007fc4:	f1bc 0f00 	cmp.w	ip, #0
 8007fc8:	d000      	beq.n	8007fcc <_strtod_l+0x2f4>
 8007fca:	4276      	negs	r6, r6
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	d14f      	bne.n	8008070 <_strtod_l+0x398>
 8007fd0:	9904      	ldr	r1, [sp, #16]
 8007fd2:	4301      	orrs	r1, r0
 8007fd4:	f47f aec2 	bne.w	8007d5c <_strtod_l+0x84>
 8007fd8:	2a00      	cmp	r2, #0
 8007fda:	f47f aedb 	bne.w	8007d94 <_strtod_l+0xbc>
 8007fde:	2b69      	cmp	r3, #105	; 0x69
 8007fe0:	d027      	beq.n	8008032 <_strtod_l+0x35a>
 8007fe2:	dc24      	bgt.n	800802e <_strtod_l+0x356>
 8007fe4:	2b49      	cmp	r3, #73	; 0x49
 8007fe6:	d024      	beq.n	8008032 <_strtod_l+0x35a>
 8007fe8:	2b4e      	cmp	r3, #78	; 0x4e
 8007fea:	f47f aed3 	bne.w	8007d94 <_strtod_l+0xbc>
 8007fee:	499e      	ldr	r1, [pc, #632]	; (8008268 <_strtod_l+0x590>)
 8007ff0:	a81d      	add	r0, sp, #116	; 0x74
 8007ff2:	f001 fe41 	bl	8009c78 <__match>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f43f aecc 	beq.w	8007d94 <_strtod_l+0xbc>
 8007ffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b28      	cmp	r3, #40	; 0x28
 8008002:	d12d      	bne.n	8008060 <_strtod_l+0x388>
 8008004:	4999      	ldr	r1, [pc, #612]	; (800826c <_strtod_l+0x594>)
 8008006:	aa20      	add	r2, sp, #128	; 0x80
 8008008:	a81d      	add	r0, sp, #116	; 0x74
 800800a:	f001 fe49 	bl	8009ca0 <__hexnan>
 800800e:	2805      	cmp	r0, #5
 8008010:	d126      	bne.n	8008060 <_strtod_l+0x388>
 8008012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008014:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008018:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800801c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008020:	e69c      	b.n	8007d5c <_strtod_l+0x84>
 8008022:	210a      	movs	r1, #10
 8008024:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008028:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800802c:	e7b9      	b.n	8007fa2 <_strtod_l+0x2ca>
 800802e:	2b6e      	cmp	r3, #110	; 0x6e
 8008030:	e7db      	b.n	8007fea <_strtod_l+0x312>
 8008032:	498f      	ldr	r1, [pc, #572]	; (8008270 <_strtod_l+0x598>)
 8008034:	a81d      	add	r0, sp, #116	; 0x74
 8008036:	f001 fe1f 	bl	8009c78 <__match>
 800803a:	2800      	cmp	r0, #0
 800803c:	f43f aeaa 	beq.w	8007d94 <_strtod_l+0xbc>
 8008040:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008042:	498c      	ldr	r1, [pc, #560]	; (8008274 <_strtod_l+0x59c>)
 8008044:	3b01      	subs	r3, #1
 8008046:	a81d      	add	r0, sp, #116	; 0x74
 8008048:	931d      	str	r3, [sp, #116]	; 0x74
 800804a:	f001 fe15 	bl	8009c78 <__match>
 800804e:	b910      	cbnz	r0, 8008056 <_strtod_l+0x37e>
 8008050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008052:	3301      	adds	r3, #1
 8008054:	931d      	str	r3, [sp, #116]	; 0x74
 8008056:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008284 <_strtod_l+0x5ac>
 800805a:	f04f 0a00 	mov.w	sl, #0
 800805e:	e67d      	b.n	8007d5c <_strtod_l+0x84>
 8008060:	4885      	ldr	r0, [pc, #532]	; (8008278 <_strtod_l+0x5a0>)
 8008062:	f002 fda9 	bl	800abb8 <nan>
 8008066:	ed8d 0b04 	vstr	d0, [sp, #16]
 800806a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800806e:	e675      	b.n	8007d5c <_strtod_l+0x84>
 8008070:	9b07      	ldr	r3, [sp, #28]
 8008072:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008074:	1af3      	subs	r3, r6, r3
 8008076:	2f00      	cmp	r7, #0
 8008078:	bf08      	it	eq
 800807a:	462f      	moveq	r7, r5
 800807c:	2d10      	cmp	r5, #16
 800807e:	9308      	str	r3, [sp, #32]
 8008080:	46a8      	mov	r8, r5
 8008082:	bfa8      	it	ge
 8008084:	f04f 0810 	movge.w	r8, #16
 8008088:	f7f8 fa3c 	bl	8000504 <__aeabi_ui2d>
 800808c:	2d09      	cmp	r5, #9
 800808e:	4682      	mov	sl, r0
 8008090:	468b      	mov	fp, r1
 8008092:	dd13      	ble.n	80080bc <_strtod_l+0x3e4>
 8008094:	4b79      	ldr	r3, [pc, #484]	; (800827c <_strtod_l+0x5a4>)
 8008096:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800809a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800809e:	f7f8 faab 	bl	80005f8 <__aeabi_dmul>
 80080a2:	4682      	mov	sl, r0
 80080a4:	4648      	mov	r0, r9
 80080a6:	468b      	mov	fp, r1
 80080a8:	f7f8 fa2c 	bl	8000504 <__aeabi_ui2d>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4650      	mov	r0, sl
 80080b2:	4659      	mov	r1, fp
 80080b4:	f7f8 f8ea 	bl	800028c <__adddf3>
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	2d0f      	cmp	r5, #15
 80080be:	dc38      	bgt.n	8008132 <_strtod_l+0x45a>
 80080c0:	9b08      	ldr	r3, [sp, #32]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f43f ae4a 	beq.w	8007d5c <_strtod_l+0x84>
 80080c8:	dd24      	ble.n	8008114 <_strtod_l+0x43c>
 80080ca:	2b16      	cmp	r3, #22
 80080cc:	dc0b      	bgt.n	80080e6 <_strtod_l+0x40e>
 80080ce:	4d6b      	ldr	r5, [pc, #428]	; (800827c <_strtod_l+0x5a4>)
 80080d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80080d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80080d8:	4652      	mov	r2, sl
 80080da:	465b      	mov	r3, fp
 80080dc:	f7f8 fa8c 	bl	80005f8 <__aeabi_dmul>
 80080e0:	4682      	mov	sl, r0
 80080e2:	468b      	mov	fp, r1
 80080e4:	e63a      	b.n	8007d5c <_strtod_l+0x84>
 80080e6:	9a08      	ldr	r2, [sp, #32]
 80080e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80080ec:	4293      	cmp	r3, r2
 80080ee:	db20      	blt.n	8008132 <_strtod_l+0x45a>
 80080f0:	4c62      	ldr	r4, [pc, #392]	; (800827c <_strtod_l+0x5a4>)
 80080f2:	f1c5 050f 	rsb	r5, r5, #15
 80080f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080fa:	4652      	mov	r2, sl
 80080fc:	465b      	mov	r3, fp
 80080fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008102:	f7f8 fa79 	bl	80005f8 <__aeabi_dmul>
 8008106:	9b08      	ldr	r3, [sp, #32]
 8008108:	1b5d      	subs	r5, r3, r5
 800810a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800810e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008112:	e7e3      	b.n	80080dc <_strtod_l+0x404>
 8008114:	9b08      	ldr	r3, [sp, #32]
 8008116:	3316      	adds	r3, #22
 8008118:	db0b      	blt.n	8008132 <_strtod_l+0x45a>
 800811a:	9b07      	ldr	r3, [sp, #28]
 800811c:	4a57      	ldr	r2, [pc, #348]	; (800827c <_strtod_l+0x5a4>)
 800811e:	1b9e      	subs	r6, r3, r6
 8008120:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008124:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008128:	4650      	mov	r0, sl
 800812a:	4659      	mov	r1, fp
 800812c:	f7f8 fb8e 	bl	800084c <__aeabi_ddiv>
 8008130:	e7d6      	b.n	80080e0 <_strtod_l+0x408>
 8008132:	9b08      	ldr	r3, [sp, #32]
 8008134:	eba5 0808 	sub.w	r8, r5, r8
 8008138:	4498      	add	r8, r3
 800813a:	f1b8 0f00 	cmp.w	r8, #0
 800813e:	dd71      	ble.n	8008224 <_strtod_l+0x54c>
 8008140:	f018 030f 	ands.w	r3, r8, #15
 8008144:	d00a      	beq.n	800815c <_strtod_l+0x484>
 8008146:	494d      	ldr	r1, [pc, #308]	; (800827c <_strtod_l+0x5a4>)
 8008148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800814c:	4652      	mov	r2, sl
 800814e:	465b      	mov	r3, fp
 8008150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008154:	f7f8 fa50 	bl	80005f8 <__aeabi_dmul>
 8008158:	4682      	mov	sl, r0
 800815a:	468b      	mov	fp, r1
 800815c:	f038 080f 	bics.w	r8, r8, #15
 8008160:	d04d      	beq.n	80081fe <_strtod_l+0x526>
 8008162:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008166:	dd22      	ble.n	80081ae <_strtod_l+0x4d6>
 8008168:	2500      	movs	r5, #0
 800816a:	462e      	mov	r6, r5
 800816c:	9509      	str	r5, [sp, #36]	; 0x24
 800816e:	9507      	str	r5, [sp, #28]
 8008170:	2322      	movs	r3, #34	; 0x22
 8008172:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008284 <_strtod_l+0x5ac>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	f04f 0a00 	mov.w	sl, #0
 800817c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817e:	2b00      	cmp	r3, #0
 8008180:	f43f adec 	beq.w	8007d5c <_strtod_l+0x84>
 8008184:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008186:	4620      	mov	r0, r4
 8008188:	f001 fe84 	bl	8009e94 <_Bfree>
 800818c:	9907      	ldr	r1, [sp, #28]
 800818e:	4620      	mov	r0, r4
 8008190:	f001 fe80 	bl	8009e94 <_Bfree>
 8008194:	4631      	mov	r1, r6
 8008196:	4620      	mov	r0, r4
 8008198:	f001 fe7c 	bl	8009e94 <_Bfree>
 800819c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819e:	4620      	mov	r0, r4
 80081a0:	f001 fe78 	bl	8009e94 <_Bfree>
 80081a4:	4629      	mov	r1, r5
 80081a6:	4620      	mov	r0, r4
 80081a8:	f001 fe74 	bl	8009e94 <_Bfree>
 80081ac:	e5d6      	b.n	8007d5c <_strtod_l+0x84>
 80081ae:	2300      	movs	r3, #0
 80081b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80081b4:	4650      	mov	r0, sl
 80081b6:	4659      	mov	r1, fp
 80081b8:	4699      	mov	r9, r3
 80081ba:	f1b8 0f01 	cmp.w	r8, #1
 80081be:	dc21      	bgt.n	8008204 <_strtod_l+0x52c>
 80081c0:	b10b      	cbz	r3, 80081c6 <_strtod_l+0x4ee>
 80081c2:	4682      	mov	sl, r0
 80081c4:	468b      	mov	fp, r1
 80081c6:	4b2e      	ldr	r3, [pc, #184]	; (8008280 <_strtod_l+0x5a8>)
 80081c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80081cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80081d0:	4652      	mov	r2, sl
 80081d2:	465b      	mov	r3, fp
 80081d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80081d8:	f7f8 fa0e 	bl	80005f8 <__aeabi_dmul>
 80081dc:	4b29      	ldr	r3, [pc, #164]	; (8008284 <_strtod_l+0x5ac>)
 80081de:	460a      	mov	r2, r1
 80081e0:	400b      	ands	r3, r1
 80081e2:	4929      	ldr	r1, [pc, #164]	; (8008288 <_strtod_l+0x5b0>)
 80081e4:	428b      	cmp	r3, r1
 80081e6:	4682      	mov	sl, r0
 80081e8:	d8be      	bhi.n	8008168 <_strtod_l+0x490>
 80081ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081ee:	428b      	cmp	r3, r1
 80081f0:	bf86      	itte	hi
 80081f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800828c <_strtod_l+0x5b4>
 80081f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80081fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80081fe:	2300      	movs	r3, #0
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	e081      	b.n	8008308 <_strtod_l+0x630>
 8008204:	f018 0f01 	tst.w	r8, #1
 8008208:	d007      	beq.n	800821a <_strtod_l+0x542>
 800820a:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <_strtod_l+0x5a8>)
 800820c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f7f8 f9f0 	bl	80005f8 <__aeabi_dmul>
 8008218:	2301      	movs	r3, #1
 800821a:	f109 0901 	add.w	r9, r9, #1
 800821e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008222:	e7ca      	b.n	80081ba <_strtod_l+0x4e2>
 8008224:	d0eb      	beq.n	80081fe <_strtod_l+0x526>
 8008226:	f1c8 0800 	rsb	r8, r8, #0
 800822a:	f018 020f 	ands.w	r2, r8, #15
 800822e:	d00a      	beq.n	8008246 <_strtod_l+0x56e>
 8008230:	4b12      	ldr	r3, [pc, #72]	; (800827c <_strtod_l+0x5a4>)
 8008232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008236:	4650      	mov	r0, sl
 8008238:	4659      	mov	r1, fp
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 fb05 	bl	800084c <__aeabi_ddiv>
 8008242:	4682      	mov	sl, r0
 8008244:	468b      	mov	fp, r1
 8008246:	ea5f 1828 	movs.w	r8, r8, asr #4
 800824a:	d0d8      	beq.n	80081fe <_strtod_l+0x526>
 800824c:	f1b8 0f1f 	cmp.w	r8, #31
 8008250:	dd1e      	ble.n	8008290 <_strtod_l+0x5b8>
 8008252:	2500      	movs	r5, #0
 8008254:	462e      	mov	r6, r5
 8008256:	9509      	str	r5, [sp, #36]	; 0x24
 8008258:	9507      	str	r5, [sp, #28]
 800825a:	2322      	movs	r3, #34	; 0x22
 800825c:	f04f 0a00 	mov.w	sl, #0
 8008260:	f04f 0b00 	mov.w	fp, #0
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	e789      	b.n	800817c <_strtod_l+0x4a4>
 8008268:	0800c581 	.word	0x0800c581
 800826c:	0800c5c4 	.word	0x0800c5c4
 8008270:	0800c579 	.word	0x0800c579
 8008274:	0800c704 	.word	0x0800c704
 8008278:	0800c9c0 	.word	0x0800c9c0
 800827c:	0800c8a0 	.word	0x0800c8a0
 8008280:	0800c878 	.word	0x0800c878
 8008284:	7ff00000 	.word	0x7ff00000
 8008288:	7ca00000 	.word	0x7ca00000
 800828c:	7fefffff 	.word	0x7fefffff
 8008290:	f018 0310 	ands.w	r3, r8, #16
 8008294:	bf18      	it	ne
 8008296:	236a      	movne	r3, #106	; 0x6a
 8008298:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008650 <_strtod_l+0x978>
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	4650      	mov	r0, sl
 80082a0:	4659      	mov	r1, fp
 80082a2:	2300      	movs	r3, #0
 80082a4:	f018 0f01 	tst.w	r8, #1
 80082a8:	d004      	beq.n	80082b4 <_strtod_l+0x5dc>
 80082aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80082ae:	f7f8 f9a3 	bl	80005f8 <__aeabi_dmul>
 80082b2:	2301      	movs	r3, #1
 80082b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80082b8:	f109 0908 	add.w	r9, r9, #8
 80082bc:	d1f2      	bne.n	80082a4 <_strtod_l+0x5cc>
 80082be:	b10b      	cbz	r3, 80082c4 <_strtod_l+0x5ec>
 80082c0:	4682      	mov	sl, r0
 80082c2:	468b      	mov	fp, r1
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	b1bb      	cbz	r3, 80082f8 <_strtod_l+0x620>
 80082c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80082cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	4659      	mov	r1, fp
 80082d4:	dd10      	ble.n	80082f8 <_strtod_l+0x620>
 80082d6:	2b1f      	cmp	r3, #31
 80082d8:	f340 8128 	ble.w	800852c <_strtod_l+0x854>
 80082dc:	2b34      	cmp	r3, #52	; 0x34
 80082de:	bfde      	ittt	le
 80082e0:	3b20      	suble	r3, #32
 80082e2:	f04f 32ff 	movle.w	r2, #4294967295
 80082e6:	fa02 f303 	lslle.w	r3, r2, r3
 80082ea:	f04f 0a00 	mov.w	sl, #0
 80082ee:	bfcc      	ite	gt
 80082f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80082f4:	ea03 0b01 	andle.w	fp, r3, r1
 80082f8:	2200      	movs	r2, #0
 80082fa:	2300      	movs	r3, #0
 80082fc:	4650      	mov	r0, sl
 80082fe:	4659      	mov	r1, fp
 8008300:	f7f8 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008304:	2800      	cmp	r0, #0
 8008306:	d1a4      	bne.n	8008252 <_strtod_l+0x57a>
 8008308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800830e:	462b      	mov	r3, r5
 8008310:	463a      	mov	r2, r7
 8008312:	4620      	mov	r0, r4
 8008314:	f001 fe2a 	bl	8009f6c <__s2b>
 8008318:	9009      	str	r0, [sp, #36]	; 0x24
 800831a:	2800      	cmp	r0, #0
 800831c:	f43f af24 	beq.w	8008168 <_strtod_l+0x490>
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	1b9e      	subs	r6, r3, r6
 8008324:	9b08      	ldr	r3, [sp, #32]
 8008326:	2b00      	cmp	r3, #0
 8008328:	bfb4      	ite	lt
 800832a:	4633      	movlt	r3, r6
 800832c:	2300      	movge	r3, #0
 800832e:	9310      	str	r3, [sp, #64]	; 0x40
 8008330:	9b08      	ldr	r3, [sp, #32]
 8008332:	2500      	movs	r5, #0
 8008334:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008338:	9318      	str	r3, [sp, #96]	; 0x60
 800833a:	462e      	mov	r6, r5
 800833c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833e:	4620      	mov	r0, r4
 8008340:	6859      	ldr	r1, [r3, #4]
 8008342:	f001 fd67 	bl	8009e14 <_Balloc>
 8008346:	9007      	str	r0, [sp, #28]
 8008348:	2800      	cmp	r0, #0
 800834a:	f43f af11 	beq.w	8008170 <_strtod_l+0x498>
 800834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	3202      	adds	r2, #2
 8008354:	f103 010c 	add.w	r1, r3, #12
 8008358:	0092      	lsls	r2, r2, #2
 800835a:	300c      	adds	r0, #12
 800835c:	f7fe fde8 	bl	8006f30 <memcpy>
 8008360:	ec4b ab10 	vmov	d0, sl, fp
 8008364:	aa20      	add	r2, sp, #128	; 0x80
 8008366:	a91f      	add	r1, sp, #124	; 0x7c
 8008368:	4620      	mov	r0, r4
 800836a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800836e:	f002 f939 	bl	800a5e4 <__d2b>
 8008372:	901e      	str	r0, [sp, #120]	; 0x78
 8008374:	2800      	cmp	r0, #0
 8008376:	f43f aefb 	beq.w	8008170 <_strtod_l+0x498>
 800837a:	2101      	movs	r1, #1
 800837c:	4620      	mov	r0, r4
 800837e:	f001 fe8f 	bl	800a0a0 <__i2b>
 8008382:	4606      	mov	r6, r0
 8008384:	2800      	cmp	r0, #0
 8008386:	f43f aef3 	beq.w	8008170 <_strtod_l+0x498>
 800838a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800838c:	9904      	ldr	r1, [sp, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfab      	itete	ge
 8008392:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008394:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008396:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008398:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800839c:	bfac      	ite	ge
 800839e:	eb03 0902 	addge.w	r9, r3, r2
 80083a2:	1ad7      	sublt	r7, r2, r3
 80083a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083a6:	eba3 0801 	sub.w	r8, r3, r1
 80083aa:	4490      	add	r8, r2
 80083ac:	4ba3      	ldr	r3, [pc, #652]	; (800863c <_strtod_l+0x964>)
 80083ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80083b2:	4598      	cmp	r8, r3
 80083b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083b8:	f280 80cc 	bge.w	8008554 <_strtod_l+0x87c>
 80083bc:	eba3 0308 	sub.w	r3, r3, r8
 80083c0:	2b1f      	cmp	r3, #31
 80083c2:	eba2 0203 	sub.w	r2, r2, r3
 80083c6:	f04f 0101 	mov.w	r1, #1
 80083ca:	f300 80b6 	bgt.w	800853a <_strtod_l+0x862>
 80083ce:	fa01 f303 	lsl.w	r3, r1, r3
 80083d2:	9311      	str	r3, [sp, #68]	; 0x44
 80083d4:	2300      	movs	r3, #0
 80083d6:	930c      	str	r3, [sp, #48]	; 0x30
 80083d8:	eb09 0802 	add.w	r8, r9, r2
 80083dc:	9b04      	ldr	r3, [sp, #16]
 80083de:	45c1      	cmp	r9, r8
 80083e0:	4417      	add	r7, r2
 80083e2:	441f      	add	r7, r3
 80083e4:	464b      	mov	r3, r9
 80083e6:	bfa8      	it	ge
 80083e8:	4643      	movge	r3, r8
 80083ea:	42bb      	cmp	r3, r7
 80083ec:	bfa8      	it	ge
 80083ee:	463b      	movge	r3, r7
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bfc2      	ittt	gt
 80083f4:	eba8 0803 	subgt.w	r8, r8, r3
 80083f8:	1aff      	subgt	r7, r7, r3
 80083fa:	eba9 0903 	subgt.w	r9, r9, r3
 80083fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	dd17      	ble.n	8008434 <_strtod_l+0x75c>
 8008404:	4631      	mov	r1, r6
 8008406:	461a      	mov	r2, r3
 8008408:	4620      	mov	r0, r4
 800840a:	f001 ff05 	bl	800a218 <__pow5mult>
 800840e:	4606      	mov	r6, r0
 8008410:	2800      	cmp	r0, #0
 8008412:	f43f aead 	beq.w	8008170 <_strtod_l+0x498>
 8008416:	4601      	mov	r1, r0
 8008418:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800841a:	4620      	mov	r0, r4
 800841c:	f001 fe56 	bl	800a0cc <__multiply>
 8008420:	900f      	str	r0, [sp, #60]	; 0x3c
 8008422:	2800      	cmp	r0, #0
 8008424:	f43f aea4 	beq.w	8008170 <_strtod_l+0x498>
 8008428:	991e      	ldr	r1, [sp, #120]	; 0x78
 800842a:	4620      	mov	r0, r4
 800842c:	f001 fd32 	bl	8009e94 <_Bfree>
 8008430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008432:	931e      	str	r3, [sp, #120]	; 0x78
 8008434:	f1b8 0f00 	cmp.w	r8, #0
 8008438:	f300 8091 	bgt.w	800855e <_strtod_l+0x886>
 800843c:	9b08      	ldr	r3, [sp, #32]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dd08      	ble.n	8008454 <_strtod_l+0x77c>
 8008442:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008444:	9907      	ldr	r1, [sp, #28]
 8008446:	4620      	mov	r0, r4
 8008448:	f001 fee6 	bl	800a218 <__pow5mult>
 800844c:	9007      	str	r0, [sp, #28]
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f ae8e 	beq.w	8008170 <_strtod_l+0x498>
 8008454:	2f00      	cmp	r7, #0
 8008456:	dd08      	ble.n	800846a <_strtod_l+0x792>
 8008458:	9907      	ldr	r1, [sp, #28]
 800845a:	463a      	mov	r2, r7
 800845c:	4620      	mov	r0, r4
 800845e:	f001 ff35 	bl	800a2cc <__lshift>
 8008462:	9007      	str	r0, [sp, #28]
 8008464:	2800      	cmp	r0, #0
 8008466:	f43f ae83 	beq.w	8008170 <_strtod_l+0x498>
 800846a:	f1b9 0f00 	cmp.w	r9, #0
 800846e:	dd08      	ble.n	8008482 <_strtod_l+0x7aa>
 8008470:	4631      	mov	r1, r6
 8008472:	464a      	mov	r2, r9
 8008474:	4620      	mov	r0, r4
 8008476:	f001 ff29 	bl	800a2cc <__lshift>
 800847a:	4606      	mov	r6, r0
 800847c:	2800      	cmp	r0, #0
 800847e:	f43f ae77 	beq.w	8008170 <_strtod_l+0x498>
 8008482:	9a07      	ldr	r2, [sp, #28]
 8008484:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008486:	4620      	mov	r0, r4
 8008488:	f001 ffa8 	bl	800a3dc <__mdiff>
 800848c:	4605      	mov	r5, r0
 800848e:	2800      	cmp	r0, #0
 8008490:	f43f ae6e 	beq.w	8008170 <_strtod_l+0x498>
 8008494:	68c3      	ldr	r3, [r0, #12]
 8008496:	930f      	str	r3, [sp, #60]	; 0x3c
 8008498:	2300      	movs	r3, #0
 800849a:	60c3      	str	r3, [r0, #12]
 800849c:	4631      	mov	r1, r6
 800849e:	f001 ff81 	bl	800a3a4 <__mcmp>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	da65      	bge.n	8008572 <_strtod_l+0x89a>
 80084a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084a8:	ea53 030a 	orrs.w	r3, r3, sl
 80084ac:	f040 8087 	bne.w	80085be <_strtod_l+0x8e6>
 80084b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f040 8082 	bne.w	80085be <_strtod_l+0x8e6>
 80084ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084be:	0d1b      	lsrs	r3, r3, #20
 80084c0:	051b      	lsls	r3, r3, #20
 80084c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084c6:	d97a      	bls.n	80085be <_strtod_l+0x8e6>
 80084c8:	696b      	ldr	r3, [r5, #20]
 80084ca:	b913      	cbnz	r3, 80084d2 <_strtod_l+0x7fa>
 80084cc:	692b      	ldr	r3, [r5, #16]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	dd75      	ble.n	80085be <_strtod_l+0x8e6>
 80084d2:	4629      	mov	r1, r5
 80084d4:	2201      	movs	r2, #1
 80084d6:	4620      	mov	r0, r4
 80084d8:	f001 fef8 	bl	800a2cc <__lshift>
 80084dc:	4631      	mov	r1, r6
 80084de:	4605      	mov	r5, r0
 80084e0:	f001 ff60 	bl	800a3a4 <__mcmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	dd6a      	ble.n	80085be <_strtod_l+0x8e6>
 80084e8:	9904      	ldr	r1, [sp, #16]
 80084ea:	4a55      	ldr	r2, [pc, #340]	; (8008640 <_strtod_l+0x968>)
 80084ec:	465b      	mov	r3, fp
 80084ee:	2900      	cmp	r1, #0
 80084f0:	f000 8085 	beq.w	80085fe <_strtod_l+0x926>
 80084f4:	ea02 010b 	and.w	r1, r2, fp
 80084f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084fc:	dc7f      	bgt.n	80085fe <_strtod_l+0x926>
 80084fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008502:	f77f aeaa 	ble.w	800825a <_strtod_l+0x582>
 8008506:	4a4f      	ldr	r2, [pc, #316]	; (8008644 <_strtod_l+0x96c>)
 8008508:	2300      	movs	r3, #0
 800850a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800850e:	4650      	mov	r0, sl
 8008510:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008514:	4659      	mov	r1, fp
 8008516:	f7f8 f86f 	bl	80005f8 <__aeabi_dmul>
 800851a:	460b      	mov	r3, r1
 800851c:	4303      	orrs	r3, r0
 800851e:	bf08      	it	eq
 8008520:	2322      	moveq	r3, #34	; 0x22
 8008522:	4682      	mov	sl, r0
 8008524:	468b      	mov	fp, r1
 8008526:	bf08      	it	eq
 8008528:	6023      	streq	r3, [r4, #0]
 800852a:	e62b      	b.n	8008184 <_strtod_l+0x4ac>
 800852c:	f04f 32ff 	mov.w	r2, #4294967295
 8008530:	fa02 f303 	lsl.w	r3, r2, r3
 8008534:	ea03 0a0a 	and.w	sl, r3, sl
 8008538:	e6de      	b.n	80082f8 <_strtod_l+0x620>
 800853a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800853e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008542:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008546:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800854a:	fa01 f308 	lsl.w	r3, r1, r8
 800854e:	930c      	str	r3, [sp, #48]	; 0x30
 8008550:	9111      	str	r1, [sp, #68]	; 0x44
 8008552:	e741      	b.n	80083d8 <_strtod_l+0x700>
 8008554:	2300      	movs	r3, #0
 8008556:	930c      	str	r3, [sp, #48]	; 0x30
 8008558:	2301      	movs	r3, #1
 800855a:	9311      	str	r3, [sp, #68]	; 0x44
 800855c:	e73c      	b.n	80083d8 <_strtod_l+0x700>
 800855e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008560:	4642      	mov	r2, r8
 8008562:	4620      	mov	r0, r4
 8008564:	f001 feb2 	bl	800a2cc <__lshift>
 8008568:	901e      	str	r0, [sp, #120]	; 0x78
 800856a:	2800      	cmp	r0, #0
 800856c:	f47f af66 	bne.w	800843c <_strtod_l+0x764>
 8008570:	e5fe      	b.n	8008170 <_strtod_l+0x498>
 8008572:	465f      	mov	r7, fp
 8008574:	d16e      	bne.n	8008654 <_strtod_l+0x97c>
 8008576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800857c:	b342      	cbz	r2, 80085d0 <_strtod_l+0x8f8>
 800857e:	4a32      	ldr	r2, [pc, #200]	; (8008648 <_strtod_l+0x970>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d128      	bne.n	80085d6 <_strtod_l+0x8fe>
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	4650      	mov	r0, sl
 8008588:	b1eb      	cbz	r3, 80085c6 <_strtod_l+0x8ee>
 800858a:	4a2d      	ldr	r2, [pc, #180]	; (8008640 <_strtod_l+0x968>)
 800858c:	403a      	ands	r2, r7
 800858e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008592:	f04f 31ff 	mov.w	r1, #4294967295
 8008596:	d819      	bhi.n	80085cc <_strtod_l+0x8f4>
 8008598:	0d12      	lsrs	r2, r2, #20
 800859a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800859e:	fa01 f303 	lsl.w	r3, r1, r3
 80085a2:	4298      	cmp	r0, r3
 80085a4:	d117      	bne.n	80085d6 <_strtod_l+0x8fe>
 80085a6:	4b29      	ldr	r3, [pc, #164]	; (800864c <_strtod_l+0x974>)
 80085a8:	429f      	cmp	r7, r3
 80085aa:	d102      	bne.n	80085b2 <_strtod_l+0x8da>
 80085ac:	3001      	adds	r0, #1
 80085ae:	f43f addf 	beq.w	8008170 <_strtod_l+0x498>
 80085b2:	4b23      	ldr	r3, [pc, #140]	; (8008640 <_strtod_l+0x968>)
 80085b4:	403b      	ands	r3, r7
 80085b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80085ba:	f04f 0a00 	mov.w	sl, #0
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1a0      	bne.n	8008506 <_strtod_l+0x82e>
 80085c4:	e5de      	b.n	8008184 <_strtod_l+0x4ac>
 80085c6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ca:	e7ea      	b.n	80085a2 <_strtod_l+0x8ca>
 80085cc:	460b      	mov	r3, r1
 80085ce:	e7e8      	b.n	80085a2 <_strtod_l+0x8ca>
 80085d0:	ea53 030a 	orrs.w	r3, r3, sl
 80085d4:	d088      	beq.n	80084e8 <_strtod_l+0x810>
 80085d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085d8:	b1db      	cbz	r3, 8008612 <_strtod_l+0x93a>
 80085da:	423b      	tst	r3, r7
 80085dc:	d0ef      	beq.n	80085be <_strtod_l+0x8e6>
 80085de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e0:	9a04      	ldr	r2, [sp, #16]
 80085e2:	4650      	mov	r0, sl
 80085e4:	4659      	mov	r1, fp
 80085e6:	b1c3      	cbz	r3, 800861a <_strtod_l+0x942>
 80085e8:	f7ff fb58 	bl	8007c9c <sulp>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085f4:	f7f7 fe4a 	bl	800028c <__adddf3>
 80085f8:	4682      	mov	sl, r0
 80085fa:	468b      	mov	fp, r1
 80085fc:	e7df      	b.n	80085be <_strtod_l+0x8e6>
 80085fe:	4013      	ands	r3, r2
 8008600:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008604:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008608:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800860c:	f04f 3aff 	mov.w	sl, #4294967295
 8008610:	e7d5      	b.n	80085be <_strtod_l+0x8e6>
 8008612:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008614:	ea13 0f0a 	tst.w	r3, sl
 8008618:	e7e0      	b.n	80085dc <_strtod_l+0x904>
 800861a:	f7ff fb3f 	bl	8007c9c <sulp>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008626:	f7f7 fe2f 	bl	8000288 <__aeabi_dsub>
 800862a:	2200      	movs	r2, #0
 800862c:	2300      	movs	r3, #0
 800862e:	4682      	mov	sl, r0
 8008630:	468b      	mov	fp, r1
 8008632:	f7f8 fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 8008636:	2800      	cmp	r0, #0
 8008638:	d0c1      	beq.n	80085be <_strtod_l+0x8e6>
 800863a:	e60e      	b.n	800825a <_strtod_l+0x582>
 800863c:	fffffc02 	.word	0xfffffc02
 8008640:	7ff00000 	.word	0x7ff00000
 8008644:	39500000 	.word	0x39500000
 8008648:	000fffff 	.word	0x000fffff
 800864c:	7fefffff 	.word	0x7fefffff
 8008650:	0800c5d8 	.word	0x0800c5d8
 8008654:	4631      	mov	r1, r6
 8008656:	4628      	mov	r0, r5
 8008658:	f002 f820 	bl	800a69c <__ratio>
 800865c:	ec59 8b10 	vmov	r8, r9, d0
 8008660:	ee10 0a10 	vmov	r0, s0
 8008664:	2200      	movs	r2, #0
 8008666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800866a:	4649      	mov	r1, r9
 800866c:	f7f8 fa40 	bl	8000af0 <__aeabi_dcmple>
 8008670:	2800      	cmp	r0, #0
 8008672:	d07c      	beq.n	800876e <_strtod_l+0xa96>
 8008674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d04c      	beq.n	8008714 <_strtod_l+0xa3c>
 800867a:	4b95      	ldr	r3, [pc, #596]	; (80088d0 <_strtod_l+0xbf8>)
 800867c:	2200      	movs	r2, #0
 800867e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008682:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80088d0 <_strtod_l+0xbf8>
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	4b92      	ldr	r3, [pc, #584]	; (80088d4 <_strtod_l+0xbfc>)
 800868c:	403b      	ands	r3, r7
 800868e:	9311      	str	r3, [sp, #68]	; 0x44
 8008690:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008692:	4b91      	ldr	r3, [pc, #580]	; (80088d8 <_strtod_l+0xc00>)
 8008694:	429a      	cmp	r2, r3
 8008696:	f040 80b2 	bne.w	80087fe <_strtod_l+0xb26>
 800869a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800869e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80086a6:	ec4b ab10 	vmov	d0, sl, fp
 80086aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80086ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80086b2:	f001 ff1b 	bl	800a4ec <__ulp>
 80086b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086ba:	ec53 2b10 	vmov	r2, r3, d0
 80086be:	f7f7 ff9b 	bl	80005f8 <__aeabi_dmul>
 80086c2:	4652      	mov	r2, sl
 80086c4:	465b      	mov	r3, fp
 80086c6:	f7f7 fde1 	bl	800028c <__adddf3>
 80086ca:	460b      	mov	r3, r1
 80086cc:	4981      	ldr	r1, [pc, #516]	; (80088d4 <_strtod_l+0xbfc>)
 80086ce:	4a83      	ldr	r2, [pc, #524]	; (80088dc <_strtod_l+0xc04>)
 80086d0:	4019      	ands	r1, r3
 80086d2:	4291      	cmp	r1, r2
 80086d4:	4682      	mov	sl, r0
 80086d6:	d95e      	bls.n	8008796 <_strtod_l+0xabe>
 80086d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80086de:	4293      	cmp	r3, r2
 80086e0:	d103      	bne.n	80086ea <_strtod_l+0xa12>
 80086e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e4:	3301      	adds	r3, #1
 80086e6:	f43f ad43 	beq.w	8008170 <_strtod_l+0x498>
 80086ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80088e8 <_strtod_l+0xc10>
 80086ee:	f04f 3aff 	mov.w	sl, #4294967295
 80086f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80086f4:	4620      	mov	r0, r4
 80086f6:	f001 fbcd 	bl	8009e94 <_Bfree>
 80086fa:	9907      	ldr	r1, [sp, #28]
 80086fc:	4620      	mov	r0, r4
 80086fe:	f001 fbc9 	bl	8009e94 <_Bfree>
 8008702:	4631      	mov	r1, r6
 8008704:	4620      	mov	r0, r4
 8008706:	f001 fbc5 	bl	8009e94 <_Bfree>
 800870a:	4629      	mov	r1, r5
 800870c:	4620      	mov	r0, r4
 800870e:	f001 fbc1 	bl	8009e94 <_Bfree>
 8008712:	e613      	b.n	800833c <_strtod_l+0x664>
 8008714:	f1ba 0f00 	cmp.w	sl, #0
 8008718:	d11b      	bne.n	8008752 <_strtod_l+0xa7a>
 800871a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800871e:	b9f3      	cbnz	r3, 800875e <_strtod_l+0xa86>
 8008720:	4b6b      	ldr	r3, [pc, #428]	; (80088d0 <_strtod_l+0xbf8>)
 8008722:	2200      	movs	r2, #0
 8008724:	4640      	mov	r0, r8
 8008726:	4649      	mov	r1, r9
 8008728:	f7f8 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800872c:	b9d0      	cbnz	r0, 8008764 <_strtod_l+0xa8c>
 800872e:	4640      	mov	r0, r8
 8008730:	4649      	mov	r1, r9
 8008732:	4b6b      	ldr	r3, [pc, #428]	; (80088e0 <_strtod_l+0xc08>)
 8008734:	2200      	movs	r2, #0
 8008736:	f7f7 ff5f 	bl	80005f8 <__aeabi_dmul>
 800873a:	4680      	mov	r8, r0
 800873c:	4689      	mov	r9, r1
 800873e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008742:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008746:	931b      	str	r3, [sp, #108]	; 0x6c
 8008748:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800874c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008750:	e79b      	b.n	800868a <_strtod_l+0x9b2>
 8008752:	f1ba 0f01 	cmp.w	sl, #1
 8008756:	d102      	bne.n	800875e <_strtod_l+0xa86>
 8008758:	2f00      	cmp	r7, #0
 800875a:	f43f ad7e 	beq.w	800825a <_strtod_l+0x582>
 800875e:	4b61      	ldr	r3, [pc, #388]	; (80088e4 <_strtod_l+0xc0c>)
 8008760:	2200      	movs	r2, #0
 8008762:	e78c      	b.n	800867e <_strtod_l+0x9a6>
 8008764:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80088e0 <_strtod_l+0xc08>
 8008768:	f04f 0800 	mov.w	r8, #0
 800876c:	e7e7      	b.n	800873e <_strtod_l+0xa66>
 800876e:	4b5c      	ldr	r3, [pc, #368]	; (80088e0 <_strtod_l+0xc08>)
 8008770:	4640      	mov	r0, r8
 8008772:	4649      	mov	r1, r9
 8008774:	2200      	movs	r2, #0
 8008776:	f7f7 ff3f 	bl	80005f8 <__aeabi_dmul>
 800877a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800877c:	4680      	mov	r8, r0
 800877e:	4689      	mov	r9, r1
 8008780:	b933      	cbnz	r3, 8008790 <_strtod_l+0xab8>
 8008782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008786:	9012      	str	r0, [sp, #72]	; 0x48
 8008788:	9313      	str	r3, [sp, #76]	; 0x4c
 800878a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800878e:	e7dd      	b.n	800874c <_strtod_l+0xa74>
 8008790:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008794:	e7f9      	b.n	800878a <_strtod_l+0xab2>
 8008796:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800879a:	9b04      	ldr	r3, [sp, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1a8      	bne.n	80086f2 <_strtod_l+0xa1a>
 80087a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087a6:	0d1b      	lsrs	r3, r3, #20
 80087a8:	051b      	lsls	r3, r3, #20
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d1a1      	bne.n	80086f2 <_strtod_l+0xa1a>
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f8 fa81 	bl	8000cb8 <__aeabi_d2lz>
 80087b6:	f7f7 fef1 	bl	800059c <__aeabi_l2d>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4640      	mov	r0, r8
 80087c0:	4649      	mov	r1, r9
 80087c2:	f7f7 fd61 	bl	8000288 <__aeabi_dsub>
 80087c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087cc:	ea43 030a 	orr.w	r3, r3, sl
 80087d0:	4313      	orrs	r3, r2
 80087d2:	4680      	mov	r8, r0
 80087d4:	4689      	mov	r9, r1
 80087d6:	d053      	beq.n	8008880 <_strtod_l+0xba8>
 80087d8:	a335      	add	r3, pc, #212	; (adr r3, 80088b0 <_strtod_l+0xbd8>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f8 f97d 	bl	8000adc <__aeabi_dcmplt>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f47f acce 	bne.w	8008184 <_strtod_l+0x4ac>
 80087e8:	a333      	add	r3, pc, #204	; (adr r3, 80088b8 <_strtod_l+0xbe0>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	f7f8 f991 	bl	8000b18 <__aeabi_dcmpgt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f af7b 	beq.w	80086f2 <_strtod_l+0xa1a>
 80087fc:	e4c2      	b.n	8008184 <_strtod_l+0x4ac>
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	b333      	cbz	r3, 8008850 <_strtod_l+0xb78>
 8008802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008804:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008808:	d822      	bhi.n	8008850 <_strtod_l+0xb78>
 800880a:	a32d      	add	r3, pc, #180	; (adr r3, 80088c0 <_strtod_l+0xbe8>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	4640      	mov	r0, r8
 8008812:	4649      	mov	r1, r9
 8008814:	f7f8 f96c 	bl	8000af0 <__aeabi_dcmple>
 8008818:	b1a0      	cbz	r0, 8008844 <_strtod_l+0xb6c>
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	f7f8 f9c3 	bl	8000ba8 <__aeabi_d2uiz>
 8008822:	2801      	cmp	r0, #1
 8008824:	bf38      	it	cc
 8008826:	2001      	movcc	r0, #1
 8008828:	f7f7 fe6c 	bl	8000504 <__aeabi_ui2d>
 800882c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800882e:	4680      	mov	r8, r0
 8008830:	4689      	mov	r9, r1
 8008832:	bb13      	cbnz	r3, 800887a <_strtod_l+0xba2>
 8008834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008838:	9014      	str	r0, [sp, #80]	; 0x50
 800883a:	9315      	str	r3, [sp, #84]	; 0x54
 800883c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008840:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008846:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008848:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800884c:	1a9b      	subs	r3, r3, r2
 800884e:	930d      	str	r3, [sp, #52]	; 0x34
 8008850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008854:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008858:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800885c:	f001 fe46 	bl	800a4ec <__ulp>
 8008860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008864:	ec53 2b10 	vmov	r2, r3, d0
 8008868:	f7f7 fec6 	bl	80005f8 <__aeabi_dmul>
 800886c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008870:	f7f7 fd0c 	bl	800028c <__adddf3>
 8008874:	4682      	mov	sl, r0
 8008876:	468b      	mov	fp, r1
 8008878:	e78f      	b.n	800879a <_strtod_l+0xac2>
 800887a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800887e:	e7dd      	b.n	800883c <_strtod_l+0xb64>
 8008880:	a311      	add	r3, pc, #68	; (adr r3, 80088c8 <_strtod_l+0xbf0>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f7f8 f929 	bl	8000adc <__aeabi_dcmplt>
 800888a:	e7b4      	b.n	80087f6 <_strtod_l+0xb1e>
 800888c:	2300      	movs	r3, #0
 800888e:	930e      	str	r3, [sp, #56]	; 0x38
 8008890:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008892:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	f7ff ba65 	b.w	8007d64 <_strtod_l+0x8c>
 800889a:	2b65      	cmp	r3, #101	; 0x65
 800889c:	f43f ab5d 	beq.w	8007f5a <_strtod_l+0x282>
 80088a0:	2b45      	cmp	r3, #69	; 0x45
 80088a2:	f43f ab5a 	beq.w	8007f5a <_strtod_l+0x282>
 80088a6:	2201      	movs	r2, #1
 80088a8:	f7ff bb92 	b.w	8007fd0 <_strtod_l+0x2f8>
 80088ac:	f3af 8000 	nop.w
 80088b0:	94a03595 	.word	0x94a03595
 80088b4:	3fdfffff 	.word	0x3fdfffff
 80088b8:	35afe535 	.word	0x35afe535
 80088bc:	3fe00000 	.word	0x3fe00000
 80088c0:	ffc00000 	.word	0xffc00000
 80088c4:	41dfffff 	.word	0x41dfffff
 80088c8:	94a03595 	.word	0x94a03595
 80088cc:	3fcfffff 	.word	0x3fcfffff
 80088d0:	3ff00000 	.word	0x3ff00000
 80088d4:	7ff00000 	.word	0x7ff00000
 80088d8:	7fe00000 	.word	0x7fe00000
 80088dc:	7c9fffff 	.word	0x7c9fffff
 80088e0:	3fe00000 	.word	0x3fe00000
 80088e4:	bff00000 	.word	0xbff00000
 80088e8:	7fefffff 	.word	0x7fefffff

080088ec <_strtod_r>:
 80088ec:	4b01      	ldr	r3, [pc, #4]	; (80088f4 <_strtod_r+0x8>)
 80088ee:	f7ff b9f3 	b.w	8007cd8 <_strtod_l>
 80088f2:	bf00      	nop
 80088f4:	20000080 	.word	0x20000080

080088f8 <_strtol_l.isra.0>:
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fe:	d001      	beq.n	8008904 <_strtol_l.isra.0+0xc>
 8008900:	2b24      	cmp	r3, #36	; 0x24
 8008902:	d906      	bls.n	8008912 <_strtol_l.isra.0+0x1a>
 8008904:	f7fe faea 	bl	8006edc <__errno>
 8008908:	2316      	movs	r3, #22
 800890a:	6003      	str	r3, [r0, #0]
 800890c:	2000      	movs	r0, #0
 800890e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008912:	4f3a      	ldr	r7, [pc, #232]	; (80089fc <_strtol_l.isra.0+0x104>)
 8008914:	468e      	mov	lr, r1
 8008916:	4676      	mov	r6, lr
 8008918:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800891c:	5de5      	ldrb	r5, [r4, r7]
 800891e:	f015 0508 	ands.w	r5, r5, #8
 8008922:	d1f8      	bne.n	8008916 <_strtol_l.isra.0+0x1e>
 8008924:	2c2d      	cmp	r4, #45	; 0x2d
 8008926:	d134      	bne.n	8008992 <_strtol_l.isra.0+0x9a>
 8008928:	f89e 4000 	ldrb.w	r4, [lr]
 800892c:	f04f 0801 	mov.w	r8, #1
 8008930:	f106 0e02 	add.w	lr, r6, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d05c      	beq.n	80089f2 <_strtol_l.isra.0+0xfa>
 8008938:	2b10      	cmp	r3, #16
 800893a:	d10c      	bne.n	8008956 <_strtol_l.isra.0+0x5e>
 800893c:	2c30      	cmp	r4, #48	; 0x30
 800893e:	d10a      	bne.n	8008956 <_strtol_l.isra.0+0x5e>
 8008940:	f89e 4000 	ldrb.w	r4, [lr]
 8008944:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008948:	2c58      	cmp	r4, #88	; 0x58
 800894a:	d14d      	bne.n	80089e8 <_strtol_l.isra.0+0xf0>
 800894c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008950:	2310      	movs	r3, #16
 8008952:	f10e 0e02 	add.w	lr, lr, #2
 8008956:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800895a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800895e:	2600      	movs	r6, #0
 8008960:	fbbc f9f3 	udiv	r9, ip, r3
 8008964:	4635      	mov	r5, r6
 8008966:	fb03 ca19 	mls	sl, r3, r9, ip
 800896a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800896e:	2f09      	cmp	r7, #9
 8008970:	d818      	bhi.n	80089a4 <_strtol_l.isra.0+0xac>
 8008972:	463c      	mov	r4, r7
 8008974:	42a3      	cmp	r3, r4
 8008976:	dd24      	ble.n	80089c2 <_strtol_l.isra.0+0xca>
 8008978:	2e00      	cmp	r6, #0
 800897a:	db1f      	blt.n	80089bc <_strtol_l.isra.0+0xc4>
 800897c:	45a9      	cmp	r9, r5
 800897e:	d31d      	bcc.n	80089bc <_strtol_l.isra.0+0xc4>
 8008980:	d101      	bne.n	8008986 <_strtol_l.isra.0+0x8e>
 8008982:	45a2      	cmp	sl, r4
 8008984:	db1a      	blt.n	80089bc <_strtol_l.isra.0+0xc4>
 8008986:	fb05 4503 	mla	r5, r5, r3, r4
 800898a:	2601      	movs	r6, #1
 800898c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008990:	e7eb      	b.n	800896a <_strtol_l.isra.0+0x72>
 8008992:	2c2b      	cmp	r4, #43	; 0x2b
 8008994:	bf08      	it	eq
 8008996:	f89e 4000 	ldrbeq.w	r4, [lr]
 800899a:	46a8      	mov	r8, r5
 800899c:	bf08      	it	eq
 800899e:	f106 0e02 	addeq.w	lr, r6, #2
 80089a2:	e7c7      	b.n	8008934 <_strtol_l.isra.0+0x3c>
 80089a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80089a8:	2f19      	cmp	r7, #25
 80089aa:	d801      	bhi.n	80089b0 <_strtol_l.isra.0+0xb8>
 80089ac:	3c37      	subs	r4, #55	; 0x37
 80089ae:	e7e1      	b.n	8008974 <_strtol_l.isra.0+0x7c>
 80089b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80089b4:	2f19      	cmp	r7, #25
 80089b6:	d804      	bhi.n	80089c2 <_strtol_l.isra.0+0xca>
 80089b8:	3c57      	subs	r4, #87	; 0x57
 80089ba:	e7db      	b.n	8008974 <_strtol_l.isra.0+0x7c>
 80089bc:	f04f 36ff 	mov.w	r6, #4294967295
 80089c0:	e7e4      	b.n	800898c <_strtol_l.isra.0+0x94>
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	da05      	bge.n	80089d2 <_strtol_l.isra.0+0xda>
 80089c6:	2322      	movs	r3, #34	; 0x22
 80089c8:	6003      	str	r3, [r0, #0]
 80089ca:	4665      	mov	r5, ip
 80089cc:	b942      	cbnz	r2, 80089e0 <_strtol_l.isra.0+0xe8>
 80089ce:	4628      	mov	r0, r5
 80089d0:	e79d      	b.n	800890e <_strtol_l.isra.0+0x16>
 80089d2:	f1b8 0f00 	cmp.w	r8, #0
 80089d6:	d000      	beq.n	80089da <_strtol_l.isra.0+0xe2>
 80089d8:	426d      	negs	r5, r5
 80089da:	2a00      	cmp	r2, #0
 80089dc:	d0f7      	beq.n	80089ce <_strtol_l.isra.0+0xd6>
 80089de:	b10e      	cbz	r6, 80089e4 <_strtol_l.isra.0+0xec>
 80089e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80089e4:	6011      	str	r1, [r2, #0]
 80089e6:	e7f2      	b.n	80089ce <_strtol_l.isra.0+0xd6>
 80089e8:	2430      	movs	r4, #48	; 0x30
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1b3      	bne.n	8008956 <_strtol_l.isra.0+0x5e>
 80089ee:	2308      	movs	r3, #8
 80089f0:	e7b1      	b.n	8008956 <_strtol_l.isra.0+0x5e>
 80089f2:	2c30      	cmp	r4, #48	; 0x30
 80089f4:	d0a4      	beq.n	8008940 <_strtol_l.isra.0+0x48>
 80089f6:	230a      	movs	r3, #10
 80089f8:	e7ad      	b.n	8008956 <_strtol_l.isra.0+0x5e>
 80089fa:	bf00      	nop
 80089fc:	0800c601 	.word	0x0800c601

08008a00 <_strtol_r>:
 8008a00:	f7ff bf7a 	b.w	80088f8 <_strtol_l.isra.0>

08008a04 <quorem>:
 8008a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	6903      	ldr	r3, [r0, #16]
 8008a0a:	690c      	ldr	r4, [r1, #16]
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	4607      	mov	r7, r0
 8008a10:	f2c0 8081 	blt.w	8008b16 <quorem+0x112>
 8008a14:	3c01      	subs	r4, #1
 8008a16:	f101 0814 	add.w	r8, r1, #20
 8008a1a:	f100 0514 	add.w	r5, r0, #20
 8008a1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a38:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a3c:	d331      	bcc.n	8008aa2 <quorem+0x9e>
 8008a3e:	f04f 0e00 	mov.w	lr, #0
 8008a42:	4640      	mov	r0, r8
 8008a44:	46ac      	mov	ip, r5
 8008a46:	46f2      	mov	sl, lr
 8008a48:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a4c:	b293      	uxth	r3, r2
 8008a4e:	fb06 e303 	mla	r3, r6, r3, lr
 8008a52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	ebaa 0303 	sub.w	r3, sl, r3
 8008a5c:	0c12      	lsrs	r2, r2, #16
 8008a5e:	f8dc a000 	ldr.w	sl, [ip]
 8008a62:	fb06 e202 	mla	r2, r6, r2, lr
 8008a66:	fa13 f38a 	uxtah	r3, r3, sl
 8008a6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a6e:	fa1f fa82 	uxth.w	sl, r2
 8008a72:	f8dc 2000 	ldr.w	r2, [ip]
 8008a76:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a84:	4581      	cmp	r9, r0
 8008a86:	f84c 3b04 	str.w	r3, [ip], #4
 8008a8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a8e:	d2db      	bcs.n	8008a48 <quorem+0x44>
 8008a90:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a94:	b92b      	cbnz	r3, 8008aa2 <quorem+0x9e>
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	429d      	cmp	r5, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	d32e      	bcc.n	8008afe <quorem+0xfa>
 8008aa0:	613c      	str	r4, [r7, #16]
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f001 fc7e 	bl	800a3a4 <__mcmp>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	db24      	blt.n	8008af6 <quorem+0xf2>
 8008aac:	3601      	adds	r6, #1
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f04f 0c00 	mov.w	ip, #0
 8008ab4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ab8:	f8d0 e000 	ldr.w	lr, [r0]
 8008abc:	b293      	uxth	r3, r2
 8008abe:	ebac 0303 	sub.w	r3, ip, r3
 8008ac2:	0c12      	lsrs	r2, r2, #16
 8008ac4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ac8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ad6:	45c1      	cmp	r9, r8
 8008ad8:	f840 3b04 	str.w	r3, [r0], #4
 8008adc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ae0:	d2e8      	bcs.n	8008ab4 <quorem+0xb0>
 8008ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aea:	b922      	cbnz	r2, 8008af6 <quorem+0xf2>
 8008aec:	3b04      	subs	r3, #4
 8008aee:	429d      	cmp	r5, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	d30a      	bcc.n	8008b0a <quorem+0x106>
 8008af4:	613c      	str	r4, [r7, #16]
 8008af6:	4630      	mov	r0, r6
 8008af8:	b003      	add	sp, #12
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	3b04      	subs	r3, #4
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	d1cc      	bne.n	8008aa0 <quorem+0x9c>
 8008b06:	3c01      	subs	r4, #1
 8008b08:	e7c7      	b.n	8008a9a <quorem+0x96>
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d1f0      	bne.n	8008af4 <quorem+0xf0>
 8008b12:	3c01      	subs	r4, #1
 8008b14:	e7eb      	b.n	8008aee <quorem+0xea>
 8008b16:	2000      	movs	r0, #0
 8008b18:	e7ee      	b.n	8008af8 <quorem+0xf4>
 8008b1a:	0000      	movs	r0, r0
 8008b1c:	0000      	movs	r0, r0
	...

08008b20 <_dtoa_r>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	ed2d 8b02 	vpush	{d8}
 8008b28:	ec57 6b10 	vmov	r6, r7, d0
 8008b2c:	b095      	sub	sp, #84	; 0x54
 8008b2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b34:	9105      	str	r1, [sp, #20]
 8008b36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b40:	b975      	cbnz	r5, 8008b60 <_dtoa_r+0x40>
 8008b42:	2010      	movs	r0, #16
 8008b44:	f001 f94c 	bl	8009de0 <malloc>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b4c:	b920      	cbnz	r0, 8008b58 <_dtoa_r+0x38>
 8008b4e:	4bb2      	ldr	r3, [pc, #712]	; (8008e18 <_dtoa_r+0x2f8>)
 8008b50:	21ea      	movs	r1, #234	; 0xea
 8008b52:	48b2      	ldr	r0, [pc, #712]	; (8008e1c <_dtoa_r+0x2fc>)
 8008b54:	f002 f868 	bl	800ac28 <__assert_func>
 8008b58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b5c:	6005      	str	r5, [r0, #0]
 8008b5e:	60c5      	str	r5, [r0, #12]
 8008b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b62:	6819      	ldr	r1, [r3, #0]
 8008b64:	b151      	cbz	r1, 8008b7c <_dtoa_r+0x5c>
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	604a      	str	r2, [r1, #4]
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4093      	lsls	r3, r2
 8008b6e:	608b      	str	r3, [r1, #8]
 8008b70:	4620      	mov	r0, r4
 8008b72:	f001 f98f 	bl	8009e94 <_Bfree>
 8008b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	1e3b      	subs	r3, r7, #0
 8008b7e:	bfb9      	ittee	lt
 8008b80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b84:	9303      	strlt	r3, [sp, #12]
 8008b86:	2300      	movge	r3, #0
 8008b88:	f8c8 3000 	strge.w	r3, [r8]
 8008b8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b90:	4ba3      	ldr	r3, [pc, #652]	; (8008e20 <_dtoa_r+0x300>)
 8008b92:	bfbc      	itt	lt
 8008b94:	2201      	movlt	r2, #1
 8008b96:	f8c8 2000 	strlt.w	r2, [r8]
 8008b9a:	ea33 0309 	bics.w	r3, r3, r9
 8008b9e:	d11b      	bne.n	8008bd8 <_dtoa_r+0xb8>
 8008ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ba2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bac:	4333      	orrs	r3, r6
 8008bae:	f000 857a 	beq.w	80096a6 <_dtoa_r+0xb86>
 8008bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb4:	b963      	cbnz	r3, 8008bd0 <_dtoa_r+0xb0>
 8008bb6:	4b9b      	ldr	r3, [pc, #620]	; (8008e24 <_dtoa_r+0x304>)
 8008bb8:	e024      	b.n	8008c04 <_dtoa_r+0xe4>
 8008bba:	4b9b      	ldr	r3, [pc, #620]	; (8008e28 <_dtoa_r+0x308>)
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	9800      	ldr	r0, [sp, #0]
 8008bc6:	b015      	add	sp, #84	; 0x54
 8008bc8:	ecbd 8b02 	vpop	{d8}
 8008bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd0:	4b94      	ldr	r3, [pc, #592]	; (8008e24 <_dtoa_r+0x304>)
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	3303      	adds	r3, #3
 8008bd6:	e7f3      	b.n	8008bc0 <_dtoa_r+0xa0>
 8008bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	ec51 0b17 	vmov	r0, r1, d7
 8008be2:	2300      	movs	r3, #0
 8008be4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008be8:	f7f7 ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bec:	4680      	mov	r8, r0
 8008bee:	b158      	cbz	r0, 8008c08 <_dtoa_r+0xe8>
 8008bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 8551 	beq.w	80096a0 <_dtoa_r+0xb80>
 8008bfe:	488b      	ldr	r0, [pc, #556]	; (8008e2c <_dtoa_r+0x30c>)
 8008c00:	6018      	str	r0, [r3, #0]
 8008c02:	1e43      	subs	r3, r0, #1
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	e7dd      	b.n	8008bc4 <_dtoa_r+0xa4>
 8008c08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008c0c:	aa12      	add	r2, sp, #72	; 0x48
 8008c0e:	a913      	add	r1, sp, #76	; 0x4c
 8008c10:	4620      	mov	r0, r4
 8008c12:	f001 fce7 	bl	800a5e4 <__d2b>
 8008c16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c1a:	4683      	mov	fp, r0
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	d07c      	beq.n	8008d1a <_dtoa_r+0x1fa>
 8008c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008c2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c3a:	4b7d      	ldr	r3, [pc, #500]	; (8008e30 <_dtoa_r+0x310>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 fb21 	bl	8000288 <__aeabi_dsub>
 8008c46:	a36e      	add	r3, pc, #440	; (adr r3, 8008e00 <_dtoa_r+0x2e0>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	f7f7 fcd4 	bl	80005f8 <__aeabi_dmul>
 8008c50:	a36d      	add	r3, pc, #436	; (adr r3, 8008e08 <_dtoa_r+0x2e8>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f7f7 fb19 	bl	800028c <__adddf3>
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	460f      	mov	r7, r1
 8008c60:	f7f7 fc60 	bl	8000524 <__aeabi_i2d>
 8008c64:	a36a      	add	r3, pc, #424	; (adr r3, 8008e10 <_dtoa_r+0x2f0>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fcc5 	bl	80005f8 <__aeabi_dmul>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4630      	mov	r0, r6
 8008c74:	4639      	mov	r1, r7
 8008c76:	f7f7 fb09 	bl	800028c <__adddf3>
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	460f      	mov	r7, r1
 8008c7e:	f7f7 ff6b 	bl	8000b58 <__aeabi_d2iz>
 8008c82:	2200      	movs	r2, #0
 8008c84:	4682      	mov	sl, r0
 8008c86:	2300      	movs	r3, #0
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 ff26 	bl	8000adc <__aeabi_dcmplt>
 8008c90:	b148      	cbz	r0, 8008ca6 <_dtoa_r+0x186>
 8008c92:	4650      	mov	r0, sl
 8008c94:	f7f7 fc46 	bl	8000524 <__aeabi_i2d>
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	f7f7 ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ca0:	b908      	cbnz	r0, 8008ca6 <_dtoa_r+0x186>
 8008ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ca6:	f1ba 0f16 	cmp.w	sl, #22
 8008caa:	d854      	bhi.n	8008d56 <_dtoa_r+0x236>
 8008cac:	4b61      	ldr	r3, [pc, #388]	; (8008e34 <_dtoa_r+0x314>)
 8008cae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cba:	f7f7 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d04b      	beq.n	8008d5a <_dtoa_r+0x23a>
 8008cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8008cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ccc:	1b5d      	subs	r5, r3, r5
 8008cce:	1e6b      	subs	r3, r5, #1
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	bf43      	ittte	mi
 8008cd4:	2300      	movmi	r3, #0
 8008cd6:	f1c5 0801 	rsbmi	r8, r5, #1
 8008cda:	9304      	strmi	r3, [sp, #16]
 8008cdc:	f04f 0800 	movpl.w	r8, #0
 8008ce0:	f1ba 0f00 	cmp.w	sl, #0
 8008ce4:	db3b      	blt.n	8008d5e <_dtoa_r+0x23e>
 8008ce6:	9b04      	ldr	r3, [sp, #16]
 8008ce8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008cec:	4453      	add	r3, sl
 8008cee:	9304      	str	r3, [sp, #16]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9306      	str	r3, [sp, #24]
 8008cf4:	9b05      	ldr	r3, [sp, #20]
 8008cf6:	2b09      	cmp	r3, #9
 8008cf8:	d869      	bhi.n	8008dce <_dtoa_r+0x2ae>
 8008cfa:	2b05      	cmp	r3, #5
 8008cfc:	bfc4      	itt	gt
 8008cfe:	3b04      	subgt	r3, #4
 8008d00:	9305      	strgt	r3, [sp, #20]
 8008d02:	9b05      	ldr	r3, [sp, #20]
 8008d04:	f1a3 0302 	sub.w	r3, r3, #2
 8008d08:	bfcc      	ite	gt
 8008d0a:	2500      	movgt	r5, #0
 8008d0c:	2501      	movle	r5, #1
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d869      	bhi.n	8008de6 <_dtoa_r+0x2c6>
 8008d12:	e8df f003 	tbb	[pc, r3]
 8008d16:	4e2c      	.short	0x4e2c
 8008d18:	5a4c      	.short	0x5a4c
 8008d1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008d1e:	441d      	add	r5, r3
 8008d20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	bfc1      	itttt	gt
 8008d28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d30:	fa09 f303 	lslgt.w	r3, r9, r3
 8008d34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d38:	bfda      	itte	le
 8008d3a:	f1c3 0320 	rsble	r3, r3, #32
 8008d3e:	fa06 f003 	lslle.w	r0, r6, r3
 8008d42:	4318      	orrgt	r0, r3
 8008d44:	f7f7 fbde 	bl	8000504 <__aeabi_ui2d>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d50:	3d01      	subs	r5, #1
 8008d52:	9310      	str	r3, [sp, #64]	; 0x40
 8008d54:	e771      	b.n	8008c3a <_dtoa_r+0x11a>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e7b6      	b.n	8008cc8 <_dtoa_r+0x1a8>
 8008d5a:	900e      	str	r0, [sp, #56]	; 0x38
 8008d5c:	e7b5      	b.n	8008cca <_dtoa_r+0x1aa>
 8008d5e:	f1ca 0300 	rsb	r3, sl, #0
 8008d62:	9306      	str	r3, [sp, #24]
 8008d64:	2300      	movs	r3, #0
 8008d66:	eba8 080a 	sub.w	r8, r8, sl
 8008d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d6c:	e7c2      	b.n	8008cf4 <_dtoa_r+0x1d4>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9308      	str	r3, [sp, #32]
 8008d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	dc39      	bgt.n	8008dec <_dtoa_r+0x2cc>
 8008d78:	f04f 0901 	mov.w	r9, #1
 8008d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d80:	464b      	mov	r3, r9
 8008d82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d88:	2200      	movs	r2, #0
 8008d8a:	6042      	str	r2, [r0, #4]
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	f102 0614 	add.w	r6, r2, #20
 8008d92:	429e      	cmp	r6, r3
 8008d94:	6841      	ldr	r1, [r0, #4]
 8008d96:	d92f      	bls.n	8008df8 <_dtoa_r+0x2d8>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f001 f83b 	bl	8009e14 <_Balloc>
 8008d9e:	9000      	str	r0, [sp, #0]
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d14b      	bne.n	8008e3c <_dtoa_r+0x31c>
 8008da4:	4b24      	ldr	r3, [pc, #144]	; (8008e38 <_dtoa_r+0x318>)
 8008da6:	4602      	mov	r2, r0
 8008da8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008dac:	e6d1      	b.n	8008b52 <_dtoa_r+0x32>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e7de      	b.n	8008d70 <_dtoa_r+0x250>
 8008db2:	2300      	movs	r3, #0
 8008db4:	9308      	str	r3, [sp, #32]
 8008db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db8:	eb0a 0903 	add.w	r9, sl, r3
 8008dbc:	f109 0301 	add.w	r3, r9, #1
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	bfb8      	it	lt
 8008dc6:	2301      	movlt	r3, #1
 8008dc8:	e7dd      	b.n	8008d86 <_dtoa_r+0x266>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e7f2      	b.n	8008db4 <_dtoa_r+0x294>
 8008dce:	2501      	movs	r5, #1
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9305      	str	r3, [sp, #20]
 8008dd4:	9508      	str	r5, [sp, #32]
 8008dd6:	f04f 39ff 	mov.w	r9, #4294967295
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008de0:	2312      	movs	r3, #18
 8008de2:	9209      	str	r2, [sp, #36]	; 0x24
 8008de4:	e7cf      	b.n	8008d86 <_dtoa_r+0x266>
 8008de6:	2301      	movs	r3, #1
 8008de8:	9308      	str	r3, [sp, #32]
 8008dea:	e7f4      	b.n	8008dd6 <_dtoa_r+0x2b6>
 8008dec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008df0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008df4:	464b      	mov	r3, r9
 8008df6:	e7c6      	b.n	8008d86 <_dtoa_r+0x266>
 8008df8:	3101      	adds	r1, #1
 8008dfa:	6041      	str	r1, [r0, #4]
 8008dfc:	0052      	lsls	r2, r2, #1
 8008dfe:	e7c6      	b.n	8008d8e <_dtoa_r+0x26e>
 8008e00:	636f4361 	.word	0x636f4361
 8008e04:	3fd287a7 	.word	0x3fd287a7
 8008e08:	8b60c8b3 	.word	0x8b60c8b3
 8008e0c:	3fc68a28 	.word	0x3fc68a28
 8008e10:	509f79fb 	.word	0x509f79fb
 8008e14:	3fd34413 	.word	0x3fd34413
 8008e18:	0800c70e 	.word	0x0800c70e
 8008e1c:	0800c725 	.word	0x0800c725
 8008e20:	7ff00000 	.word	0x7ff00000
 8008e24:	0800c70a 	.word	0x0800c70a
 8008e28:	0800c701 	.word	0x0800c701
 8008e2c:	0800c585 	.word	0x0800c585
 8008e30:	3ff80000 	.word	0x3ff80000
 8008e34:	0800c8a0 	.word	0x0800c8a0
 8008e38:	0800c784 	.word	0x0800c784
 8008e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e3e:	9a00      	ldr	r2, [sp, #0]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	9b01      	ldr	r3, [sp, #4]
 8008e44:	2b0e      	cmp	r3, #14
 8008e46:	f200 80ad 	bhi.w	8008fa4 <_dtoa_r+0x484>
 8008e4a:	2d00      	cmp	r5, #0
 8008e4c:	f000 80aa 	beq.w	8008fa4 <_dtoa_r+0x484>
 8008e50:	f1ba 0f00 	cmp.w	sl, #0
 8008e54:	dd36      	ble.n	8008ec4 <_dtoa_r+0x3a4>
 8008e56:	4ac3      	ldr	r2, [pc, #780]	; (8009164 <_dtoa_r+0x644>)
 8008e58:	f00a 030f 	and.w	r3, sl, #15
 8008e5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e60:	ed93 7b00 	vldr	d7, [r3]
 8008e64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e6c:	eeb0 8a47 	vmov.f32	s16, s14
 8008e70:	eef0 8a67 	vmov.f32	s17, s15
 8008e74:	d016      	beq.n	8008ea4 <_dtoa_r+0x384>
 8008e76:	4bbc      	ldr	r3, [pc, #752]	; (8009168 <_dtoa_r+0x648>)
 8008e78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e80:	f7f7 fce4 	bl	800084c <__aeabi_ddiv>
 8008e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e88:	f007 070f 	and.w	r7, r7, #15
 8008e8c:	2503      	movs	r5, #3
 8008e8e:	4eb6      	ldr	r6, [pc, #728]	; (8009168 <_dtoa_r+0x648>)
 8008e90:	b957      	cbnz	r7, 8008ea8 <_dtoa_r+0x388>
 8008e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e96:	ec53 2b18 	vmov	r2, r3, d8
 8008e9a:	f7f7 fcd7 	bl	800084c <__aeabi_ddiv>
 8008e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea2:	e029      	b.n	8008ef8 <_dtoa_r+0x3d8>
 8008ea4:	2502      	movs	r5, #2
 8008ea6:	e7f2      	b.n	8008e8e <_dtoa_r+0x36e>
 8008ea8:	07f9      	lsls	r1, r7, #31
 8008eaa:	d508      	bpl.n	8008ebe <_dtoa_r+0x39e>
 8008eac:	ec51 0b18 	vmov	r0, r1, d8
 8008eb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eb4:	f7f7 fba0 	bl	80005f8 <__aeabi_dmul>
 8008eb8:	ec41 0b18 	vmov	d8, r0, r1
 8008ebc:	3501      	adds	r5, #1
 8008ebe:	107f      	asrs	r7, r7, #1
 8008ec0:	3608      	adds	r6, #8
 8008ec2:	e7e5      	b.n	8008e90 <_dtoa_r+0x370>
 8008ec4:	f000 80a6 	beq.w	8009014 <_dtoa_r+0x4f4>
 8008ec8:	f1ca 0600 	rsb	r6, sl, #0
 8008ecc:	4ba5      	ldr	r3, [pc, #660]	; (8009164 <_dtoa_r+0x644>)
 8008ece:	4fa6      	ldr	r7, [pc, #664]	; (8009168 <_dtoa_r+0x648>)
 8008ed0:	f006 020f 	and.w	r2, r6, #15
 8008ed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ee0:	f7f7 fb8a 	bl	80005f8 <__aeabi_dmul>
 8008ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ee8:	1136      	asrs	r6, r6, #4
 8008eea:	2300      	movs	r3, #0
 8008eec:	2502      	movs	r5, #2
 8008eee:	2e00      	cmp	r6, #0
 8008ef0:	f040 8085 	bne.w	8008ffe <_dtoa_r+0x4de>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1d2      	bne.n	8008e9e <_dtoa_r+0x37e>
 8008ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 808c 	beq.w	8009018 <_dtoa_r+0x4f8>
 8008f00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f04:	4b99      	ldr	r3, [pc, #612]	; (800916c <_dtoa_r+0x64c>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fde6 	bl	8000adc <__aeabi_dcmplt>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	f000 8081 	beq.w	8009018 <_dtoa_r+0x4f8>
 8008f16:	9b01      	ldr	r3, [sp, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d07d      	beq.n	8009018 <_dtoa_r+0x4f8>
 8008f1c:	f1b9 0f00 	cmp.w	r9, #0
 8008f20:	dd3c      	ble.n	8008f9c <_dtoa_r+0x47c>
 8008f22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4b91      	ldr	r3, [pc, #580]	; (8009170 <_dtoa_r+0x650>)
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	4639      	mov	r1, r7
 8008f30:	f7f7 fb62 	bl	80005f8 <__aeabi_dmul>
 8008f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f38:	3501      	adds	r5, #1
 8008f3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008f3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f42:	4628      	mov	r0, r5
 8008f44:	f7f7 faee 	bl	8000524 <__aeabi_i2d>
 8008f48:	4632      	mov	r2, r6
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	f7f7 fb54 	bl	80005f8 <__aeabi_dmul>
 8008f50:	4b88      	ldr	r3, [pc, #544]	; (8009174 <_dtoa_r+0x654>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	f7f7 f99a 	bl	800028c <__adddf3>
 8008f58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f60:	9303      	str	r3, [sp, #12]
 8008f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d15c      	bne.n	8009022 <_dtoa_r+0x502>
 8008f68:	4b83      	ldr	r3, [pc, #524]	; (8009178 <_dtoa_r+0x658>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	4639      	mov	r1, r7
 8008f70:	f7f7 f98a 	bl	8000288 <__aeabi_dsub>
 8008f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	f7f7 fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	f040 8296 	bne.w	80094b2 <_dtoa_r+0x992>
 8008f86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 fda3 	bl	8000adc <__aeabi_dcmplt>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f040 8288 	bne.w	80094ac <_dtoa_r+0x98c>
 8008f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f2c0 8158 	blt.w	800925c <_dtoa_r+0x73c>
 8008fac:	f1ba 0f0e 	cmp.w	sl, #14
 8008fb0:	f300 8154 	bgt.w	800925c <_dtoa_r+0x73c>
 8008fb4:	4b6b      	ldr	r3, [pc, #428]	; (8009164 <_dtoa_r+0x644>)
 8008fb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f280 80e3 	bge.w	800918c <_dtoa_r+0x66c>
 8008fc6:	9b01      	ldr	r3, [sp, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f300 80df 	bgt.w	800918c <_dtoa_r+0x66c>
 8008fce:	f040 826d 	bne.w	80094ac <_dtoa_r+0x98c>
 8008fd2:	4b69      	ldr	r3, [pc, #420]	; (8009178 <_dtoa_r+0x658>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	4649      	mov	r1, r9
 8008fda:	f7f7 fb0d 	bl	80005f8 <__aeabi_dmul>
 8008fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fe2:	f7f7 fd8f 	bl	8000b04 <__aeabi_dcmpge>
 8008fe6:	9e01      	ldr	r6, [sp, #4]
 8008fe8:	4637      	mov	r7, r6
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f040 8243 	bne.w	8009476 <_dtoa_r+0x956>
 8008ff0:	9d00      	ldr	r5, [sp, #0]
 8008ff2:	2331      	movs	r3, #49	; 0x31
 8008ff4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ff8:	f10a 0a01 	add.w	sl, sl, #1
 8008ffc:	e23f      	b.n	800947e <_dtoa_r+0x95e>
 8008ffe:	07f2      	lsls	r2, r6, #31
 8009000:	d505      	bpl.n	800900e <_dtoa_r+0x4ee>
 8009002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009006:	f7f7 faf7 	bl	80005f8 <__aeabi_dmul>
 800900a:	3501      	adds	r5, #1
 800900c:	2301      	movs	r3, #1
 800900e:	1076      	asrs	r6, r6, #1
 8009010:	3708      	adds	r7, #8
 8009012:	e76c      	b.n	8008eee <_dtoa_r+0x3ce>
 8009014:	2502      	movs	r5, #2
 8009016:	e76f      	b.n	8008ef8 <_dtoa_r+0x3d8>
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	f8cd a01c 	str.w	sl, [sp, #28]
 800901e:	930c      	str	r3, [sp, #48]	; 0x30
 8009020:	e78d      	b.n	8008f3e <_dtoa_r+0x41e>
 8009022:	9900      	ldr	r1, [sp, #0]
 8009024:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009028:	4b4e      	ldr	r3, [pc, #312]	; (8009164 <_dtoa_r+0x644>)
 800902a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800902e:	4401      	add	r1, r0
 8009030:	9102      	str	r1, [sp, #8]
 8009032:	9908      	ldr	r1, [sp, #32]
 8009034:	eeb0 8a47 	vmov.f32	s16, s14
 8009038:	eef0 8a67 	vmov.f32	s17, s15
 800903c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009040:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009044:	2900      	cmp	r1, #0
 8009046:	d045      	beq.n	80090d4 <_dtoa_r+0x5b4>
 8009048:	494c      	ldr	r1, [pc, #304]	; (800917c <_dtoa_r+0x65c>)
 800904a:	2000      	movs	r0, #0
 800904c:	f7f7 fbfe 	bl	800084c <__aeabi_ddiv>
 8009050:	ec53 2b18 	vmov	r2, r3, d8
 8009054:	f7f7 f918 	bl	8000288 <__aeabi_dsub>
 8009058:	9d00      	ldr	r5, [sp, #0]
 800905a:	ec41 0b18 	vmov	d8, r0, r1
 800905e:	4639      	mov	r1, r7
 8009060:	4630      	mov	r0, r6
 8009062:	f7f7 fd79 	bl	8000b58 <__aeabi_d2iz>
 8009066:	900c      	str	r0, [sp, #48]	; 0x30
 8009068:	f7f7 fa5c 	bl	8000524 <__aeabi_i2d>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4630      	mov	r0, r6
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 f908 	bl	8000288 <__aeabi_dsub>
 8009078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800907a:	3330      	adds	r3, #48	; 0x30
 800907c:	f805 3b01 	strb.w	r3, [r5], #1
 8009080:	ec53 2b18 	vmov	r2, r3, d8
 8009084:	4606      	mov	r6, r0
 8009086:	460f      	mov	r7, r1
 8009088:	f7f7 fd28 	bl	8000adc <__aeabi_dcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	d165      	bne.n	800915c <_dtoa_r+0x63c>
 8009090:	4632      	mov	r2, r6
 8009092:	463b      	mov	r3, r7
 8009094:	4935      	ldr	r1, [pc, #212]	; (800916c <_dtoa_r+0x64c>)
 8009096:	2000      	movs	r0, #0
 8009098:	f7f7 f8f6 	bl	8000288 <__aeabi_dsub>
 800909c:	ec53 2b18 	vmov	r2, r3, d8
 80090a0:	f7f7 fd1c 	bl	8000adc <__aeabi_dcmplt>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	f040 80b9 	bne.w	800921c <_dtoa_r+0x6fc>
 80090aa:	9b02      	ldr	r3, [sp, #8]
 80090ac:	429d      	cmp	r5, r3
 80090ae:	f43f af75 	beq.w	8008f9c <_dtoa_r+0x47c>
 80090b2:	4b2f      	ldr	r3, [pc, #188]	; (8009170 <_dtoa_r+0x650>)
 80090b4:	ec51 0b18 	vmov	r0, r1, d8
 80090b8:	2200      	movs	r2, #0
 80090ba:	f7f7 fa9d 	bl	80005f8 <__aeabi_dmul>
 80090be:	4b2c      	ldr	r3, [pc, #176]	; (8009170 <_dtoa_r+0x650>)
 80090c0:	ec41 0b18 	vmov	d8, r0, r1
 80090c4:	2200      	movs	r2, #0
 80090c6:	4630      	mov	r0, r6
 80090c8:	4639      	mov	r1, r7
 80090ca:	f7f7 fa95 	bl	80005f8 <__aeabi_dmul>
 80090ce:	4606      	mov	r6, r0
 80090d0:	460f      	mov	r7, r1
 80090d2:	e7c4      	b.n	800905e <_dtoa_r+0x53e>
 80090d4:	ec51 0b17 	vmov	r0, r1, d7
 80090d8:	f7f7 fa8e 	bl	80005f8 <__aeabi_dmul>
 80090dc:	9b02      	ldr	r3, [sp, #8]
 80090de:	9d00      	ldr	r5, [sp, #0]
 80090e0:	930c      	str	r3, [sp, #48]	; 0x30
 80090e2:	ec41 0b18 	vmov	d8, r0, r1
 80090e6:	4639      	mov	r1, r7
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7f7 fd35 	bl	8000b58 <__aeabi_d2iz>
 80090ee:	9011      	str	r0, [sp, #68]	; 0x44
 80090f0:	f7f7 fa18 	bl	8000524 <__aeabi_i2d>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4630      	mov	r0, r6
 80090fa:	4639      	mov	r1, r7
 80090fc:	f7f7 f8c4 	bl	8000288 <__aeabi_dsub>
 8009100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009102:	3330      	adds	r3, #48	; 0x30
 8009104:	f805 3b01 	strb.w	r3, [r5], #1
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	429d      	cmp	r5, r3
 800910c:	4606      	mov	r6, r0
 800910e:	460f      	mov	r7, r1
 8009110:	f04f 0200 	mov.w	r2, #0
 8009114:	d134      	bne.n	8009180 <_dtoa_r+0x660>
 8009116:	4b19      	ldr	r3, [pc, #100]	; (800917c <_dtoa_r+0x65c>)
 8009118:	ec51 0b18 	vmov	r0, r1, d8
 800911c:	f7f7 f8b6 	bl	800028c <__adddf3>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	f7f7 fcf6 	bl	8000b18 <__aeabi_dcmpgt>
 800912c:	2800      	cmp	r0, #0
 800912e:	d175      	bne.n	800921c <_dtoa_r+0x6fc>
 8009130:	ec53 2b18 	vmov	r2, r3, d8
 8009134:	4911      	ldr	r1, [pc, #68]	; (800917c <_dtoa_r+0x65c>)
 8009136:	2000      	movs	r0, #0
 8009138:	f7f7 f8a6 	bl	8000288 <__aeabi_dsub>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4630      	mov	r0, r6
 8009142:	4639      	mov	r1, r7
 8009144:	f7f7 fcca 	bl	8000adc <__aeabi_dcmplt>
 8009148:	2800      	cmp	r0, #0
 800914a:	f43f af27 	beq.w	8008f9c <_dtoa_r+0x47c>
 800914e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009150:	1e6b      	subs	r3, r5, #1
 8009152:	930c      	str	r3, [sp, #48]	; 0x30
 8009154:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009158:	2b30      	cmp	r3, #48	; 0x30
 800915a:	d0f8      	beq.n	800914e <_dtoa_r+0x62e>
 800915c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009160:	e04a      	b.n	80091f8 <_dtoa_r+0x6d8>
 8009162:	bf00      	nop
 8009164:	0800c8a0 	.word	0x0800c8a0
 8009168:	0800c878 	.word	0x0800c878
 800916c:	3ff00000 	.word	0x3ff00000
 8009170:	40240000 	.word	0x40240000
 8009174:	401c0000 	.word	0x401c0000
 8009178:	40140000 	.word	0x40140000
 800917c:	3fe00000 	.word	0x3fe00000
 8009180:	4baf      	ldr	r3, [pc, #700]	; (8009440 <_dtoa_r+0x920>)
 8009182:	f7f7 fa39 	bl	80005f8 <__aeabi_dmul>
 8009186:	4606      	mov	r6, r0
 8009188:	460f      	mov	r7, r1
 800918a:	e7ac      	b.n	80090e6 <_dtoa_r+0x5c6>
 800918c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009190:	9d00      	ldr	r5, [sp, #0]
 8009192:	4642      	mov	r2, r8
 8009194:	464b      	mov	r3, r9
 8009196:	4630      	mov	r0, r6
 8009198:	4639      	mov	r1, r7
 800919a:	f7f7 fb57 	bl	800084c <__aeabi_ddiv>
 800919e:	f7f7 fcdb 	bl	8000b58 <__aeabi_d2iz>
 80091a2:	9002      	str	r0, [sp, #8]
 80091a4:	f7f7 f9be 	bl	8000524 <__aeabi_i2d>
 80091a8:	4642      	mov	r2, r8
 80091aa:	464b      	mov	r3, r9
 80091ac:	f7f7 fa24 	bl	80005f8 <__aeabi_dmul>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4630      	mov	r0, r6
 80091b6:	4639      	mov	r1, r7
 80091b8:	f7f7 f866 	bl	8000288 <__aeabi_dsub>
 80091bc:	9e02      	ldr	r6, [sp, #8]
 80091be:	9f01      	ldr	r7, [sp, #4]
 80091c0:	3630      	adds	r6, #48	; 0x30
 80091c2:	f805 6b01 	strb.w	r6, [r5], #1
 80091c6:	9e00      	ldr	r6, [sp, #0]
 80091c8:	1bae      	subs	r6, r5, r6
 80091ca:	42b7      	cmp	r7, r6
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	d137      	bne.n	8009242 <_dtoa_r+0x722>
 80091d2:	f7f7 f85b 	bl	800028c <__adddf3>
 80091d6:	4642      	mov	r2, r8
 80091d8:	464b      	mov	r3, r9
 80091da:	4606      	mov	r6, r0
 80091dc:	460f      	mov	r7, r1
 80091de:	f7f7 fc9b 	bl	8000b18 <__aeabi_dcmpgt>
 80091e2:	b9c8      	cbnz	r0, 8009218 <_dtoa_r+0x6f8>
 80091e4:	4642      	mov	r2, r8
 80091e6:	464b      	mov	r3, r9
 80091e8:	4630      	mov	r0, r6
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f7 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80091f0:	b110      	cbz	r0, 80091f8 <_dtoa_r+0x6d8>
 80091f2:	9b02      	ldr	r3, [sp, #8]
 80091f4:	07d9      	lsls	r1, r3, #31
 80091f6:	d40f      	bmi.n	8009218 <_dtoa_r+0x6f8>
 80091f8:	4620      	mov	r0, r4
 80091fa:	4659      	mov	r1, fp
 80091fc:	f000 fe4a 	bl	8009e94 <_Bfree>
 8009200:	2300      	movs	r3, #0
 8009202:	702b      	strb	r3, [r5, #0]
 8009204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009206:	f10a 0001 	add.w	r0, sl, #1
 800920a:	6018      	str	r0, [r3, #0]
 800920c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800920e:	2b00      	cmp	r3, #0
 8009210:	f43f acd8 	beq.w	8008bc4 <_dtoa_r+0xa4>
 8009214:	601d      	str	r5, [r3, #0]
 8009216:	e4d5      	b.n	8008bc4 <_dtoa_r+0xa4>
 8009218:	f8cd a01c 	str.w	sl, [sp, #28]
 800921c:	462b      	mov	r3, r5
 800921e:	461d      	mov	r5, r3
 8009220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009224:	2a39      	cmp	r2, #57	; 0x39
 8009226:	d108      	bne.n	800923a <_dtoa_r+0x71a>
 8009228:	9a00      	ldr	r2, [sp, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d1f7      	bne.n	800921e <_dtoa_r+0x6fe>
 800922e:	9a07      	ldr	r2, [sp, #28]
 8009230:	9900      	ldr	r1, [sp, #0]
 8009232:	3201      	adds	r2, #1
 8009234:	9207      	str	r2, [sp, #28]
 8009236:	2230      	movs	r2, #48	; 0x30
 8009238:	700a      	strb	r2, [r1, #0]
 800923a:	781a      	ldrb	r2, [r3, #0]
 800923c:	3201      	adds	r2, #1
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	e78c      	b.n	800915c <_dtoa_r+0x63c>
 8009242:	4b7f      	ldr	r3, [pc, #508]	; (8009440 <_dtoa_r+0x920>)
 8009244:	2200      	movs	r2, #0
 8009246:	f7f7 f9d7 	bl	80005f8 <__aeabi_dmul>
 800924a:	2200      	movs	r2, #0
 800924c:	2300      	movs	r3, #0
 800924e:	4606      	mov	r6, r0
 8009250:	460f      	mov	r7, r1
 8009252:	f7f7 fc39 	bl	8000ac8 <__aeabi_dcmpeq>
 8009256:	2800      	cmp	r0, #0
 8009258:	d09b      	beq.n	8009192 <_dtoa_r+0x672>
 800925a:	e7cd      	b.n	80091f8 <_dtoa_r+0x6d8>
 800925c:	9a08      	ldr	r2, [sp, #32]
 800925e:	2a00      	cmp	r2, #0
 8009260:	f000 80c4 	beq.w	80093ec <_dtoa_r+0x8cc>
 8009264:	9a05      	ldr	r2, [sp, #20]
 8009266:	2a01      	cmp	r2, #1
 8009268:	f300 80a8 	bgt.w	80093bc <_dtoa_r+0x89c>
 800926c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800926e:	2a00      	cmp	r2, #0
 8009270:	f000 80a0 	beq.w	80093b4 <_dtoa_r+0x894>
 8009274:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009278:	9e06      	ldr	r6, [sp, #24]
 800927a:	4645      	mov	r5, r8
 800927c:	9a04      	ldr	r2, [sp, #16]
 800927e:	2101      	movs	r1, #1
 8009280:	441a      	add	r2, r3
 8009282:	4620      	mov	r0, r4
 8009284:	4498      	add	r8, r3
 8009286:	9204      	str	r2, [sp, #16]
 8009288:	f000 ff0a 	bl	800a0a0 <__i2b>
 800928c:	4607      	mov	r7, r0
 800928e:	2d00      	cmp	r5, #0
 8009290:	dd0b      	ble.n	80092aa <_dtoa_r+0x78a>
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	dd08      	ble.n	80092aa <_dtoa_r+0x78a>
 8009298:	42ab      	cmp	r3, r5
 800929a:	9a04      	ldr	r2, [sp, #16]
 800929c:	bfa8      	it	ge
 800929e:	462b      	movge	r3, r5
 80092a0:	eba8 0803 	sub.w	r8, r8, r3
 80092a4:	1aed      	subs	r5, r5, r3
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	9304      	str	r3, [sp, #16]
 80092aa:	9b06      	ldr	r3, [sp, #24]
 80092ac:	b1fb      	cbz	r3, 80092ee <_dtoa_r+0x7ce>
 80092ae:	9b08      	ldr	r3, [sp, #32]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 809f 	beq.w	80093f4 <_dtoa_r+0x8d4>
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	dd11      	ble.n	80092de <_dtoa_r+0x7be>
 80092ba:	4639      	mov	r1, r7
 80092bc:	4632      	mov	r2, r6
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 ffaa 	bl	800a218 <__pow5mult>
 80092c4:	465a      	mov	r2, fp
 80092c6:	4601      	mov	r1, r0
 80092c8:	4607      	mov	r7, r0
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 fefe 	bl	800a0cc <__multiply>
 80092d0:	4659      	mov	r1, fp
 80092d2:	9007      	str	r0, [sp, #28]
 80092d4:	4620      	mov	r0, r4
 80092d6:	f000 fddd 	bl	8009e94 <_Bfree>
 80092da:	9b07      	ldr	r3, [sp, #28]
 80092dc:	469b      	mov	fp, r3
 80092de:	9b06      	ldr	r3, [sp, #24]
 80092e0:	1b9a      	subs	r2, r3, r6
 80092e2:	d004      	beq.n	80092ee <_dtoa_r+0x7ce>
 80092e4:	4659      	mov	r1, fp
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 ff96 	bl	800a218 <__pow5mult>
 80092ec:	4683      	mov	fp, r0
 80092ee:	2101      	movs	r1, #1
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fed5 	bl	800a0a0 <__i2b>
 80092f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	4606      	mov	r6, r0
 80092fc:	dd7c      	ble.n	80093f8 <_dtoa_r+0x8d8>
 80092fe:	461a      	mov	r2, r3
 8009300:	4601      	mov	r1, r0
 8009302:	4620      	mov	r0, r4
 8009304:	f000 ff88 	bl	800a218 <__pow5mult>
 8009308:	9b05      	ldr	r3, [sp, #20]
 800930a:	2b01      	cmp	r3, #1
 800930c:	4606      	mov	r6, r0
 800930e:	dd76      	ble.n	80093fe <_dtoa_r+0x8de>
 8009310:	2300      	movs	r3, #0
 8009312:	9306      	str	r3, [sp, #24]
 8009314:	6933      	ldr	r3, [r6, #16]
 8009316:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800931a:	6918      	ldr	r0, [r3, #16]
 800931c:	f000 fe70 	bl	800a000 <__hi0bits>
 8009320:	f1c0 0020 	rsb	r0, r0, #32
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	4418      	add	r0, r3
 8009328:	f010 001f 	ands.w	r0, r0, #31
 800932c:	f000 8086 	beq.w	800943c <_dtoa_r+0x91c>
 8009330:	f1c0 0320 	rsb	r3, r0, #32
 8009334:	2b04      	cmp	r3, #4
 8009336:	dd7f      	ble.n	8009438 <_dtoa_r+0x918>
 8009338:	f1c0 001c 	rsb	r0, r0, #28
 800933c:	9b04      	ldr	r3, [sp, #16]
 800933e:	4403      	add	r3, r0
 8009340:	4480      	add	r8, r0
 8009342:	4405      	add	r5, r0
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	f1b8 0f00 	cmp.w	r8, #0
 800934a:	dd05      	ble.n	8009358 <_dtoa_r+0x838>
 800934c:	4659      	mov	r1, fp
 800934e:	4642      	mov	r2, r8
 8009350:	4620      	mov	r0, r4
 8009352:	f000 ffbb 	bl	800a2cc <__lshift>
 8009356:	4683      	mov	fp, r0
 8009358:	9b04      	ldr	r3, [sp, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	dd05      	ble.n	800936a <_dtoa_r+0x84a>
 800935e:	4631      	mov	r1, r6
 8009360:	461a      	mov	r2, r3
 8009362:	4620      	mov	r0, r4
 8009364:	f000 ffb2 	bl	800a2cc <__lshift>
 8009368:	4606      	mov	r6, r0
 800936a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800936c:	2b00      	cmp	r3, #0
 800936e:	d069      	beq.n	8009444 <_dtoa_r+0x924>
 8009370:	4631      	mov	r1, r6
 8009372:	4658      	mov	r0, fp
 8009374:	f001 f816 	bl	800a3a4 <__mcmp>
 8009378:	2800      	cmp	r0, #0
 800937a:	da63      	bge.n	8009444 <_dtoa_r+0x924>
 800937c:	2300      	movs	r3, #0
 800937e:	4659      	mov	r1, fp
 8009380:	220a      	movs	r2, #10
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fda8 	bl	8009ed8 <__multadd>
 8009388:	9b08      	ldr	r3, [sp, #32]
 800938a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800938e:	4683      	mov	fp, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 818f 	beq.w	80096b4 <_dtoa_r+0xb94>
 8009396:	4639      	mov	r1, r7
 8009398:	2300      	movs	r3, #0
 800939a:	220a      	movs	r2, #10
 800939c:	4620      	mov	r0, r4
 800939e:	f000 fd9b 	bl	8009ed8 <__multadd>
 80093a2:	f1b9 0f00 	cmp.w	r9, #0
 80093a6:	4607      	mov	r7, r0
 80093a8:	f300 808e 	bgt.w	80094c8 <_dtoa_r+0x9a8>
 80093ac:	9b05      	ldr	r3, [sp, #20]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	dc50      	bgt.n	8009454 <_dtoa_r+0x934>
 80093b2:	e089      	b.n	80094c8 <_dtoa_r+0x9a8>
 80093b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093ba:	e75d      	b.n	8009278 <_dtoa_r+0x758>
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	1e5e      	subs	r6, r3, #1
 80093c0:	9b06      	ldr	r3, [sp, #24]
 80093c2:	42b3      	cmp	r3, r6
 80093c4:	bfbf      	itttt	lt
 80093c6:	9b06      	ldrlt	r3, [sp, #24]
 80093c8:	9606      	strlt	r6, [sp, #24]
 80093ca:	1af2      	sublt	r2, r6, r3
 80093cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80093ce:	bfb6      	itet	lt
 80093d0:	189b      	addlt	r3, r3, r2
 80093d2:	1b9e      	subge	r6, r3, r6
 80093d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	bfb8      	it	lt
 80093da:	2600      	movlt	r6, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bfb5      	itete	lt
 80093e0:	eba8 0503 	sublt.w	r5, r8, r3
 80093e4:	9b01      	ldrge	r3, [sp, #4]
 80093e6:	2300      	movlt	r3, #0
 80093e8:	4645      	movge	r5, r8
 80093ea:	e747      	b.n	800927c <_dtoa_r+0x75c>
 80093ec:	9e06      	ldr	r6, [sp, #24]
 80093ee:	9f08      	ldr	r7, [sp, #32]
 80093f0:	4645      	mov	r5, r8
 80093f2:	e74c      	b.n	800928e <_dtoa_r+0x76e>
 80093f4:	9a06      	ldr	r2, [sp, #24]
 80093f6:	e775      	b.n	80092e4 <_dtoa_r+0x7c4>
 80093f8:	9b05      	ldr	r3, [sp, #20]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	dc18      	bgt.n	8009430 <_dtoa_r+0x910>
 80093fe:	9b02      	ldr	r3, [sp, #8]
 8009400:	b9b3      	cbnz	r3, 8009430 <_dtoa_r+0x910>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009408:	b9a3      	cbnz	r3, 8009434 <_dtoa_r+0x914>
 800940a:	9b03      	ldr	r3, [sp, #12]
 800940c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009410:	0d1b      	lsrs	r3, r3, #20
 8009412:	051b      	lsls	r3, r3, #20
 8009414:	b12b      	cbz	r3, 8009422 <_dtoa_r+0x902>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	f108 0801 	add.w	r8, r8, #1
 8009420:	2301      	movs	r3, #1
 8009422:	9306      	str	r3, [sp, #24]
 8009424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009426:	2b00      	cmp	r3, #0
 8009428:	f47f af74 	bne.w	8009314 <_dtoa_r+0x7f4>
 800942c:	2001      	movs	r0, #1
 800942e:	e779      	b.n	8009324 <_dtoa_r+0x804>
 8009430:	2300      	movs	r3, #0
 8009432:	e7f6      	b.n	8009422 <_dtoa_r+0x902>
 8009434:	9b02      	ldr	r3, [sp, #8]
 8009436:	e7f4      	b.n	8009422 <_dtoa_r+0x902>
 8009438:	d085      	beq.n	8009346 <_dtoa_r+0x826>
 800943a:	4618      	mov	r0, r3
 800943c:	301c      	adds	r0, #28
 800943e:	e77d      	b.n	800933c <_dtoa_r+0x81c>
 8009440:	40240000 	.word	0x40240000
 8009444:	9b01      	ldr	r3, [sp, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	dc38      	bgt.n	80094bc <_dtoa_r+0x99c>
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	2b02      	cmp	r3, #2
 800944e:	dd35      	ble.n	80094bc <_dtoa_r+0x99c>
 8009450:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009454:	f1b9 0f00 	cmp.w	r9, #0
 8009458:	d10d      	bne.n	8009476 <_dtoa_r+0x956>
 800945a:	4631      	mov	r1, r6
 800945c:	464b      	mov	r3, r9
 800945e:	2205      	movs	r2, #5
 8009460:	4620      	mov	r0, r4
 8009462:	f000 fd39 	bl	8009ed8 <__multadd>
 8009466:	4601      	mov	r1, r0
 8009468:	4606      	mov	r6, r0
 800946a:	4658      	mov	r0, fp
 800946c:	f000 ff9a 	bl	800a3a4 <__mcmp>
 8009470:	2800      	cmp	r0, #0
 8009472:	f73f adbd 	bgt.w	8008ff0 <_dtoa_r+0x4d0>
 8009476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009478:	9d00      	ldr	r5, [sp, #0]
 800947a:	ea6f 0a03 	mvn.w	sl, r3
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	4631      	mov	r1, r6
 8009484:	4620      	mov	r0, r4
 8009486:	f000 fd05 	bl	8009e94 <_Bfree>
 800948a:	2f00      	cmp	r7, #0
 800948c:	f43f aeb4 	beq.w	80091f8 <_dtoa_r+0x6d8>
 8009490:	f1b8 0f00 	cmp.w	r8, #0
 8009494:	d005      	beq.n	80094a2 <_dtoa_r+0x982>
 8009496:	45b8      	cmp	r8, r7
 8009498:	d003      	beq.n	80094a2 <_dtoa_r+0x982>
 800949a:	4641      	mov	r1, r8
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fcf9 	bl	8009e94 <_Bfree>
 80094a2:	4639      	mov	r1, r7
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 fcf5 	bl	8009e94 <_Bfree>
 80094aa:	e6a5      	b.n	80091f8 <_dtoa_r+0x6d8>
 80094ac:	2600      	movs	r6, #0
 80094ae:	4637      	mov	r7, r6
 80094b0:	e7e1      	b.n	8009476 <_dtoa_r+0x956>
 80094b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80094b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80094b8:	4637      	mov	r7, r6
 80094ba:	e599      	b.n	8008ff0 <_dtoa_r+0x4d0>
 80094bc:	9b08      	ldr	r3, [sp, #32]
 80094be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 80fd 	beq.w	80096c2 <_dtoa_r+0xba2>
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	dd05      	ble.n	80094d8 <_dtoa_r+0x9b8>
 80094cc:	4639      	mov	r1, r7
 80094ce:	462a      	mov	r2, r5
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fefb 	bl	800a2cc <__lshift>
 80094d6:	4607      	mov	r7, r0
 80094d8:	9b06      	ldr	r3, [sp, #24]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d05c      	beq.n	8009598 <_dtoa_r+0xa78>
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fc97 	bl	8009e14 <_Balloc>
 80094e6:	4605      	mov	r5, r0
 80094e8:	b928      	cbnz	r0, 80094f6 <_dtoa_r+0x9d6>
 80094ea:	4b80      	ldr	r3, [pc, #512]	; (80096ec <_dtoa_r+0xbcc>)
 80094ec:	4602      	mov	r2, r0
 80094ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094f2:	f7ff bb2e 	b.w	8008b52 <_dtoa_r+0x32>
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	3202      	adds	r2, #2
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	f107 010c 	add.w	r1, r7, #12
 8009500:	300c      	adds	r0, #12
 8009502:	f7fd fd15 	bl	8006f30 <memcpy>
 8009506:	2201      	movs	r2, #1
 8009508:	4629      	mov	r1, r5
 800950a:	4620      	mov	r0, r4
 800950c:	f000 fede 	bl	800a2cc <__lshift>
 8009510:	9b00      	ldr	r3, [sp, #0]
 8009512:	3301      	adds	r3, #1
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	444b      	add	r3, r9
 800951a:	9307      	str	r3, [sp, #28]
 800951c:	9b02      	ldr	r3, [sp, #8]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	46b8      	mov	r8, r7
 8009524:	9306      	str	r3, [sp, #24]
 8009526:	4607      	mov	r7, r0
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	4631      	mov	r1, r6
 800952c:	3b01      	subs	r3, #1
 800952e:	4658      	mov	r0, fp
 8009530:	9302      	str	r3, [sp, #8]
 8009532:	f7ff fa67 	bl	8008a04 <quorem>
 8009536:	4603      	mov	r3, r0
 8009538:	3330      	adds	r3, #48	; 0x30
 800953a:	9004      	str	r0, [sp, #16]
 800953c:	4641      	mov	r1, r8
 800953e:	4658      	mov	r0, fp
 8009540:	9308      	str	r3, [sp, #32]
 8009542:	f000 ff2f 	bl	800a3a4 <__mcmp>
 8009546:	463a      	mov	r2, r7
 8009548:	4681      	mov	r9, r0
 800954a:	4631      	mov	r1, r6
 800954c:	4620      	mov	r0, r4
 800954e:	f000 ff45 	bl	800a3dc <__mdiff>
 8009552:	68c2      	ldr	r2, [r0, #12]
 8009554:	9b08      	ldr	r3, [sp, #32]
 8009556:	4605      	mov	r5, r0
 8009558:	bb02      	cbnz	r2, 800959c <_dtoa_r+0xa7c>
 800955a:	4601      	mov	r1, r0
 800955c:	4658      	mov	r0, fp
 800955e:	f000 ff21 	bl	800a3a4 <__mcmp>
 8009562:	9b08      	ldr	r3, [sp, #32]
 8009564:	4602      	mov	r2, r0
 8009566:	4629      	mov	r1, r5
 8009568:	4620      	mov	r0, r4
 800956a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800956e:	f000 fc91 	bl	8009e94 <_Bfree>
 8009572:	9b05      	ldr	r3, [sp, #20]
 8009574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009576:	9d01      	ldr	r5, [sp, #4]
 8009578:	ea43 0102 	orr.w	r1, r3, r2
 800957c:	9b06      	ldr	r3, [sp, #24]
 800957e:	430b      	orrs	r3, r1
 8009580:	9b08      	ldr	r3, [sp, #32]
 8009582:	d10d      	bne.n	80095a0 <_dtoa_r+0xa80>
 8009584:	2b39      	cmp	r3, #57	; 0x39
 8009586:	d029      	beq.n	80095dc <_dtoa_r+0xabc>
 8009588:	f1b9 0f00 	cmp.w	r9, #0
 800958c:	dd01      	ble.n	8009592 <_dtoa_r+0xa72>
 800958e:	9b04      	ldr	r3, [sp, #16]
 8009590:	3331      	adds	r3, #49	; 0x31
 8009592:	9a02      	ldr	r2, [sp, #8]
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	e774      	b.n	8009482 <_dtoa_r+0x962>
 8009598:	4638      	mov	r0, r7
 800959a:	e7b9      	b.n	8009510 <_dtoa_r+0x9f0>
 800959c:	2201      	movs	r2, #1
 800959e:	e7e2      	b.n	8009566 <_dtoa_r+0xa46>
 80095a0:	f1b9 0f00 	cmp.w	r9, #0
 80095a4:	db06      	blt.n	80095b4 <_dtoa_r+0xa94>
 80095a6:	9905      	ldr	r1, [sp, #20]
 80095a8:	ea41 0909 	orr.w	r9, r1, r9
 80095ac:	9906      	ldr	r1, [sp, #24]
 80095ae:	ea59 0101 	orrs.w	r1, r9, r1
 80095b2:	d120      	bne.n	80095f6 <_dtoa_r+0xad6>
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	ddec      	ble.n	8009592 <_dtoa_r+0xa72>
 80095b8:	4659      	mov	r1, fp
 80095ba:	2201      	movs	r2, #1
 80095bc:	4620      	mov	r0, r4
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	f000 fe84 	bl	800a2cc <__lshift>
 80095c4:	4631      	mov	r1, r6
 80095c6:	4683      	mov	fp, r0
 80095c8:	f000 feec 	bl	800a3a4 <__mcmp>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	dc02      	bgt.n	80095d8 <_dtoa_r+0xab8>
 80095d2:	d1de      	bne.n	8009592 <_dtoa_r+0xa72>
 80095d4:	07da      	lsls	r2, r3, #31
 80095d6:	d5dc      	bpl.n	8009592 <_dtoa_r+0xa72>
 80095d8:	2b39      	cmp	r3, #57	; 0x39
 80095da:	d1d8      	bne.n	800958e <_dtoa_r+0xa6e>
 80095dc:	9a02      	ldr	r2, [sp, #8]
 80095de:	2339      	movs	r3, #57	; 0x39
 80095e0:	7013      	strb	r3, [r2, #0]
 80095e2:	462b      	mov	r3, r5
 80095e4:	461d      	mov	r5, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ec:	2a39      	cmp	r2, #57	; 0x39
 80095ee:	d050      	beq.n	8009692 <_dtoa_r+0xb72>
 80095f0:	3201      	adds	r2, #1
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	e745      	b.n	8009482 <_dtoa_r+0x962>
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	dd03      	ble.n	8009602 <_dtoa_r+0xae2>
 80095fa:	2b39      	cmp	r3, #57	; 0x39
 80095fc:	d0ee      	beq.n	80095dc <_dtoa_r+0xabc>
 80095fe:	3301      	adds	r3, #1
 8009600:	e7c7      	b.n	8009592 <_dtoa_r+0xa72>
 8009602:	9a01      	ldr	r2, [sp, #4]
 8009604:	9907      	ldr	r1, [sp, #28]
 8009606:	f802 3c01 	strb.w	r3, [r2, #-1]
 800960a:	428a      	cmp	r2, r1
 800960c:	d02a      	beq.n	8009664 <_dtoa_r+0xb44>
 800960e:	4659      	mov	r1, fp
 8009610:	2300      	movs	r3, #0
 8009612:	220a      	movs	r2, #10
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fc5f 	bl	8009ed8 <__multadd>
 800961a:	45b8      	cmp	r8, r7
 800961c:	4683      	mov	fp, r0
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	f04f 020a 	mov.w	r2, #10
 8009626:	4641      	mov	r1, r8
 8009628:	4620      	mov	r0, r4
 800962a:	d107      	bne.n	800963c <_dtoa_r+0xb1c>
 800962c:	f000 fc54 	bl	8009ed8 <__multadd>
 8009630:	4680      	mov	r8, r0
 8009632:	4607      	mov	r7, r0
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	3301      	adds	r3, #1
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	e775      	b.n	8009528 <_dtoa_r+0xa08>
 800963c:	f000 fc4c 	bl	8009ed8 <__multadd>
 8009640:	4639      	mov	r1, r7
 8009642:	4680      	mov	r8, r0
 8009644:	2300      	movs	r3, #0
 8009646:	220a      	movs	r2, #10
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fc45 	bl	8009ed8 <__multadd>
 800964e:	4607      	mov	r7, r0
 8009650:	e7f0      	b.n	8009634 <_dtoa_r+0xb14>
 8009652:	f1b9 0f00 	cmp.w	r9, #0
 8009656:	9a00      	ldr	r2, [sp, #0]
 8009658:	bfcc      	ite	gt
 800965a:	464d      	movgt	r5, r9
 800965c:	2501      	movle	r5, #1
 800965e:	4415      	add	r5, r2
 8009660:	f04f 0800 	mov.w	r8, #0
 8009664:	4659      	mov	r1, fp
 8009666:	2201      	movs	r2, #1
 8009668:	4620      	mov	r0, r4
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	f000 fe2e 	bl	800a2cc <__lshift>
 8009670:	4631      	mov	r1, r6
 8009672:	4683      	mov	fp, r0
 8009674:	f000 fe96 	bl	800a3a4 <__mcmp>
 8009678:	2800      	cmp	r0, #0
 800967a:	dcb2      	bgt.n	80095e2 <_dtoa_r+0xac2>
 800967c:	d102      	bne.n	8009684 <_dtoa_r+0xb64>
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	07db      	lsls	r3, r3, #31
 8009682:	d4ae      	bmi.n	80095e2 <_dtoa_r+0xac2>
 8009684:	462b      	mov	r3, r5
 8009686:	461d      	mov	r5, r3
 8009688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800968c:	2a30      	cmp	r2, #48	; 0x30
 800968e:	d0fa      	beq.n	8009686 <_dtoa_r+0xb66>
 8009690:	e6f7      	b.n	8009482 <_dtoa_r+0x962>
 8009692:	9a00      	ldr	r2, [sp, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d1a5      	bne.n	80095e4 <_dtoa_r+0xac4>
 8009698:	f10a 0a01 	add.w	sl, sl, #1
 800969c:	2331      	movs	r3, #49	; 0x31
 800969e:	e779      	b.n	8009594 <_dtoa_r+0xa74>
 80096a0:	4b13      	ldr	r3, [pc, #76]	; (80096f0 <_dtoa_r+0xbd0>)
 80096a2:	f7ff baaf 	b.w	8008c04 <_dtoa_r+0xe4>
 80096a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f47f aa86 	bne.w	8008bba <_dtoa_r+0x9a>
 80096ae:	4b11      	ldr	r3, [pc, #68]	; (80096f4 <_dtoa_r+0xbd4>)
 80096b0:	f7ff baa8 	b.w	8008c04 <_dtoa_r+0xe4>
 80096b4:	f1b9 0f00 	cmp.w	r9, #0
 80096b8:	dc03      	bgt.n	80096c2 <_dtoa_r+0xba2>
 80096ba:	9b05      	ldr	r3, [sp, #20]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	f73f aec9 	bgt.w	8009454 <_dtoa_r+0x934>
 80096c2:	9d00      	ldr	r5, [sp, #0]
 80096c4:	4631      	mov	r1, r6
 80096c6:	4658      	mov	r0, fp
 80096c8:	f7ff f99c 	bl	8008a04 <quorem>
 80096cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80096d0:	f805 3b01 	strb.w	r3, [r5], #1
 80096d4:	9a00      	ldr	r2, [sp, #0]
 80096d6:	1aaa      	subs	r2, r5, r2
 80096d8:	4591      	cmp	r9, r2
 80096da:	ddba      	ble.n	8009652 <_dtoa_r+0xb32>
 80096dc:	4659      	mov	r1, fp
 80096de:	2300      	movs	r3, #0
 80096e0:	220a      	movs	r2, #10
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 fbf8 	bl	8009ed8 <__multadd>
 80096e8:	4683      	mov	fp, r0
 80096ea:	e7eb      	b.n	80096c4 <_dtoa_r+0xba4>
 80096ec:	0800c784 	.word	0x0800c784
 80096f0:	0800c584 	.word	0x0800c584
 80096f4:	0800c701 	.word	0x0800c701

080096f8 <rshift>:
 80096f8:	6903      	ldr	r3, [r0, #16]
 80096fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009702:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009706:	f100 0414 	add.w	r4, r0, #20
 800970a:	dd45      	ble.n	8009798 <rshift+0xa0>
 800970c:	f011 011f 	ands.w	r1, r1, #31
 8009710:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009714:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009718:	d10c      	bne.n	8009734 <rshift+0x3c>
 800971a:	f100 0710 	add.w	r7, r0, #16
 800971e:	4629      	mov	r1, r5
 8009720:	42b1      	cmp	r1, r6
 8009722:	d334      	bcc.n	800978e <rshift+0x96>
 8009724:	1a9b      	subs	r3, r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	1eea      	subs	r2, r5, #3
 800972a:	4296      	cmp	r6, r2
 800972c:	bf38      	it	cc
 800972e:	2300      	movcc	r3, #0
 8009730:	4423      	add	r3, r4
 8009732:	e015      	b.n	8009760 <rshift+0x68>
 8009734:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009738:	f1c1 0820 	rsb	r8, r1, #32
 800973c:	40cf      	lsrs	r7, r1
 800973e:	f105 0e04 	add.w	lr, r5, #4
 8009742:	46a1      	mov	r9, r4
 8009744:	4576      	cmp	r6, lr
 8009746:	46f4      	mov	ip, lr
 8009748:	d815      	bhi.n	8009776 <rshift+0x7e>
 800974a:	1a9b      	subs	r3, r3, r2
 800974c:	009a      	lsls	r2, r3, #2
 800974e:	3a04      	subs	r2, #4
 8009750:	3501      	adds	r5, #1
 8009752:	42ae      	cmp	r6, r5
 8009754:	bf38      	it	cc
 8009756:	2200      	movcc	r2, #0
 8009758:	18a3      	adds	r3, r4, r2
 800975a:	50a7      	str	r7, [r4, r2]
 800975c:	b107      	cbz	r7, 8009760 <rshift+0x68>
 800975e:	3304      	adds	r3, #4
 8009760:	1b1a      	subs	r2, r3, r4
 8009762:	42a3      	cmp	r3, r4
 8009764:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009768:	bf08      	it	eq
 800976a:	2300      	moveq	r3, #0
 800976c:	6102      	str	r2, [r0, #16]
 800976e:	bf08      	it	eq
 8009770:	6143      	streq	r3, [r0, #20]
 8009772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009776:	f8dc c000 	ldr.w	ip, [ip]
 800977a:	fa0c fc08 	lsl.w	ip, ip, r8
 800977e:	ea4c 0707 	orr.w	r7, ip, r7
 8009782:	f849 7b04 	str.w	r7, [r9], #4
 8009786:	f85e 7b04 	ldr.w	r7, [lr], #4
 800978a:	40cf      	lsrs	r7, r1
 800978c:	e7da      	b.n	8009744 <rshift+0x4c>
 800978e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009792:	f847 cf04 	str.w	ip, [r7, #4]!
 8009796:	e7c3      	b.n	8009720 <rshift+0x28>
 8009798:	4623      	mov	r3, r4
 800979a:	e7e1      	b.n	8009760 <rshift+0x68>

0800979c <__hexdig_fun>:
 800979c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80097a0:	2b09      	cmp	r3, #9
 80097a2:	d802      	bhi.n	80097aa <__hexdig_fun+0xe>
 80097a4:	3820      	subs	r0, #32
 80097a6:	b2c0      	uxtb	r0, r0
 80097a8:	4770      	bx	lr
 80097aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80097ae:	2b05      	cmp	r3, #5
 80097b0:	d801      	bhi.n	80097b6 <__hexdig_fun+0x1a>
 80097b2:	3847      	subs	r0, #71	; 0x47
 80097b4:	e7f7      	b.n	80097a6 <__hexdig_fun+0xa>
 80097b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	d801      	bhi.n	80097c2 <__hexdig_fun+0x26>
 80097be:	3827      	subs	r0, #39	; 0x27
 80097c0:	e7f1      	b.n	80097a6 <__hexdig_fun+0xa>
 80097c2:	2000      	movs	r0, #0
 80097c4:	4770      	bx	lr
	...

080097c8 <__gethex>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	ed2d 8b02 	vpush	{d8}
 80097d0:	b089      	sub	sp, #36	; 0x24
 80097d2:	ee08 0a10 	vmov	s16, r0
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	4bbc      	ldr	r3, [pc, #752]	; (8009acc <__gethex+0x304>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	4618      	mov	r0, r3
 80097e0:	468b      	mov	fp, r1
 80097e2:	4690      	mov	r8, r2
 80097e4:	f7f6 fcf4 	bl	80001d0 <strlen>
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	f8db 2000 	ldr.w	r2, [fp]
 80097ee:	4403      	add	r3, r0
 80097f0:	4682      	mov	sl, r0
 80097f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	1c93      	adds	r3, r2, #2
 80097fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80097fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009802:	32fe      	adds	r2, #254	; 0xfe
 8009804:	18d1      	adds	r1, r2, r3
 8009806:	461f      	mov	r7, r3
 8009808:	f813 0b01 	ldrb.w	r0, [r3], #1
 800980c:	9100      	str	r1, [sp, #0]
 800980e:	2830      	cmp	r0, #48	; 0x30
 8009810:	d0f8      	beq.n	8009804 <__gethex+0x3c>
 8009812:	f7ff ffc3 	bl	800979c <__hexdig_fun>
 8009816:	4604      	mov	r4, r0
 8009818:	2800      	cmp	r0, #0
 800981a:	d13a      	bne.n	8009892 <__gethex+0xca>
 800981c:	9901      	ldr	r1, [sp, #4]
 800981e:	4652      	mov	r2, sl
 8009820:	4638      	mov	r0, r7
 8009822:	f001 f9e1 	bl	800abe8 <strncmp>
 8009826:	4605      	mov	r5, r0
 8009828:	2800      	cmp	r0, #0
 800982a:	d168      	bne.n	80098fe <__gethex+0x136>
 800982c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009830:	eb07 060a 	add.w	r6, r7, sl
 8009834:	f7ff ffb2 	bl	800979c <__hexdig_fun>
 8009838:	2800      	cmp	r0, #0
 800983a:	d062      	beq.n	8009902 <__gethex+0x13a>
 800983c:	4633      	mov	r3, r6
 800983e:	7818      	ldrb	r0, [r3, #0]
 8009840:	2830      	cmp	r0, #48	; 0x30
 8009842:	461f      	mov	r7, r3
 8009844:	f103 0301 	add.w	r3, r3, #1
 8009848:	d0f9      	beq.n	800983e <__gethex+0x76>
 800984a:	f7ff ffa7 	bl	800979c <__hexdig_fun>
 800984e:	2301      	movs	r3, #1
 8009850:	fab0 f480 	clz	r4, r0
 8009854:	0964      	lsrs	r4, r4, #5
 8009856:	4635      	mov	r5, r6
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	463a      	mov	r2, r7
 800985c:	4616      	mov	r6, r2
 800985e:	3201      	adds	r2, #1
 8009860:	7830      	ldrb	r0, [r6, #0]
 8009862:	f7ff ff9b 	bl	800979c <__hexdig_fun>
 8009866:	2800      	cmp	r0, #0
 8009868:	d1f8      	bne.n	800985c <__gethex+0x94>
 800986a:	9901      	ldr	r1, [sp, #4]
 800986c:	4652      	mov	r2, sl
 800986e:	4630      	mov	r0, r6
 8009870:	f001 f9ba 	bl	800abe8 <strncmp>
 8009874:	b980      	cbnz	r0, 8009898 <__gethex+0xd0>
 8009876:	b94d      	cbnz	r5, 800988c <__gethex+0xc4>
 8009878:	eb06 050a 	add.w	r5, r6, sl
 800987c:	462a      	mov	r2, r5
 800987e:	4616      	mov	r6, r2
 8009880:	3201      	adds	r2, #1
 8009882:	7830      	ldrb	r0, [r6, #0]
 8009884:	f7ff ff8a 	bl	800979c <__hexdig_fun>
 8009888:	2800      	cmp	r0, #0
 800988a:	d1f8      	bne.n	800987e <__gethex+0xb6>
 800988c:	1bad      	subs	r5, r5, r6
 800988e:	00ad      	lsls	r5, r5, #2
 8009890:	e004      	b.n	800989c <__gethex+0xd4>
 8009892:	2400      	movs	r4, #0
 8009894:	4625      	mov	r5, r4
 8009896:	e7e0      	b.n	800985a <__gethex+0x92>
 8009898:	2d00      	cmp	r5, #0
 800989a:	d1f7      	bne.n	800988c <__gethex+0xc4>
 800989c:	7833      	ldrb	r3, [r6, #0]
 800989e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098a2:	2b50      	cmp	r3, #80	; 0x50
 80098a4:	d13b      	bne.n	800991e <__gethex+0x156>
 80098a6:	7873      	ldrb	r3, [r6, #1]
 80098a8:	2b2b      	cmp	r3, #43	; 0x2b
 80098aa:	d02c      	beq.n	8009906 <__gethex+0x13e>
 80098ac:	2b2d      	cmp	r3, #45	; 0x2d
 80098ae:	d02e      	beq.n	800990e <__gethex+0x146>
 80098b0:	1c71      	adds	r1, r6, #1
 80098b2:	f04f 0900 	mov.w	r9, #0
 80098b6:	7808      	ldrb	r0, [r1, #0]
 80098b8:	f7ff ff70 	bl	800979c <__hexdig_fun>
 80098bc:	1e43      	subs	r3, r0, #1
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b18      	cmp	r3, #24
 80098c2:	d82c      	bhi.n	800991e <__gethex+0x156>
 80098c4:	f1a0 0210 	sub.w	r2, r0, #16
 80098c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098cc:	f7ff ff66 	bl	800979c <__hexdig_fun>
 80098d0:	1e43      	subs	r3, r0, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b18      	cmp	r3, #24
 80098d6:	d91d      	bls.n	8009914 <__gethex+0x14c>
 80098d8:	f1b9 0f00 	cmp.w	r9, #0
 80098dc:	d000      	beq.n	80098e0 <__gethex+0x118>
 80098de:	4252      	negs	r2, r2
 80098e0:	4415      	add	r5, r2
 80098e2:	f8cb 1000 	str.w	r1, [fp]
 80098e6:	b1e4      	cbz	r4, 8009922 <__gethex+0x15a>
 80098e8:	9b00      	ldr	r3, [sp, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	bf14      	ite	ne
 80098ee:	2700      	movne	r7, #0
 80098f0:	2706      	moveq	r7, #6
 80098f2:	4638      	mov	r0, r7
 80098f4:	b009      	add	sp, #36	; 0x24
 80098f6:	ecbd 8b02 	vpop	{d8}
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fe:	463e      	mov	r6, r7
 8009900:	4625      	mov	r5, r4
 8009902:	2401      	movs	r4, #1
 8009904:	e7ca      	b.n	800989c <__gethex+0xd4>
 8009906:	f04f 0900 	mov.w	r9, #0
 800990a:	1cb1      	adds	r1, r6, #2
 800990c:	e7d3      	b.n	80098b6 <__gethex+0xee>
 800990e:	f04f 0901 	mov.w	r9, #1
 8009912:	e7fa      	b.n	800990a <__gethex+0x142>
 8009914:	230a      	movs	r3, #10
 8009916:	fb03 0202 	mla	r2, r3, r2, r0
 800991a:	3a10      	subs	r2, #16
 800991c:	e7d4      	b.n	80098c8 <__gethex+0x100>
 800991e:	4631      	mov	r1, r6
 8009920:	e7df      	b.n	80098e2 <__gethex+0x11a>
 8009922:	1bf3      	subs	r3, r6, r7
 8009924:	3b01      	subs	r3, #1
 8009926:	4621      	mov	r1, r4
 8009928:	2b07      	cmp	r3, #7
 800992a:	dc0b      	bgt.n	8009944 <__gethex+0x17c>
 800992c:	ee18 0a10 	vmov	r0, s16
 8009930:	f000 fa70 	bl	8009e14 <_Balloc>
 8009934:	4604      	mov	r4, r0
 8009936:	b940      	cbnz	r0, 800994a <__gethex+0x182>
 8009938:	4b65      	ldr	r3, [pc, #404]	; (8009ad0 <__gethex+0x308>)
 800993a:	4602      	mov	r2, r0
 800993c:	21de      	movs	r1, #222	; 0xde
 800993e:	4865      	ldr	r0, [pc, #404]	; (8009ad4 <__gethex+0x30c>)
 8009940:	f001 f972 	bl	800ac28 <__assert_func>
 8009944:	3101      	adds	r1, #1
 8009946:	105b      	asrs	r3, r3, #1
 8009948:	e7ee      	b.n	8009928 <__gethex+0x160>
 800994a:	f100 0914 	add.w	r9, r0, #20
 800994e:	f04f 0b00 	mov.w	fp, #0
 8009952:	f1ca 0301 	rsb	r3, sl, #1
 8009956:	f8cd 9008 	str.w	r9, [sp, #8]
 800995a:	f8cd b000 	str.w	fp, [sp]
 800995e:	9306      	str	r3, [sp, #24]
 8009960:	42b7      	cmp	r7, r6
 8009962:	d340      	bcc.n	80099e6 <__gethex+0x21e>
 8009964:	9802      	ldr	r0, [sp, #8]
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	f840 3b04 	str.w	r3, [r0], #4
 800996c:	eba0 0009 	sub.w	r0, r0, r9
 8009970:	1080      	asrs	r0, r0, #2
 8009972:	0146      	lsls	r6, r0, #5
 8009974:	6120      	str	r0, [r4, #16]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fb42 	bl	800a000 <__hi0bits>
 800997c:	1a30      	subs	r0, r6, r0
 800997e:	f8d8 6000 	ldr.w	r6, [r8]
 8009982:	42b0      	cmp	r0, r6
 8009984:	dd63      	ble.n	8009a4e <__gethex+0x286>
 8009986:	1b87      	subs	r7, r0, r6
 8009988:	4639      	mov	r1, r7
 800998a:	4620      	mov	r0, r4
 800998c:	f000 fedc 	bl	800a748 <__any_on>
 8009990:	4682      	mov	sl, r0
 8009992:	b1a8      	cbz	r0, 80099c0 <__gethex+0x1f8>
 8009994:	1e7b      	subs	r3, r7, #1
 8009996:	1159      	asrs	r1, r3, #5
 8009998:	f003 021f 	and.w	r2, r3, #31
 800999c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80099a0:	f04f 0a01 	mov.w	sl, #1
 80099a4:	fa0a f202 	lsl.w	r2, sl, r2
 80099a8:	420a      	tst	r2, r1
 80099aa:	d009      	beq.n	80099c0 <__gethex+0x1f8>
 80099ac:	4553      	cmp	r3, sl
 80099ae:	dd05      	ble.n	80099bc <__gethex+0x1f4>
 80099b0:	1eb9      	subs	r1, r7, #2
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 fec8 	bl	800a748 <__any_on>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d145      	bne.n	8009a48 <__gethex+0x280>
 80099bc:	f04f 0a02 	mov.w	sl, #2
 80099c0:	4639      	mov	r1, r7
 80099c2:	4620      	mov	r0, r4
 80099c4:	f7ff fe98 	bl	80096f8 <rshift>
 80099c8:	443d      	add	r5, r7
 80099ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099ce:	42ab      	cmp	r3, r5
 80099d0:	da4c      	bge.n	8009a6c <__gethex+0x2a4>
 80099d2:	ee18 0a10 	vmov	r0, s16
 80099d6:	4621      	mov	r1, r4
 80099d8:	f000 fa5c 	bl	8009e94 <_Bfree>
 80099dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099de:	2300      	movs	r3, #0
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	27a3      	movs	r7, #163	; 0xa3
 80099e4:	e785      	b.n	80098f2 <__gethex+0x12a>
 80099e6:	1e73      	subs	r3, r6, #1
 80099e8:	9a05      	ldr	r2, [sp, #20]
 80099ea:	9303      	str	r3, [sp, #12]
 80099ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d019      	beq.n	8009a28 <__gethex+0x260>
 80099f4:	f1bb 0f20 	cmp.w	fp, #32
 80099f8:	d107      	bne.n	8009a0a <__gethex+0x242>
 80099fa:	9b02      	ldr	r3, [sp, #8]
 80099fc:	9a00      	ldr	r2, [sp, #0]
 80099fe:	f843 2b04 	str.w	r2, [r3], #4
 8009a02:	9302      	str	r3, [sp, #8]
 8009a04:	2300      	movs	r3, #0
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	469b      	mov	fp, r3
 8009a0a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009a0e:	f7ff fec5 	bl	800979c <__hexdig_fun>
 8009a12:	9b00      	ldr	r3, [sp, #0]
 8009a14:	f000 000f 	and.w	r0, r0, #15
 8009a18:	fa00 f00b 	lsl.w	r0, r0, fp
 8009a1c:	4303      	orrs	r3, r0
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	f10b 0b04 	add.w	fp, fp, #4
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	e00d      	b.n	8009a44 <__gethex+0x27c>
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	9a06      	ldr	r2, [sp, #24]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	42bb      	cmp	r3, r7
 8009a30:	d3e0      	bcc.n	80099f4 <__gethex+0x22c>
 8009a32:	4618      	mov	r0, r3
 8009a34:	9901      	ldr	r1, [sp, #4]
 8009a36:	9307      	str	r3, [sp, #28]
 8009a38:	4652      	mov	r2, sl
 8009a3a:	f001 f8d5 	bl	800abe8 <strncmp>
 8009a3e:	9b07      	ldr	r3, [sp, #28]
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d1d7      	bne.n	80099f4 <__gethex+0x22c>
 8009a44:	461e      	mov	r6, r3
 8009a46:	e78b      	b.n	8009960 <__gethex+0x198>
 8009a48:	f04f 0a03 	mov.w	sl, #3
 8009a4c:	e7b8      	b.n	80099c0 <__gethex+0x1f8>
 8009a4e:	da0a      	bge.n	8009a66 <__gethex+0x29e>
 8009a50:	1a37      	subs	r7, r6, r0
 8009a52:	4621      	mov	r1, r4
 8009a54:	ee18 0a10 	vmov	r0, s16
 8009a58:	463a      	mov	r2, r7
 8009a5a:	f000 fc37 	bl	800a2cc <__lshift>
 8009a5e:	1bed      	subs	r5, r5, r7
 8009a60:	4604      	mov	r4, r0
 8009a62:	f100 0914 	add.w	r9, r0, #20
 8009a66:	f04f 0a00 	mov.w	sl, #0
 8009a6a:	e7ae      	b.n	80099ca <__gethex+0x202>
 8009a6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a70:	42a8      	cmp	r0, r5
 8009a72:	dd72      	ble.n	8009b5a <__gethex+0x392>
 8009a74:	1b45      	subs	r5, r0, r5
 8009a76:	42ae      	cmp	r6, r5
 8009a78:	dc36      	bgt.n	8009ae8 <__gethex+0x320>
 8009a7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d02a      	beq.n	8009ad8 <__gethex+0x310>
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d02c      	beq.n	8009ae0 <__gethex+0x318>
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d115      	bne.n	8009ab6 <__gethex+0x2ee>
 8009a8a:	42ae      	cmp	r6, r5
 8009a8c:	d113      	bne.n	8009ab6 <__gethex+0x2ee>
 8009a8e:	2e01      	cmp	r6, #1
 8009a90:	d10b      	bne.n	8009aaa <__gethex+0x2e2>
 8009a92:	9a04      	ldr	r2, [sp, #16]
 8009a94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	6123      	str	r3, [r4, #16]
 8009a9e:	f8c9 3000 	str.w	r3, [r9]
 8009aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009aa4:	2762      	movs	r7, #98	; 0x62
 8009aa6:	601c      	str	r4, [r3, #0]
 8009aa8:	e723      	b.n	80098f2 <__gethex+0x12a>
 8009aaa:	1e71      	subs	r1, r6, #1
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 fe4b 	bl	800a748 <__any_on>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d1ed      	bne.n	8009a92 <__gethex+0x2ca>
 8009ab6:	ee18 0a10 	vmov	r0, s16
 8009aba:	4621      	mov	r1, r4
 8009abc:	f000 f9ea 	bl	8009e94 <_Bfree>
 8009ac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	2750      	movs	r7, #80	; 0x50
 8009ac8:	e713      	b.n	80098f2 <__gethex+0x12a>
 8009aca:	bf00      	nop
 8009acc:	0800c800 	.word	0x0800c800
 8009ad0:	0800c784 	.word	0x0800c784
 8009ad4:	0800c795 	.word	0x0800c795
 8009ad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1eb      	bne.n	8009ab6 <__gethex+0x2ee>
 8009ade:	e7d8      	b.n	8009a92 <__gethex+0x2ca>
 8009ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1d5      	bne.n	8009a92 <__gethex+0x2ca>
 8009ae6:	e7e6      	b.n	8009ab6 <__gethex+0x2ee>
 8009ae8:	1e6f      	subs	r7, r5, #1
 8009aea:	f1ba 0f00 	cmp.w	sl, #0
 8009aee:	d131      	bne.n	8009b54 <__gethex+0x38c>
 8009af0:	b127      	cbz	r7, 8009afc <__gethex+0x334>
 8009af2:	4639      	mov	r1, r7
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 fe27 	bl	800a748 <__any_on>
 8009afa:	4682      	mov	sl, r0
 8009afc:	117b      	asrs	r3, r7, #5
 8009afe:	2101      	movs	r1, #1
 8009b00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009b04:	f007 071f 	and.w	r7, r7, #31
 8009b08:	fa01 f707 	lsl.w	r7, r1, r7
 8009b0c:	421f      	tst	r7, r3
 8009b0e:	4629      	mov	r1, r5
 8009b10:	4620      	mov	r0, r4
 8009b12:	bf18      	it	ne
 8009b14:	f04a 0a02 	orrne.w	sl, sl, #2
 8009b18:	1b76      	subs	r6, r6, r5
 8009b1a:	f7ff fded 	bl	80096f8 <rshift>
 8009b1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b22:	2702      	movs	r7, #2
 8009b24:	f1ba 0f00 	cmp.w	sl, #0
 8009b28:	d048      	beq.n	8009bbc <__gethex+0x3f4>
 8009b2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d015      	beq.n	8009b5e <__gethex+0x396>
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d017      	beq.n	8009b66 <__gethex+0x39e>
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d109      	bne.n	8009b4e <__gethex+0x386>
 8009b3a:	f01a 0f02 	tst.w	sl, #2
 8009b3e:	d006      	beq.n	8009b4e <__gethex+0x386>
 8009b40:	f8d9 0000 	ldr.w	r0, [r9]
 8009b44:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b48:	f01a 0f01 	tst.w	sl, #1
 8009b4c:	d10e      	bne.n	8009b6c <__gethex+0x3a4>
 8009b4e:	f047 0710 	orr.w	r7, r7, #16
 8009b52:	e033      	b.n	8009bbc <__gethex+0x3f4>
 8009b54:	f04f 0a01 	mov.w	sl, #1
 8009b58:	e7d0      	b.n	8009afc <__gethex+0x334>
 8009b5a:	2701      	movs	r7, #1
 8009b5c:	e7e2      	b.n	8009b24 <__gethex+0x35c>
 8009b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b60:	f1c3 0301 	rsb	r3, r3, #1
 8009b64:	9315      	str	r3, [sp, #84]	; 0x54
 8009b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0f0      	beq.n	8009b4e <__gethex+0x386>
 8009b6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b70:	f104 0314 	add.w	r3, r4, #20
 8009b74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b7c:	f04f 0c00 	mov.w	ip, #0
 8009b80:	4618      	mov	r0, r3
 8009b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b86:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b8a:	d01c      	beq.n	8009bc6 <__gethex+0x3fe>
 8009b8c:	3201      	adds	r2, #1
 8009b8e:	6002      	str	r2, [r0, #0]
 8009b90:	2f02      	cmp	r7, #2
 8009b92:	f104 0314 	add.w	r3, r4, #20
 8009b96:	d13f      	bne.n	8009c18 <__gethex+0x450>
 8009b98:	f8d8 2000 	ldr.w	r2, [r8]
 8009b9c:	3a01      	subs	r2, #1
 8009b9e:	42b2      	cmp	r2, r6
 8009ba0:	d10a      	bne.n	8009bb8 <__gethex+0x3f0>
 8009ba2:	1171      	asrs	r1, r6, #5
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009baa:	f006 061f 	and.w	r6, r6, #31
 8009bae:	fa02 f606 	lsl.w	r6, r2, r6
 8009bb2:	421e      	tst	r6, r3
 8009bb4:	bf18      	it	ne
 8009bb6:	4617      	movne	r7, r2
 8009bb8:	f047 0720 	orr.w	r7, r7, #32
 8009bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bbe:	601c      	str	r4, [r3, #0]
 8009bc0:	9b04      	ldr	r3, [sp, #16]
 8009bc2:	601d      	str	r5, [r3, #0]
 8009bc4:	e695      	b.n	80098f2 <__gethex+0x12a>
 8009bc6:	4299      	cmp	r1, r3
 8009bc8:	f843 cc04 	str.w	ip, [r3, #-4]
 8009bcc:	d8d8      	bhi.n	8009b80 <__gethex+0x3b8>
 8009bce:	68a3      	ldr	r3, [r4, #8]
 8009bd0:	459b      	cmp	fp, r3
 8009bd2:	db19      	blt.n	8009c08 <__gethex+0x440>
 8009bd4:	6861      	ldr	r1, [r4, #4]
 8009bd6:	ee18 0a10 	vmov	r0, s16
 8009bda:	3101      	adds	r1, #1
 8009bdc:	f000 f91a 	bl	8009e14 <_Balloc>
 8009be0:	4681      	mov	r9, r0
 8009be2:	b918      	cbnz	r0, 8009bec <__gethex+0x424>
 8009be4:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <__gethex+0x488>)
 8009be6:	4602      	mov	r2, r0
 8009be8:	2184      	movs	r1, #132	; 0x84
 8009bea:	e6a8      	b.n	800993e <__gethex+0x176>
 8009bec:	6922      	ldr	r2, [r4, #16]
 8009bee:	3202      	adds	r2, #2
 8009bf0:	f104 010c 	add.w	r1, r4, #12
 8009bf4:	0092      	lsls	r2, r2, #2
 8009bf6:	300c      	adds	r0, #12
 8009bf8:	f7fd f99a 	bl	8006f30 <memcpy>
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	ee18 0a10 	vmov	r0, s16
 8009c02:	f000 f947 	bl	8009e94 <_Bfree>
 8009c06:	464c      	mov	r4, r9
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c10:	6122      	str	r2, [r4, #16]
 8009c12:	2201      	movs	r2, #1
 8009c14:	615a      	str	r2, [r3, #20]
 8009c16:	e7bb      	b.n	8009b90 <__gethex+0x3c8>
 8009c18:	6922      	ldr	r2, [r4, #16]
 8009c1a:	455a      	cmp	r2, fp
 8009c1c:	dd0b      	ble.n	8009c36 <__gethex+0x46e>
 8009c1e:	2101      	movs	r1, #1
 8009c20:	4620      	mov	r0, r4
 8009c22:	f7ff fd69 	bl	80096f8 <rshift>
 8009c26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c2a:	3501      	adds	r5, #1
 8009c2c:	42ab      	cmp	r3, r5
 8009c2e:	f6ff aed0 	blt.w	80099d2 <__gethex+0x20a>
 8009c32:	2701      	movs	r7, #1
 8009c34:	e7c0      	b.n	8009bb8 <__gethex+0x3f0>
 8009c36:	f016 061f 	ands.w	r6, r6, #31
 8009c3a:	d0fa      	beq.n	8009c32 <__gethex+0x46a>
 8009c3c:	449a      	add	sl, r3
 8009c3e:	f1c6 0620 	rsb	r6, r6, #32
 8009c42:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009c46:	f000 f9db 	bl	800a000 <__hi0bits>
 8009c4a:	42b0      	cmp	r0, r6
 8009c4c:	dbe7      	blt.n	8009c1e <__gethex+0x456>
 8009c4e:	e7f0      	b.n	8009c32 <__gethex+0x46a>
 8009c50:	0800c784 	.word	0x0800c784

08009c54 <L_shift>:
 8009c54:	f1c2 0208 	rsb	r2, r2, #8
 8009c58:	0092      	lsls	r2, r2, #2
 8009c5a:	b570      	push	{r4, r5, r6, lr}
 8009c5c:	f1c2 0620 	rsb	r6, r2, #32
 8009c60:	6843      	ldr	r3, [r0, #4]
 8009c62:	6804      	ldr	r4, [r0, #0]
 8009c64:	fa03 f506 	lsl.w	r5, r3, r6
 8009c68:	432c      	orrs	r4, r5
 8009c6a:	40d3      	lsrs	r3, r2
 8009c6c:	6004      	str	r4, [r0, #0]
 8009c6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c72:	4288      	cmp	r0, r1
 8009c74:	d3f4      	bcc.n	8009c60 <L_shift+0xc>
 8009c76:	bd70      	pop	{r4, r5, r6, pc}

08009c78 <__match>:
 8009c78:	b530      	push	{r4, r5, lr}
 8009c7a:	6803      	ldr	r3, [r0, #0]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c82:	b914      	cbnz	r4, 8009c8a <__match+0x12>
 8009c84:	6003      	str	r3, [r0, #0]
 8009c86:	2001      	movs	r0, #1
 8009c88:	bd30      	pop	{r4, r5, pc}
 8009c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c92:	2d19      	cmp	r5, #25
 8009c94:	bf98      	it	ls
 8009c96:	3220      	addls	r2, #32
 8009c98:	42a2      	cmp	r2, r4
 8009c9a:	d0f0      	beq.n	8009c7e <__match+0x6>
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	e7f3      	b.n	8009c88 <__match+0x10>

08009ca0 <__hexnan>:
 8009ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca4:	680b      	ldr	r3, [r1, #0]
 8009ca6:	6801      	ldr	r1, [r0, #0]
 8009ca8:	115e      	asrs	r6, r3, #5
 8009caa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cae:	f013 031f 	ands.w	r3, r3, #31
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	bf18      	it	ne
 8009cb6:	3604      	addne	r6, #4
 8009cb8:	2500      	movs	r5, #0
 8009cba:	1f37      	subs	r7, r6, #4
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	4690      	mov	r8, r2
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009cc6:	46b9      	mov	r9, r7
 8009cc8:	463c      	mov	r4, r7
 8009cca:	9502      	str	r5, [sp, #8]
 8009ccc:	46ab      	mov	fp, r5
 8009cce:	784a      	ldrb	r2, [r1, #1]
 8009cd0:	1c4b      	adds	r3, r1, #1
 8009cd2:	9303      	str	r3, [sp, #12]
 8009cd4:	b342      	cbz	r2, 8009d28 <__hexnan+0x88>
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	9105      	str	r1, [sp, #20]
 8009cda:	9204      	str	r2, [sp, #16]
 8009cdc:	f7ff fd5e 	bl	800979c <__hexdig_fun>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d14f      	bne.n	8009d84 <__hexnan+0xe4>
 8009ce4:	9a04      	ldr	r2, [sp, #16]
 8009ce6:	9905      	ldr	r1, [sp, #20]
 8009ce8:	2a20      	cmp	r2, #32
 8009cea:	d818      	bhi.n	8009d1e <__hexnan+0x7e>
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	459b      	cmp	fp, r3
 8009cf0:	dd13      	ble.n	8009d1a <__hexnan+0x7a>
 8009cf2:	454c      	cmp	r4, r9
 8009cf4:	d206      	bcs.n	8009d04 <__hexnan+0x64>
 8009cf6:	2d07      	cmp	r5, #7
 8009cf8:	dc04      	bgt.n	8009d04 <__hexnan+0x64>
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7ff ffa8 	bl	8009c54 <L_shift>
 8009d04:	4544      	cmp	r4, r8
 8009d06:	d950      	bls.n	8009daa <__hexnan+0x10a>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f1a4 0904 	sub.w	r9, r4, #4
 8009d0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d12:	f8cd b008 	str.w	fp, [sp, #8]
 8009d16:	464c      	mov	r4, r9
 8009d18:	461d      	mov	r5, r3
 8009d1a:	9903      	ldr	r1, [sp, #12]
 8009d1c:	e7d7      	b.n	8009cce <__hexnan+0x2e>
 8009d1e:	2a29      	cmp	r2, #41	; 0x29
 8009d20:	d156      	bne.n	8009dd0 <__hexnan+0x130>
 8009d22:	3102      	adds	r1, #2
 8009d24:	f8ca 1000 	str.w	r1, [sl]
 8009d28:	f1bb 0f00 	cmp.w	fp, #0
 8009d2c:	d050      	beq.n	8009dd0 <__hexnan+0x130>
 8009d2e:	454c      	cmp	r4, r9
 8009d30:	d206      	bcs.n	8009d40 <__hexnan+0xa0>
 8009d32:	2d07      	cmp	r5, #7
 8009d34:	dc04      	bgt.n	8009d40 <__hexnan+0xa0>
 8009d36:	462a      	mov	r2, r5
 8009d38:	4649      	mov	r1, r9
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f7ff ff8a 	bl	8009c54 <L_shift>
 8009d40:	4544      	cmp	r4, r8
 8009d42:	d934      	bls.n	8009dae <__hexnan+0x10e>
 8009d44:	f1a8 0204 	sub.w	r2, r8, #4
 8009d48:	4623      	mov	r3, r4
 8009d4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d52:	429f      	cmp	r7, r3
 8009d54:	d2f9      	bcs.n	8009d4a <__hexnan+0xaa>
 8009d56:	1b3b      	subs	r3, r7, r4
 8009d58:	f023 0303 	bic.w	r3, r3, #3
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	3401      	adds	r4, #1
 8009d60:	3e03      	subs	r6, #3
 8009d62:	42b4      	cmp	r4, r6
 8009d64:	bf88      	it	hi
 8009d66:	2304      	movhi	r3, #4
 8009d68:	4443      	add	r3, r8
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f843 2b04 	str.w	r2, [r3], #4
 8009d70:	429f      	cmp	r7, r3
 8009d72:	d2fb      	bcs.n	8009d6c <__hexnan+0xcc>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	b91b      	cbnz	r3, 8009d80 <__hexnan+0xe0>
 8009d78:	4547      	cmp	r7, r8
 8009d7a:	d127      	bne.n	8009dcc <__hexnan+0x12c>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	2005      	movs	r0, #5
 8009d82:	e026      	b.n	8009dd2 <__hexnan+0x132>
 8009d84:	3501      	adds	r5, #1
 8009d86:	2d08      	cmp	r5, #8
 8009d88:	f10b 0b01 	add.w	fp, fp, #1
 8009d8c:	dd06      	ble.n	8009d9c <__hexnan+0xfc>
 8009d8e:	4544      	cmp	r4, r8
 8009d90:	d9c3      	bls.n	8009d1a <__hexnan+0x7a>
 8009d92:	2300      	movs	r3, #0
 8009d94:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d98:	2501      	movs	r5, #1
 8009d9a:	3c04      	subs	r4, #4
 8009d9c:	6822      	ldr	r2, [r4, #0]
 8009d9e:	f000 000f 	and.w	r0, r0, #15
 8009da2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009da6:	6022      	str	r2, [r4, #0]
 8009da8:	e7b7      	b.n	8009d1a <__hexnan+0x7a>
 8009daa:	2508      	movs	r5, #8
 8009dac:	e7b5      	b.n	8009d1a <__hexnan+0x7a>
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d0df      	beq.n	8009d74 <__hexnan+0xd4>
 8009db4:	f04f 32ff 	mov.w	r2, #4294967295
 8009db8:	f1c3 0320 	rsb	r3, r3, #32
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009dc4:	401a      	ands	r2, r3
 8009dc6:	f846 2c04 	str.w	r2, [r6, #-4]
 8009dca:	e7d3      	b.n	8009d74 <__hexnan+0xd4>
 8009dcc:	3f04      	subs	r7, #4
 8009dce:	e7d1      	b.n	8009d74 <__hexnan+0xd4>
 8009dd0:	2004      	movs	r0, #4
 8009dd2:	b007      	add	sp, #28
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dd8 <_localeconv_r>:
 8009dd8:	4800      	ldr	r0, [pc, #0]	; (8009ddc <_localeconv_r+0x4>)
 8009dda:	4770      	bx	lr
 8009ddc:	20000170 	.word	0x20000170

08009de0 <malloc>:
 8009de0:	4b02      	ldr	r3, [pc, #8]	; (8009dec <malloc+0xc>)
 8009de2:	4601      	mov	r1, r0
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f000 bd2f 	b.w	800a848 <_malloc_r>
 8009dea:	bf00      	nop
 8009dec:	20000018 	.word	0x20000018

08009df0 <__ascii_mbtowc>:
 8009df0:	b082      	sub	sp, #8
 8009df2:	b901      	cbnz	r1, 8009df6 <__ascii_mbtowc+0x6>
 8009df4:	a901      	add	r1, sp, #4
 8009df6:	b142      	cbz	r2, 8009e0a <__ascii_mbtowc+0x1a>
 8009df8:	b14b      	cbz	r3, 8009e0e <__ascii_mbtowc+0x1e>
 8009dfa:	7813      	ldrb	r3, [r2, #0]
 8009dfc:	600b      	str	r3, [r1, #0]
 8009dfe:	7812      	ldrb	r2, [r2, #0]
 8009e00:	1e10      	subs	r0, r2, #0
 8009e02:	bf18      	it	ne
 8009e04:	2001      	movne	r0, #1
 8009e06:	b002      	add	sp, #8
 8009e08:	4770      	bx	lr
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	e7fb      	b.n	8009e06 <__ascii_mbtowc+0x16>
 8009e0e:	f06f 0001 	mvn.w	r0, #1
 8009e12:	e7f8      	b.n	8009e06 <__ascii_mbtowc+0x16>

08009e14 <_Balloc>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e18:	4604      	mov	r4, r0
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	b976      	cbnz	r6, 8009e3c <_Balloc+0x28>
 8009e1e:	2010      	movs	r0, #16
 8009e20:	f7ff ffde 	bl	8009de0 <malloc>
 8009e24:	4602      	mov	r2, r0
 8009e26:	6260      	str	r0, [r4, #36]	; 0x24
 8009e28:	b920      	cbnz	r0, 8009e34 <_Balloc+0x20>
 8009e2a:	4b18      	ldr	r3, [pc, #96]	; (8009e8c <_Balloc+0x78>)
 8009e2c:	4818      	ldr	r0, [pc, #96]	; (8009e90 <_Balloc+0x7c>)
 8009e2e:	2166      	movs	r1, #102	; 0x66
 8009e30:	f000 fefa 	bl	800ac28 <__assert_func>
 8009e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e38:	6006      	str	r6, [r0, #0]
 8009e3a:	60c6      	str	r6, [r0, #12]
 8009e3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e3e:	68f3      	ldr	r3, [r6, #12]
 8009e40:	b183      	cbz	r3, 8009e64 <_Balloc+0x50>
 8009e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e4a:	b9b8      	cbnz	r0, 8009e7c <_Balloc+0x68>
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	fa01 f605 	lsl.w	r6, r1, r5
 8009e52:	1d72      	adds	r2, r6, #5
 8009e54:	0092      	lsls	r2, r2, #2
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 fc97 	bl	800a78a <_calloc_r>
 8009e5c:	b160      	cbz	r0, 8009e78 <_Balloc+0x64>
 8009e5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e62:	e00e      	b.n	8009e82 <_Balloc+0x6e>
 8009e64:	2221      	movs	r2, #33	; 0x21
 8009e66:	2104      	movs	r1, #4
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f000 fc8e 	bl	800a78a <_calloc_r>
 8009e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e70:	60f0      	str	r0, [r6, #12]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e4      	bne.n	8009e42 <_Balloc+0x2e>
 8009e78:	2000      	movs	r0, #0
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	6802      	ldr	r2, [r0, #0]
 8009e7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e82:	2300      	movs	r3, #0
 8009e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e88:	e7f7      	b.n	8009e7a <_Balloc+0x66>
 8009e8a:	bf00      	nop
 8009e8c:	0800c70e 	.word	0x0800c70e
 8009e90:	0800c814 	.word	0x0800c814

08009e94 <_Bfree>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e98:	4605      	mov	r5, r0
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	b976      	cbnz	r6, 8009ebc <_Bfree+0x28>
 8009e9e:	2010      	movs	r0, #16
 8009ea0:	f7ff ff9e 	bl	8009de0 <malloc>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ea8:	b920      	cbnz	r0, 8009eb4 <_Bfree+0x20>
 8009eaa:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <_Bfree+0x3c>)
 8009eac:	4809      	ldr	r0, [pc, #36]	; (8009ed4 <_Bfree+0x40>)
 8009eae:	218a      	movs	r1, #138	; 0x8a
 8009eb0:	f000 feba 	bl	800ac28 <__assert_func>
 8009eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009eb8:	6006      	str	r6, [r0, #0]
 8009eba:	60c6      	str	r6, [r0, #12]
 8009ebc:	b13c      	cbz	r4, 8009ece <_Bfree+0x3a>
 8009ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ec0:	6862      	ldr	r2, [r4, #4]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ec8:	6021      	str	r1, [r4, #0]
 8009eca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	0800c70e 	.word	0x0800c70e
 8009ed4:	0800c814 	.word	0x0800c814

08009ed8 <__multadd>:
 8009ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009edc:	690e      	ldr	r6, [r1, #16]
 8009ede:	4607      	mov	r7, r0
 8009ee0:	4698      	mov	r8, r3
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f101 0014 	add.w	r0, r1, #20
 8009ee8:	2300      	movs	r3, #0
 8009eea:	6805      	ldr	r5, [r0, #0]
 8009eec:	b2a9      	uxth	r1, r5
 8009eee:	fb02 8101 	mla	r1, r2, r1, r8
 8009ef2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009ef6:	0c2d      	lsrs	r5, r5, #16
 8009ef8:	fb02 c505 	mla	r5, r2, r5, ip
 8009efc:	b289      	uxth	r1, r1
 8009efe:	3301      	adds	r3, #1
 8009f00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009f04:	429e      	cmp	r6, r3
 8009f06:	f840 1b04 	str.w	r1, [r0], #4
 8009f0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009f0e:	dcec      	bgt.n	8009eea <__multadd+0x12>
 8009f10:	f1b8 0f00 	cmp.w	r8, #0
 8009f14:	d022      	beq.n	8009f5c <__multadd+0x84>
 8009f16:	68a3      	ldr	r3, [r4, #8]
 8009f18:	42b3      	cmp	r3, r6
 8009f1a:	dc19      	bgt.n	8009f50 <__multadd+0x78>
 8009f1c:	6861      	ldr	r1, [r4, #4]
 8009f1e:	4638      	mov	r0, r7
 8009f20:	3101      	adds	r1, #1
 8009f22:	f7ff ff77 	bl	8009e14 <_Balloc>
 8009f26:	4605      	mov	r5, r0
 8009f28:	b928      	cbnz	r0, 8009f36 <__multadd+0x5e>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <__multadd+0x8c>)
 8009f2e:	480e      	ldr	r0, [pc, #56]	; (8009f68 <__multadd+0x90>)
 8009f30:	21b5      	movs	r1, #181	; 0xb5
 8009f32:	f000 fe79 	bl	800ac28 <__assert_func>
 8009f36:	6922      	ldr	r2, [r4, #16]
 8009f38:	3202      	adds	r2, #2
 8009f3a:	f104 010c 	add.w	r1, r4, #12
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	300c      	adds	r0, #12
 8009f42:	f7fc fff5 	bl	8006f30 <memcpy>
 8009f46:	4621      	mov	r1, r4
 8009f48:	4638      	mov	r0, r7
 8009f4a:	f7ff ffa3 	bl	8009e94 <_Bfree>
 8009f4e:	462c      	mov	r4, r5
 8009f50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009f54:	3601      	adds	r6, #1
 8009f56:	f8c3 8014 	str.w	r8, [r3, #20]
 8009f5a:	6126      	str	r6, [r4, #16]
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f62:	bf00      	nop
 8009f64:	0800c784 	.word	0x0800c784
 8009f68:	0800c814 	.word	0x0800c814

08009f6c <__s2b>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	460c      	mov	r4, r1
 8009f72:	4615      	mov	r5, r2
 8009f74:	461f      	mov	r7, r3
 8009f76:	2209      	movs	r2, #9
 8009f78:	3308      	adds	r3, #8
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f80:	2100      	movs	r1, #0
 8009f82:	2201      	movs	r2, #1
 8009f84:	429a      	cmp	r2, r3
 8009f86:	db09      	blt.n	8009f9c <__s2b+0x30>
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff ff43 	bl	8009e14 <_Balloc>
 8009f8e:	b940      	cbnz	r0, 8009fa2 <__s2b+0x36>
 8009f90:	4602      	mov	r2, r0
 8009f92:	4b19      	ldr	r3, [pc, #100]	; (8009ff8 <__s2b+0x8c>)
 8009f94:	4819      	ldr	r0, [pc, #100]	; (8009ffc <__s2b+0x90>)
 8009f96:	21ce      	movs	r1, #206	; 0xce
 8009f98:	f000 fe46 	bl	800ac28 <__assert_func>
 8009f9c:	0052      	lsls	r2, r2, #1
 8009f9e:	3101      	adds	r1, #1
 8009fa0:	e7f0      	b.n	8009f84 <__s2b+0x18>
 8009fa2:	9b08      	ldr	r3, [sp, #32]
 8009fa4:	6143      	str	r3, [r0, #20]
 8009fa6:	2d09      	cmp	r5, #9
 8009fa8:	f04f 0301 	mov.w	r3, #1
 8009fac:	6103      	str	r3, [r0, #16]
 8009fae:	dd16      	ble.n	8009fde <__s2b+0x72>
 8009fb0:	f104 0909 	add.w	r9, r4, #9
 8009fb4:	46c8      	mov	r8, r9
 8009fb6:	442c      	add	r4, r5
 8009fb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fbc:	4601      	mov	r1, r0
 8009fbe:	3b30      	subs	r3, #48	; 0x30
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f7ff ff88 	bl	8009ed8 <__multadd>
 8009fc8:	45a0      	cmp	r8, r4
 8009fca:	d1f5      	bne.n	8009fb8 <__s2b+0x4c>
 8009fcc:	f1a5 0408 	sub.w	r4, r5, #8
 8009fd0:	444c      	add	r4, r9
 8009fd2:	1b2d      	subs	r5, r5, r4
 8009fd4:	1963      	adds	r3, r4, r5
 8009fd6:	42bb      	cmp	r3, r7
 8009fd8:	db04      	blt.n	8009fe4 <__s2b+0x78>
 8009fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fde:	340a      	adds	r4, #10
 8009fe0:	2509      	movs	r5, #9
 8009fe2:	e7f6      	b.n	8009fd2 <__s2b+0x66>
 8009fe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fe8:	4601      	mov	r1, r0
 8009fea:	3b30      	subs	r3, #48	; 0x30
 8009fec:	220a      	movs	r2, #10
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f7ff ff72 	bl	8009ed8 <__multadd>
 8009ff4:	e7ee      	b.n	8009fd4 <__s2b+0x68>
 8009ff6:	bf00      	nop
 8009ff8:	0800c784 	.word	0x0800c784
 8009ffc:	0800c814 	.word	0x0800c814

0800a000 <__hi0bits>:
 800a000:	0c03      	lsrs	r3, r0, #16
 800a002:	041b      	lsls	r3, r3, #16
 800a004:	b9d3      	cbnz	r3, 800a03c <__hi0bits+0x3c>
 800a006:	0400      	lsls	r0, r0, #16
 800a008:	2310      	movs	r3, #16
 800a00a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a00e:	bf04      	itt	eq
 800a010:	0200      	lsleq	r0, r0, #8
 800a012:	3308      	addeq	r3, #8
 800a014:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a018:	bf04      	itt	eq
 800a01a:	0100      	lsleq	r0, r0, #4
 800a01c:	3304      	addeq	r3, #4
 800a01e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a022:	bf04      	itt	eq
 800a024:	0080      	lsleq	r0, r0, #2
 800a026:	3302      	addeq	r3, #2
 800a028:	2800      	cmp	r0, #0
 800a02a:	db05      	blt.n	800a038 <__hi0bits+0x38>
 800a02c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a030:	f103 0301 	add.w	r3, r3, #1
 800a034:	bf08      	it	eq
 800a036:	2320      	moveq	r3, #32
 800a038:	4618      	mov	r0, r3
 800a03a:	4770      	bx	lr
 800a03c:	2300      	movs	r3, #0
 800a03e:	e7e4      	b.n	800a00a <__hi0bits+0xa>

0800a040 <__lo0bits>:
 800a040:	6803      	ldr	r3, [r0, #0]
 800a042:	f013 0207 	ands.w	r2, r3, #7
 800a046:	4601      	mov	r1, r0
 800a048:	d00b      	beq.n	800a062 <__lo0bits+0x22>
 800a04a:	07da      	lsls	r2, r3, #31
 800a04c:	d424      	bmi.n	800a098 <__lo0bits+0x58>
 800a04e:	0798      	lsls	r0, r3, #30
 800a050:	bf49      	itett	mi
 800a052:	085b      	lsrmi	r3, r3, #1
 800a054:	089b      	lsrpl	r3, r3, #2
 800a056:	2001      	movmi	r0, #1
 800a058:	600b      	strmi	r3, [r1, #0]
 800a05a:	bf5c      	itt	pl
 800a05c:	600b      	strpl	r3, [r1, #0]
 800a05e:	2002      	movpl	r0, #2
 800a060:	4770      	bx	lr
 800a062:	b298      	uxth	r0, r3
 800a064:	b9b0      	cbnz	r0, 800a094 <__lo0bits+0x54>
 800a066:	0c1b      	lsrs	r3, r3, #16
 800a068:	2010      	movs	r0, #16
 800a06a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a06e:	bf04      	itt	eq
 800a070:	0a1b      	lsreq	r3, r3, #8
 800a072:	3008      	addeq	r0, #8
 800a074:	071a      	lsls	r2, r3, #28
 800a076:	bf04      	itt	eq
 800a078:	091b      	lsreq	r3, r3, #4
 800a07a:	3004      	addeq	r0, #4
 800a07c:	079a      	lsls	r2, r3, #30
 800a07e:	bf04      	itt	eq
 800a080:	089b      	lsreq	r3, r3, #2
 800a082:	3002      	addeq	r0, #2
 800a084:	07da      	lsls	r2, r3, #31
 800a086:	d403      	bmi.n	800a090 <__lo0bits+0x50>
 800a088:	085b      	lsrs	r3, r3, #1
 800a08a:	f100 0001 	add.w	r0, r0, #1
 800a08e:	d005      	beq.n	800a09c <__lo0bits+0x5c>
 800a090:	600b      	str	r3, [r1, #0]
 800a092:	4770      	bx	lr
 800a094:	4610      	mov	r0, r2
 800a096:	e7e8      	b.n	800a06a <__lo0bits+0x2a>
 800a098:	2000      	movs	r0, #0
 800a09a:	4770      	bx	lr
 800a09c:	2020      	movs	r0, #32
 800a09e:	4770      	bx	lr

0800a0a0 <__i2b>:
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	f7ff feb5 	bl	8009e14 <_Balloc>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	b928      	cbnz	r0, 800a0ba <__i2b+0x1a>
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <__i2b+0x24>)
 800a0b0:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <__i2b+0x28>)
 800a0b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0b6:	f000 fdb7 	bl	800ac28 <__assert_func>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	6144      	str	r4, [r0, #20]
 800a0be:	6103      	str	r3, [r0, #16]
 800a0c0:	bd10      	pop	{r4, pc}
 800a0c2:	bf00      	nop
 800a0c4:	0800c784 	.word	0x0800c784
 800a0c8:	0800c814 	.word	0x0800c814

0800a0cc <__multiply>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	4614      	mov	r4, r2
 800a0d2:	690a      	ldr	r2, [r1, #16]
 800a0d4:	6923      	ldr	r3, [r4, #16]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	bfb8      	it	lt
 800a0da:	460b      	movlt	r3, r1
 800a0dc:	460d      	mov	r5, r1
 800a0de:	bfbc      	itt	lt
 800a0e0:	4625      	movlt	r5, r4
 800a0e2:	461c      	movlt	r4, r3
 800a0e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a0e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a0ec:	68ab      	ldr	r3, [r5, #8]
 800a0ee:	6869      	ldr	r1, [r5, #4]
 800a0f0:	eb0a 0709 	add.w	r7, sl, r9
 800a0f4:	42bb      	cmp	r3, r7
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	bfb8      	it	lt
 800a0fa:	3101      	addlt	r1, #1
 800a0fc:	f7ff fe8a 	bl	8009e14 <_Balloc>
 800a100:	b930      	cbnz	r0, 800a110 <__multiply+0x44>
 800a102:	4602      	mov	r2, r0
 800a104:	4b42      	ldr	r3, [pc, #264]	; (800a210 <__multiply+0x144>)
 800a106:	4843      	ldr	r0, [pc, #268]	; (800a214 <__multiply+0x148>)
 800a108:	f240 115d 	movw	r1, #349	; 0x15d
 800a10c:	f000 fd8c 	bl	800ac28 <__assert_func>
 800a110:	f100 0614 	add.w	r6, r0, #20
 800a114:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a118:	4633      	mov	r3, r6
 800a11a:	2200      	movs	r2, #0
 800a11c:	4543      	cmp	r3, r8
 800a11e:	d31e      	bcc.n	800a15e <__multiply+0x92>
 800a120:	f105 0c14 	add.w	ip, r5, #20
 800a124:	f104 0314 	add.w	r3, r4, #20
 800a128:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a12c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a130:	9202      	str	r2, [sp, #8]
 800a132:	ebac 0205 	sub.w	r2, ip, r5
 800a136:	3a15      	subs	r2, #21
 800a138:	f022 0203 	bic.w	r2, r2, #3
 800a13c:	3204      	adds	r2, #4
 800a13e:	f105 0115 	add.w	r1, r5, #21
 800a142:	458c      	cmp	ip, r1
 800a144:	bf38      	it	cc
 800a146:	2204      	movcc	r2, #4
 800a148:	9201      	str	r2, [sp, #4]
 800a14a:	9a02      	ldr	r2, [sp, #8]
 800a14c:	9303      	str	r3, [sp, #12]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d808      	bhi.n	800a164 <__multiply+0x98>
 800a152:	2f00      	cmp	r7, #0
 800a154:	dc55      	bgt.n	800a202 <__multiply+0x136>
 800a156:	6107      	str	r7, [r0, #16]
 800a158:	b005      	add	sp, #20
 800a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15e:	f843 2b04 	str.w	r2, [r3], #4
 800a162:	e7db      	b.n	800a11c <__multiply+0x50>
 800a164:	f8b3 a000 	ldrh.w	sl, [r3]
 800a168:	f1ba 0f00 	cmp.w	sl, #0
 800a16c:	d020      	beq.n	800a1b0 <__multiply+0xe4>
 800a16e:	f105 0e14 	add.w	lr, r5, #20
 800a172:	46b1      	mov	r9, r6
 800a174:	2200      	movs	r2, #0
 800a176:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a17a:	f8d9 b000 	ldr.w	fp, [r9]
 800a17e:	b2a1      	uxth	r1, r4
 800a180:	fa1f fb8b 	uxth.w	fp, fp
 800a184:	fb0a b101 	mla	r1, sl, r1, fp
 800a188:	4411      	add	r1, r2
 800a18a:	f8d9 2000 	ldr.w	r2, [r9]
 800a18e:	0c24      	lsrs	r4, r4, #16
 800a190:	0c12      	lsrs	r2, r2, #16
 800a192:	fb0a 2404 	mla	r4, sl, r4, r2
 800a196:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a19a:	b289      	uxth	r1, r1
 800a19c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a1a0:	45f4      	cmp	ip, lr
 800a1a2:	f849 1b04 	str.w	r1, [r9], #4
 800a1a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a1aa:	d8e4      	bhi.n	800a176 <__multiply+0xaa>
 800a1ac:	9901      	ldr	r1, [sp, #4]
 800a1ae:	5072      	str	r2, [r6, r1]
 800a1b0:	9a03      	ldr	r2, [sp, #12]
 800a1b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	f1b9 0f00 	cmp.w	r9, #0
 800a1bc:	d01f      	beq.n	800a1fe <__multiply+0x132>
 800a1be:	6834      	ldr	r4, [r6, #0]
 800a1c0:	f105 0114 	add.w	r1, r5, #20
 800a1c4:	46b6      	mov	lr, r6
 800a1c6:	f04f 0a00 	mov.w	sl, #0
 800a1ca:	880a      	ldrh	r2, [r1, #0]
 800a1cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a1d0:	fb09 b202 	mla	r2, r9, r2, fp
 800a1d4:	4492      	add	sl, r2
 800a1d6:	b2a4      	uxth	r4, r4
 800a1d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a1dc:	f84e 4b04 	str.w	r4, [lr], #4
 800a1e0:	f851 4b04 	ldr.w	r4, [r1], #4
 800a1e4:	f8be 2000 	ldrh.w	r2, [lr]
 800a1e8:	0c24      	lsrs	r4, r4, #16
 800a1ea:	fb09 2404 	mla	r4, r9, r4, r2
 800a1ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a1f2:	458c      	cmp	ip, r1
 800a1f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a1f8:	d8e7      	bhi.n	800a1ca <__multiply+0xfe>
 800a1fa:	9a01      	ldr	r2, [sp, #4]
 800a1fc:	50b4      	str	r4, [r6, r2]
 800a1fe:	3604      	adds	r6, #4
 800a200:	e7a3      	b.n	800a14a <__multiply+0x7e>
 800a202:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1a5      	bne.n	800a156 <__multiply+0x8a>
 800a20a:	3f01      	subs	r7, #1
 800a20c:	e7a1      	b.n	800a152 <__multiply+0x86>
 800a20e:	bf00      	nop
 800a210:	0800c784 	.word	0x0800c784
 800a214:	0800c814 	.word	0x0800c814

0800a218 <__pow5mult>:
 800a218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a21c:	4615      	mov	r5, r2
 800a21e:	f012 0203 	ands.w	r2, r2, #3
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	d007      	beq.n	800a238 <__pow5mult+0x20>
 800a228:	4c25      	ldr	r4, [pc, #148]	; (800a2c0 <__pow5mult+0xa8>)
 800a22a:	3a01      	subs	r2, #1
 800a22c:	2300      	movs	r3, #0
 800a22e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a232:	f7ff fe51 	bl	8009ed8 <__multadd>
 800a236:	4607      	mov	r7, r0
 800a238:	10ad      	asrs	r5, r5, #2
 800a23a:	d03d      	beq.n	800a2b8 <__pow5mult+0xa0>
 800a23c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a23e:	b97c      	cbnz	r4, 800a260 <__pow5mult+0x48>
 800a240:	2010      	movs	r0, #16
 800a242:	f7ff fdcd 	bl	8009de0 <malloc>
 800a246:	4602      	mov	r2, r0
 800a248:	6270      	str	r0, [r6, #36]	; 0x24
 800a24a:	b928      	cbnz	r0, 800a258 <__pow5mult+0x40>
 800a24c:	4b1d      	ldr	r3, [pc, #116]	; (800a2c4 <__pow5mult+0xac>)
 800a24e:	481e      	ldr	r0, [pc, #120]	; (800a2c8 <__pow5mult+0xb0>)
 800a250:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a254:	f000 fce8 	bl	800ac28 <__assert_func>
 800a258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a25c:	6004      	str	r4, [r0, #0]
 800a25e:	60c4      	str	r4, [r0, #12]
 800a260:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a268:	b94c      	cbnz	r4, 800a27e <__pow5mult+0x66>
 800a26a:	f240 2171 	movw	r1, #625	; 0x271
 800a26e:	4630      	mov	r0, r6
 800a270:	f7ff ff16 	bl	800a0a0 <__i2b>
 800a274:	2300      	movs	r3, #0
 800a276:	f8c8 0008 	str.w	r0, [r8, #8]
 800a27a:	4604      	mov	r4, r0
 800a27c:	6003      	str	r3, [r0, #0]
 800a27e:	f04f 0900 	mov.w	r9, #0
 800a282:	07eb      	lsls	r3, r5, #31
 800a284:	d50a      	bpl.n	800a29c <__pow5mult+0x84>
 800a286:	4639      	mov	r1, r7
 800a288:	4622      	mov	r2, r4
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7ff ff1e 	bl	800a0cc <__multiply>
 800a290:	4639      	mov	r1, r7
 800a292:	4680      	mov	r8, r0
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff fdfd 	bl	8009e94 <_Bfree>
 800a29a:	4647      	mov	r7, r8
 800a29c:	106d      	asrs	r5, r5, #1
 800a29e:	d00b      	beq.n	800a2b8 <__pow5mult+0xa0>
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	b938      	cbnz	r0, 800a2b4 <__pow5mult+0x9c>
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7ff ff0f 	bl	800a0cc <__multiply>
 800a2ae:	6020      	str	r0, [r4, #0]
 800a2b0:	f8c0 9000 	str.w	r9, [r0]
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	e7e4      	b.n	800a282 <__pow5mult+0x6a>
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800c968 	.word	0x0800c968
 800a2c4:	0800c70e 	.word	0x0800c70e
 800a2c8:	0800c814 	.word	0x0800c814

0800a2cc <__lshift>:
 800a2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	6849      	ldr	r1, [r1, #4]
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2da:	68a3      	ldr	r3, [r4, #8]
 800a2dc:	4607      	mov	r7, r0
 800a2de:	4691      	mov	r9, r2
 800a2e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2e4:	f108 0601 	add.w	r6, r8, #1
 800a2e8:	42b3      	cmp	r3, r6
 800a2ea:	db0b      	blt.n	800a304 <__lshift+0x38>
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f7ff fd91 	bl	8009e14 <_Balloc>
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	b948      	cbnz	r0, 800a30a <__lshift+0x3e>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	4b28      	ldr	r3, [pc, #160]	; (800a39c <__lshift+0xd0>)
 800a2fa:	4829      	ldr	r0, [pc, #164]	; (800a3a0 <__lshift+0xd4>)
 800a2fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a300:	f000 fc92 	bl	800ac28 <__assert_func>
 800a304:	3101      	adds	r1, #1
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	e7ee      	b.n	800a2e8 <__lshift+0x1c>
 800a30a:	2300      	movs	r3, #0
 800a30c:	f100 0114 	add.w	r1, r0, #20
 800a310:	f100 0210 	add.w	r2, r0, #16
 800a314:	4618      	mov	r0, r3
 800a316:	4553      	cmp	r3, sl
 800a318:	db33      	blt.n	800a382 <__lshift+0xb6>
 800a31a:	6920      	ldr	r0, [r4, #16]
 800a31c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a320:	f104 0314 	add.w	r3, r4, #20
 800a324:	f019 091f 	ands.w	r9, r9, #31
 800a328:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a32c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a330:	d02b      	beq.n	800a38a <__lshift+0xbe>
 800a332:	f1c9 0e20 	rsb	lr, r9, #32
 800a336:	468a      	mov	sl, r1
 800a338:	2200      	movs	r2, #0
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	fa00 f009 	lsl.w	r0, r0, r9
 800a340:	4302      	orrs	r2, r0
 800a342:	f84a 2b04 	str.w	r2, [sl], #4
 800a346:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34a:	459c      	cmp	ip, r3
 800a34c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a350:	d8f3      	bhi.n	800a33a <__lshift+0x6e>
 800a352:	ebac 0304 	sub.w	r3, ip, r4
 800a356:	3b15      	subs	r3, #21
 800a358:	f023 0303 	bic.w	r3, r3, #3
 800a35c:	3304      	adds	r3, #4
 800a35e:	f104 0015 	add.w	r0, r4, #21
 800a362:	4584      	cmp	ip, r0
 800a364:	bf38      	it	cc
 800a366:	2304      	movcc	r3, #4
 800a368:	50ca      	str	r2, [r1, r3]
 800a36a:	b10a      	cbz	r2, 800a370 <__lshift+0xa4>
 800a36c:	f108 0602 	add.w	r6, r8, #2
 800a370:	3e01      	subs	r6, #1
 800a372:	4638      	mov	r0, r7
 800a374:	612e      	str	r6, [r5, #16]
 800a376:	4621      	mov	r1, r4
 800a378:	f7ff fd8c 	bl	8009e94 <_Bfree>
 800a37c:	4628      	mov	r0, r5
 800a37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a382:	f842 0f04 	str.w	r0, [r2, #4]!
 800a386:	3301      	adds	r3, #1
 800a388:	e7c5      	b.n	800a316 <__lshift+0x4a>
 800a38a:	3904      	subs	r1, #4
 800a38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a390:	f841 2f04 	str.w	r2, [r1, #4]!
 800a394:	459c      	cmp	ip, r3
 800a396:	d8f9      	bhi.n	800a38c <__lshift+0xc0>
 800a398:	e7ea      	b.n	800a370 <__lshift+0xa4>
 800a39a:	bf00      	nop
 800a39c:	0800c784 	.word	0x0800c784
 800a3a0:	0800c814 	.word	0x0800c814

0800a3a4 <__mcmp>:
 800a3a4:	b530      	push	{r4, r5, lr}
 800a3a6:	6902      	ldr	r2, [r0, #16]
 800a3a8:	690c      	ldr	r4, [r1, #16]
 800a3aa:	1b12      	subs	r2, r2, r4
 800a3ac:	d10e      	bne.n	800a3cc <__mcmp+0x28>
 800a3ae:	f100 0314 	add.w	r3, r0, #20
 800a3b2:	3114      	adds	r1, #20
 800a3b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3c4:	42a5      	cmp	r5, r4
 800a3c6:	d003      	beq.n	800a3d0 <__mcmp+0x2c>
 800a3c8:	d305      	bcc.n	800a3d6 <__mcmp+0x32>
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	bd30      	pop	{r4, r5, pc}
 800a3d0:	4283      	cmp	r3, r0
 800a3d2:	d3f3      	bcc.n	800a3bc <__mcmp+0x18>
 800a3d4:	e7fa      	b.n	800a3cc <__mcmp+0x28>
 800a3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3da:	e7f7      	b.n	800a3cc <__mcmp+0x28>

0800a3dc <__mdiff>:
 800a3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4617      	mov	r7, r2
 800a3ea:	f7ff ffdb 	bl	800a3a4 <__mcmp>
 800a3ee:	1e05      	subs	r5, r0, #0
 800a3f0:	d110      	bne.n	800a414 <__mdiff+0x38>
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff fd0d 	bl	8009e14 <_Balloc>
 800a3fa:	b930      	cbnz	r0, 800a40a <__mdiff+0x2e>
 800a3fc:	4b39      	ldr	r3, [pc, #228]	; (800a4e4 <__mdiff+0x108>)
 800a3fe:	4602      	mov	r2, r0
 800a400:	f240 2132 	movw	r1, #562	; 0x232
 800a404:	4838      	ldr	r0, [pc, #224]	; (800a4e8 <__mdiff+0x10c>)
 800a406:	f000 fc0f 	bl	800ac28 <__assert_func>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a414:	bfa4      	itt	ge
 800a416:	463b      	movge	r3, r7
 800a418:	4627      	movge	r7, r4
 800a41a:	4630      	mov	r0, r6
 800a41c:	6879      	ldr	r1, [r7, #4]
 800a41e:	bfa6      	itte	ge
 800a420:	461c      	movge	r4, r3
 800a422:	2500      	movge	r5, #0
 800a424:	2501      	movlt	r5, #1
 800a426:	f7ff fcf5 	bl	8009e14 <_Balloc>
 800a42a:	b920      	cbnz	r0, 800a436 <__mdiff+0x5a>
 800a42c:	4b2d      	ldr	r3, [pc, #180]	; (800a4e4 <__mdiff+0x108>)
 800a42e:	4602      	mov	r2, r0
 800a430:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a434:	e7e6      	b.n	800a404 <__mdiff+0x28>
 800a436:	693e      	ldr	r6, [r7, #16]
 800a438:	60c5      	str	r5, [r0, #12]
 800a43a:	6925      	ldr	r5, [r4, #16]
 800a43c:	f107 0114 	add.w	r1, r7, #20
 800a440:	f104 0914 	add.w	r9, r4, #20
 800a444:	f100 0e14 	add.w	lr, r0, #20
 800a448:	f107 0210 	add.w	r2, r7, #16
 800a44c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a450:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a454:	46f2      	mov	sl, lr
 800a456:	2700      	movs	r7, #0
 800a458:	f859 3b04 	ldr.w	r3, [r9], #4
 800a45c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a460:	fa1f f883 	uxth.w	r8, r3
 800a464:	fa17 f78b 	uxtah	r7, r7, fp
 800a468:	0c1b      	lsrs	r3, r3, #16
 800a46a:	eba7 0808 	sub.w	r8, r7, r8
 800a46e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a472:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a476:	fa1f f888 	uxth.w	r8, r8
 800a47a:	141f      	asrs	r7, r3, #16
 800a47c:	454d      	cmp	r5, r9
 800a47e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a482:	f84a 3b04 	str.w	r3, [sl], #4
 800a486:	d8e7      	bhi.n	800a458 <__mdiff+0x7c>
 800a488:	1b2b      	subs	r3, r5, r4
 800a48a:	3b15      	subs	r3, #21
 800a48c:	f023 0303 	bic.w	r3, r3, #3
 800a490:	3304      	adds	r3, #4
 800a492:	3415      	adds	r4, #21
 800a494:	42a5      	cmp	r5, r4
 800a496:	bf38      	it	cc
 800a498:	2304      	movcc	r3, #4
 800a49a:	4419      	add	r1, r3
 800a49c:	4473      	add	r3, lr
 800a49e:	469e      	mov	lr, r3
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	4565      	cmp	r5, ip
 800a4a4:	d30e      	bcc.n	800a4c4 <__mdiff+0xe8>
 800a4a6:	f10c 0203 	add.w	r2, ip, #3
 800a4aa:	1a52      	subs	r2, r2, r1
 800a4ac:	f022 0203 	bic.w	r2, r2, #3
 800a4b0:	3903      	subs	r1, #3
 800a4b2:	458c      	cmp	ip, r1
 800a4b4:	bf38      	it	cc
 800a4b6:	2200      	movcc	r2, #0
 800a4b8:	441a      	add	r2, r3
 800a4ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4be:	b17b      	cbz	r3, 800a4e0 <__mdiff+0x104>
 800a4c0:	6106      	str	r6, [r0, #16]
 800a4c2:	e7a5      	b.n	800a410 <__mdiff+0x34>
 800a4c4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a4c8:	fa17 f488 	uxtah	r4, r7, r8
 800a4cc:	1422      	asrs	r2, r4, #16
 800a4ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a4d2:	b2a4      	uxth	r4, r4
 800a4d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a4d8:	f84e 4b04 	str.w	r4, [lr], #4
 800a4dc:	1417      	asrs	r7, r2, #16
 800a4de:	e7e0      	b.n	800a4a2 <__mdiff+0xc6>
 800a4e0:	3e01      	subs	r6, #1
 800a4e2:	e7ea      	b.n	800a4ba <__mdiff+0xde>
 800a4e4:	0800c784 	.word	0x0800c784
 800a4e8:	0800c814 	.word	0x0800c814

0800a4ec <__ulp>:
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	ed8d 0b00 	vstr	d0, [sp]
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	4912      	ldr	r1, [pc, #72]	; (800a540 <__ulp+0x54>)
 800a4f6:	4019      	ands	r1, r3
 800a4f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a4fc:	2900      	cmp	r1, #0
 800a4fe:	dd05      	ble.n	800a50c <__ulp+0x20>
 800a500:	2200      	movs	r2, #0
 800a502:	460b      	mov	r3, r1
 800a504:	ec43 2b10 	vmov	d0, r2, r3
 800a508:	b002      	add	sp, #8
 800a50a:	4770      	bx	lr
 800a50c:	4249      	negs	r1, r1
 800a50e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a512:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a516:	f04f 0200 	mov.w	r2, #0
 800a51a:	f04f 0300 	mov.w	r3, #0
 800a51e:	da04      	bge.n	800a52a <__ulp+0x3e>
 800a520:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a524:	fa41 f300 	asr.w	r3, r1, r0
 800a528:	e7ec      	b.n	800a504 <__ulp+0x18>
 800a52a:	f1a0 0114 	sub.w	r1, r0, #20
 800a52e:	291e      	cmp	r1, #30
 800a530:	bfda      	itte	le
 800a532:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a536:	fa20 f101 	lsrle.w	r1, r0, r1
 800a53a:	2101      	movgt	r1, #1
 800a53c:	460a      	mov	r2, r1
 800a53e:	e7e1      	b.n	800a504 <__ulp+0x18>
 800a540:	7ff00000 	.word	0x7ff00000

0800a544 <__b2d>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	6905      	ldr	r5, [r0, #16]
 800a548:	f100 0714 	add.w	r7, r0, #20
 800a54c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a550:	1f2e      	subs	r6, r5, #4
 800a552:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a556:	4620      	mov	r0, r4
 800a558:	f7ff fd52 	bl	800a000 <__hi0bits>
 800a55c:	f1c0 0320 	rsb	r3, r0, #32
 800a560:	280a      	cmp	r0, #10
 800a562:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a5e0 <__b2d+0x9c>
 800a566:	600b      	str	r3, [r1, #0]
 800a568:	dc14      	bgt.n	800a594 <__b2d+0x50>
 800a56a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a56e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a572:	42b7      	cmp	r7, r6
 800a574:	ea41 030c 	orr.w	r3, r1, ip
 800a578:	bf34      	ite	cc
 800a57a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a57e:	2100      	movcs	r1, #0
 800a580:	3015      	adds	r0, #21
 800a582:	fa04 f000 	lsl.w	r0, r4, r0
 800a586:	fa21 f10e 	lsr.w	r1, r1, lr
 800a58a:	ea40 0201 	orr.w	r2, r0, r1
 800a58e:	ec43 2b10 	vmov	d0, r2, r3
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a594:	42b7      	cmp	r7, r6
 800a596:	bf3a      	itte	cc
 800a598:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a59c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a5a0:	2100      	movcs	r1, #0
 800a5a2:	380b      	subs	r0, #11
 800a5a4:	d017      	beq.n	800a5d6 <__b2d+0x92>
 800a5a6:	f1c0 0c20 	rsb	ip, r0, #32
 800a5aa:	fa04 f500 	lsl.w	r5, r4, r0
 800a5ae:	42be      	cmp	r6, r7
 800a5b0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a5b4:	ea45 0504 	orr.w	r5, r5, r4
 800a5b8:	bf8c      	ite	hi
 800a5ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a5be:	2400      	movls	r4, #0
 800a5c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a5c4:	fa01 f000 	lsl.w	r0, r1, r0
 800a5c8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a5cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5d0:	ea40 0204 	orr.w	r2, r0, r4
 800a5d4:	e7db      	b.n	800a58e <__b2d+0x4a>
 800a5d6:	ea44 030c 	orr.w	r3, r4, ip
 800a5da:	460a      	mov	r2, r1
 800a5dc:	e7d7      	b.n	800a58e <__b2d+0x4a>
 800a5de:	bf00      	nop
 800a5e0:	3ff00000 	.word	0x3ff00000

0800a5e4 <__d2b>:
 800a5e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5e8:	4689      	mov	r9, r1
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	ec57 6b10 	vmov	r6, r7, d0
 800a5f0:	4690      	mov	r8, r2
 800a5f2:	f7ff fc0f 	bl	8009e14 <_Balloc>
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	b930      	cbnz	r0, 800a608 <__d2b+0x24>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	4b25      	ldr	r3, [pc, #148]	; (800a694 <__d2b+0xb0>)
 800a5fe:	4826      	ldr	r0, [pc, #152]	; (800a698 <__d2b+0xb4>)
 800a600:	f240 310a 	movw	r1, #778	; 0x30a
 800a604:	f000 fb10 	bl	800ac28 <__assert_func>
 800a608:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a60c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a610:	bb35      	cbnz	r5, 800a660 <__d2b+0x7c>
 800a612:	2e00      	cmp	r6, #0
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	d028      	beq.n	800a66a <__d2b+0x86>
 800a618:	4668      	mov	r0, sp
 800a61a:	9600      	str	r6, [sp, #0]
 800a61c:	f7ff fd10 	bl	800a040 <__lo0bits>
 800a620:	9900      	ldr	r1, [sp, #0]
 800a622:	b300      	cbz	r0, 800a666 <__d2b+0x82>
 800a624:	9a01      	ldr	r2, [sp, #4]
 800a626:	f1c0 0320 	rsb	r3, r0, #32
 800a62a:	fa02 f303 	lsl.w	r3, r2, r3
 800a62e:	430b      	orrs	r3, r1
 800a630:	40c2      	lsrs	r2, r0
 800a632:	6163      	str	r3, [r4, #20]
 800a634:	9201      	str	r2, [sp, #4]
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	61a3      	str	r3, [r4, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	bf14      	ite	ne
 800a63e:	2202      	movne	r2, #2
 800a640:	2201      	moveq	r2, #1
 800a642:	6122      	str	r2, [r4, #16]
 800a644:	b1d5      	cbz	r5, 800a67c <__d2b+0x98>
 800a646:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a64a:	4405      	add	r5, r0
 800a64c:	f8c9 5000 	str.w	r5, [r9]
 800a650:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a654:	f8c8 0000 	str.w	r0, [r8]
 800a658:	4620      	mov	r0, r4
 800a65a:	b003      	add	sp, #12
 800a65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a664:	e7d5      	b.n	800a612 <__d2b+0x2e>
 800a666:	6161      	str	r1, [r4, #20]
 800a668:	e7e5      	b.n	800a636 <__d2b+0x52>
 800a66a:	a801      	add	r0, sp, #4
 800a66c:	f7ff fce8 	bl	800a040 <__lo0bits>
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	6163      	str	r3, [r4, #20]
 800a674:	2201      	movs	r2, #1
 800a676:	6122      	str	r2, [r4, #16]
 800a678:	3020      	adds	r0, #32
 800a67a:	e7e3      	b.n	800a644 <__d2b+0x60>
 800a67c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a680:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a684:	f8c9 0000 	str.w	r0, [r9]
 800a688:	6918      	ldr	r0, [r3, #16]
 800a68a:	f7ff fcb9 	bl	800a000 <__hi0bits>
 800a68e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a692:	e7df      	b.n	800a654 <__d2b+0x70>
 800a694:	0800c784 	.word	0x0800c784
 800a698:	0800c814 	.word	0x0800c814

0800a69c <__ratio>:
 800a69c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	4688      	mov	r8, r1
 800a6a2:	4669      	mov	r1, sp
 800a6a4:	4681      	mov	r9, r0
 800a6a6:	f7ff ff4d 	bl	800a544 <__b2d>
 800a6aa:	a901      	add	r1, sp, #4
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	ec55 4b10 	vmov	r4, r5, d0
 800a6b2:	f7ff ff47 	bl	800a544 <__b2d>
 800a6b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6be:	eba3 0c02 	sub.w	ip, r3, r2
 800a6c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6c6:	1a9b      	subs	r3, r3, r2
 800a6c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6cc:	ec51 0b10 	vmov	r0, r1, d0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	bfd6      	itet	le
 800a6d4:	460a      	movle	r2, r1
 800a6d6:	462a      	movgt	r2, r5
 800a6d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6dc:	468b      	mov	fp, r1
 800a6de:	462f      	mov	r7, r5
 800a6e0:	bfd4      	ite	le
 800a6e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	ee10 2a10 	vmov	r2, s0
 800a6f0:	465b      	mov	r3, fp
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f6 f8aa 	bl	800084c <__aeabi_ddiv>
 800a6f8:	ec41 0b10 	vmov	d0, r0, r1
 800a6fc:	b003      	add	sp, #12
 800a6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a702 <__copybits>:
 800a702:	3901      	subs	r1, #1
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	1149      	asrs	r1, r1, #5
 800a708:	6914      	ldr	r4, [r2, #16]
 800a70a:	3101      	adds	r1, #1
 800a70c:	f102 0314 	add.w	r3, r2, #20
 800a710:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a714:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a718:	1f05      	subs	r5, r0, #4
 800a71a:	42a3      	cmp	r3, r4
 800a71c:	d30c      	bcc.n	800a738 <__copybits+0x36>
 800a71e:	1aa3      	subs	r3, r4, r2
 800a720:	3b11      	subs	r3, #17
 800a722:	f023 0303 	bic.w	r3, r3, #3
 800a726:	3211      	adds	r2, #17
 800a728:	42a2      	cmp	r2, r4
 800a72a:	bf88      	it	hi
 800a72c:	2300      	movhi	r3, #0
 800a72e:	4418      	add	r0, r3
 800a730:	2300      	movs	r3, #0
 800a732:	4288      	cmp	r0, r1
 800a734:	d305      	bcc.n	800a742 <__copybits+0x40>
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	f853 6b04 	ldr.w	r6, [r3], #4
 800a73c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a740:	e7eb      	b.n	800a71a <__copybits+0x18>
 800a742:	f840 3b04 	str.w	r3, [r0], #4
 800a746:	e7f4      	b.n	800a732 <__copybits+0x30>

0800a748 <__any_on>:
 800a748:	f100 0214 	add.w	r2, r0, #20
 800a74c:	6900      	ldr	r0, [r0, #16]
 800a74e:	114b      	asrs	r3, r1, #5
 800a750:	4298      	cmp	r0, r3
 800a752:	b510      	push	{r4, lr}
 800a754:	db11      	blt.n	800a77a <__any_on+0x32>
 800a756:	dd0a      	ble.n	800a76e <__any_on+0x26>
 800a758:	f011 011f 	ands.w	r1, r1, #31
 800a75c:	d007      	beq.n	800a76e <__any_on+0x26>
 800a75e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a762:	fa24 f001 	lsr.w	r0, r4, r1
 800a766:	fa00 f101 	lsl.w	r1, r0, r1
 800a76a:	428c      	cmp	r4, r1
 800a76c:	d10b      	bne.n	800a786 <__any_on+0x3e>
 800a76e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a772:	4293      	cmp	r3, r2
 800a774:	d803      	bhi.n	800a77e <__any_on+0x36>
 800a776:	2000      	movs	r0, #0
 800a778:	bd10      	pop	{r4, pc}
 800a77a:	4603      	mov	r3, r0
 800a77c:	e7f7      	b.n	800a76e <__any_on+0x26>
 800a77e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a782:	2900      	cmp	r1, #0
 800a784:	d0f5      	beq.n	800a772 <__any_on+0x2a>
 800a786:	2001      	movs	r0, #1
 800a788:	e7f6      	b.n	800a778 <__any_on+0x30>

0800a78a <_calloc_r>:
 800a78a:	b513      	push	{r0, r1, r4, lr}
 800a78c:	434a      	muls	r2, r1
 800a78e:	4611      	mov	r1, r2
 800a790:	9201      	str	r2, [sp, #4]
 800a792:	f000 f859 	bl	800a848 <_malloc_r>
 800a796:	4604      	mov	r4, r0
 800a798:	b118      	cbz	r0, 800a7a2 <_calloc_r+0x18>
 800a79a:	9a01      	ldr	r2, [sp, #4]
 800a79c:	2100      	movs	r1, #0
 800a79e:	f7fc fbd5 	bl	8006f4c <memset>
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	b002      	add	sp, #8
 800a7a6:	bd10      	pop	{r4, pc}

0800a7a8 <_free_r>:
 800a7a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7aa:	2900      	cmp	r1, #0
 800a7ac:	d048      	beq.n	800a840 <_free_r+0x98>
 800a7ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7b2:	9001      	str	r0, [sp, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f1a1 0404 	sub.w	r4, r1, #4
 800a7ba:	bfb8      	it	lt
 800a7bc:	18e4      	addlt	r4, r4, r3
 800a7be:	f000 fa7d 	bl	800acbc <__malloc_lock>
 800a7c2:	4a20      	ldr	r2, [pc, #128]	; (800a844 <_free_r+0x9c>)
 800a7c4:	9801      	ldr	r0, [sp, #4]
 800a7c6:	6813      	ldr	r3, [r2, #0]
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	b933      	cbnz	r3, 800a7da <_free_r+0x32>
 800a7cc:	6063      	str	r3, [r4, #4]
 800a7ce:	6014      	str	r4, [r2, #0]
 800a7d0:	b003      	add	sp, #12
 800a7d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7d6:	f000 ba77 	b.w	800acc8 <__malloc_unlock>
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	d90b      	bls.n	800a7f6 <_free_r+0x4e>
 800a7de:	6821      	ldr	r1, [r4, #0]
 800a7e0:	1862      	adds	r2, r4, r1
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	bf04      	itt	eq
 800a7e6:	681a      	ldreq	r2, [r3, #0]
 800a7e8:	685b      	ldreq	r3, [r3, #4]
 800a7ea:	6063      	str	r3, [r4, #4]
 800a7ec:	bf04      	itt	eq
 800a7ee:	1852      	addeq	r2, r2, r1
 800a7f0:	6022      	streq	r2, [r4, #0]
 800a7f2:	602c      	str	r4, [r5, #0]
 800a7f4:	e7ec      	b.n	800a7d0 <_free_r+0x28>
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	b10b      	cbz	r3, 800a800 <_free_r+0x58>
 800a7fc:	42a3      	cmp	r3, r4
 800a7fe:	d9fa      	bls.n	800a7f6 <_free_r+0x4e>
 800a800:	6811      	ldr	r1, [r2, #0]
 800a802:	1855      	adds	r5, r2, r1
 800a804:	42a5      	cmp	r5, r4
 800a806:	d10b      	bne.n	800a820 <_free_r+0x78>
 800a808:	6824      	ldr	r4, [r4, #0]
 800a80a:	4421      	add	r1, r4
 800a80c:	1854      	adds	r4, r2, r1
 800a80e:	42a3      	cmp	r3, r4
 800a810:	6011      	str	r1, [r2, #0]
 800a812:	d1dd      	bne.n	800a7d0 <_free_r+0x28>
 800a814:	681c      	ldr	r4, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	6053      	str	r3, [r2, #4]
 800a81a:	4421      	add	r1, r4
 800a81c:	6011      	str	r1, [r2, #0]
 800a81e:	e7d7      	b.n	800a7d0 <_free_r+0x28>
 800a820:	d902      	bls.n	800a828 <_free_r+0x80>
 800a822:	230c      	movs	r3, #12
 800a824:	6003      	str	r3, [r0, #0]
 800a826:	e7d3      	b.n	800a7d0 <_free_r+0x28>
 800a828:	6825      	ldr	r5, [r4, #0]
 800a82a:	1961      	adds	r1, r4, r5
 800a82c:	428b      	cmp	r3, r1
 800a82e:	bf04      	itt	eq
 800a830:	6819      	ldreq	r1, [r3, #0]
 800a832:	685b      	ldreq	r3, [r3, #4]
 800a834:	6063      	str	r3, [r4, #4]
 800a836:	bf04      	itt	eq
 800a838:	1949      	addeq	r1, r1, r5
 800a83a:	6021      	streq	r1, [r4, #0]
 800a83c:	6054      	str	r4, [r2, #4]
 800a83e:	e7c7      	b.n	800a7d0 <_free_r+0x28>
 800a840:	b003      	add	sp, #12
 800a842:	bd30      	pop	{r4, r5, pc}
 800a844:	20004f20 	.word	0x20004f20

0800a848 <_malloc_r>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	1ccd      	adds	r5, r1, #3
 800a84c:	f025 0503 	bic.w	r5, r5, #3
 800a850:	3508      	adds	r5, #8
 800a852:	2d0c      	cmp	r5, #12
 800a854:	bf38      	it	cc
 800a856:	250c      	movcc	r5, #12
 800a858:	2d00      	cmp	r5, #0
 800a85a:	4606      	mov	r6, r0
 800a85c:	db01      	blt.n	800a862 <_malloc_r+0x1a>
 800a85e:	42a9      	cmp	r1, r5
 800a860:	d903      	bls.n	800a86a <_malloc_r+0x22>
 800a862:	230c      	movs	r3, #12
 800a864:	6033      	str	r3, [r6, #0]
 800a866:	2000      	movs	r0, #0
 800a868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a86a:	f000 fa27 	bl	800acbc <__malloc_lock>
 800a86e:	4921      	ldr	r1, [pc, #132]	; (800a8f4 <_malloc_r+0xac>)
 800a870:	680a      	ldr	r2, [r1, #0]
 800a872:	4614      	mov	r4, r2
 800a874:	b99c      	cbnz	r4, 800a89e <_malloc_r+0x56>
 800a876:	4f20      	ldr	r7, [pc, #128]	; (800a8f8 <_malloc_r+0xb0>)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	b923      	cbnz	r3, 800a886 <_malloc_r+0x3e>
 800a87c:	4621      	mov	r1, r4
 800a87e:	4630      	mov	r0, r6
 800a880:	f000 f9a2 	bl	800abc8 <_sbrk_r>
 800a884:	6038      	str	r0, [r7, #0]
 800a886:	4629      	mov	r1, r5
 800a888:	4630      	mov	r0, r6
 800a88a:	f000 f99d 	bl	800abc8 <_sbrk_r>
 800a88e:	1c43      	adds	r3, r0, #1
 800a890:	d123      	bne.n	800a8da <_malloc_r+0x92>
 800a892:	230c      	movs	r3, #12
 800a894:	6033      	str	r3, [r6, #0]
 800a896:	4630      	mov	r0, r6
 800a898:	f000 fa16 	bl	800acc8 <__malloc_unlock>
 800a89c:	e7e3      	b.n	800a866 <_malloc_r+0x1e>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	1b5b      	subs	r3, r3, r5
 800a8a2:	d417      	bmi.n	800a8d4 <_malloc_r+0x8c>
 800a8a4:	2b0b      	cmp	r3, #11
 800a8a6:	d903      	bls.n	800a8b0 <_malloc_r+0x68>
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	441c      	add	r4, r3
 800a8ac:	6025      	str	r5, [r4, #0]
 800a8ae:	e004      	b.n	800a8ba <_malloc_r+0x72>
 800a8b0:	6863      	ldr	r3, [r4, #4]
 800a8b2:	42a2      	cmp	r2, r4
 800a8b4:	bf0c      	ite	eq
 800a8b6:	600b      	streq	r3, [r1, #0]
 800a8b8:	6053      	strne	r3, [r2, #4]
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f000 fa04 	bl	800acc8 <__malloc_unlock>
 800a8c0:	f104 000b 	add.w	r0, r4, #11
 800a8c4:	1d23      	adds	r3, r4, #4
 800a8c6:	f020 0007 	bic.w	r0, r0, #7
 800a8ca:	1ac2      	subs	r2, r0, r3
 800a8cc:	d0cc      	beq.n	800a868 <_malloc_r+0x20>
 800a8ce:	1a1b      	subs	r3, r3, r0
 800a8d0:	50a3      	str	r3, [r4, r2]
 800a8d2:	e7c9      	b.n	800a868 <_malloc_r+0x20>
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	6864      	ldr	r4, [r4, #4]
 800a8d8:	e7cc      	b.n	800a874 <_malloc_r+0x2c>
 800a8da:	1cc4      	adds	r4, r0, #3
 800a8dc:	f024 0403 	bic.w	r4, r4, #3
 800a8e0:	42a0      	cmp	r0, r4
 800a8e2:	d0e3      	beq.n	800a8ac <_malloc_r+0x64>
 800a8e4:	1a21      	subs	r1, r4, r0
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f000 f96e 	bl	800abc8 <_sbrk_r>
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d1dd      	bne.n	800a8ac <_malloc_r+0x64>
 800a8f0:	e7cf      	b.n	800a892 <_malloc_r+0x4a>
 800a8f2:	bf00      	nop
 800a8f4:	20004f20 	.word	0x20004f20
 800a8f8:	20004f24 	.word	0x20004f24

0800a8fc <__ssputs_r>:
 800a8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a900:	688e      	ldr	r6, [r1, #8]
 800a902:	429e      	cmp	r6, r3
 800a904:	4682      	mov	sl, r0
 800a906:	460c      	mov	r4, r1
 800a908:	4690      	mov	r8, r2
 800a90a:	461f      	mov	r7, r3
 800a90c:	d838      	bhi.n	800a980 <__ssputs_r+0x84>
 800a90e:	898a      	ldrh	r2, [r1, #12]
 800a910:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a914:	d032      	beq.n	800a97c <__ssputs_r+0x80>
 800a916:	6825      	ldr	r5, [r4, #0]
 800a918:	6909      	ldr	r1, [r1, #16]
 800a91a:	eba5 0901 	sub.w	r9, r5, r1
 800a91e:	6965      	ldr	r5, [r4, #20]
 800a920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a928:	3301      	adds	r3, #1
 800a92a:	444b      	add	r3, r9
 800a92c:	106d      	asrs	r5, r5, #1
 800a92e:	429d      	cmp	r5, r3
 800a930:	bf38      	it	cc
 800a932:	461d      	movcc	r5, r3
 800a934:	0553      	lsls	r3, r2, #21
 800a936:	d531      	bpl.n	800a99c <__ssputs_r+0xa0>
 800a938:	4629      	mov	r1, r5
 800a93a:	f7ff ff85 	bl	800a848 <_malloc_r>
 800a93e:	4606      	mov	r6, r0
 800a940:	b950      	cbnz	r0, 800a958 <__ssputs_r+0x5c>
 800a942:	230c      	movs	r3, #12
 800a944:	f8ca 3000 	str.w	r3, [sl]
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	f04f 30ff 	mov.w	r0, #4294967295
 800a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a958:	6921      	ldr	r1, [r4, #16]
 800a95a:	464a      	mov	r2, r9
 800a95c:	f7fc fae8 	bl	8006f30 <memcpy>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a96a:	81a3      	strh	r3, [r4, #12]
 800a96c:	6126      	str	r6, [r4, #16]
 800a96e:	6165      	str	r5, [r4, #20]
 800a970:	444e      	add	r6, r9
 800a972:	eba5 0509 	sub.w	r5, r5, r9
 800a976:	6026      	str	r6, [r4, #0]
 800a978:	60a5      	str	r5, [r4, #8]
 800a97a:	463e      	mov	r6, r7
 800a97c:	42be      	cmp	r6, r7
 800a97e:	d900      	bls.n	800a982 <__ssputs_r+0x86>
 800a980:	463e      	mov	r6, r7
 800a982:	4632      	mov	r2, r6
 800a984:	6820      	ldr	r0, [r4, #0]
 800a986:	4641      	mov	r1, r8
 800a988:	f000 f97e 	bl	800ac88 <memmove>
 800a98c:	68a3      	ldr	r3, [r4, #8]
 800a98e:	6822      	ldr	r2, [r4, #0]
 800a990:	1b9b      	subs	r3, r3, r6
 800a992:	4432      	add	r2, r6
 800a994:	60a3      	str	r3, [r4, #8]
 800a996:	6022      	str	r2, [r4, #0]
 800a998:	2000      	movs	r0, #0
 800a99a:	e7db      	b.n	800a954 <__ssputs_r+0x58>
 800a99c:	462a      	mov	r2, r5
 800a99e:	f000 f999 	bl	800acd4 <_realloc_r>
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d1e1      	bne.n	800a96c <__ssputs_r+0x70>
 800a9a8:	6921      	ldr	r1, [r4, #16]
 800a9aa:	4650      	mov	r0, sl
 800a9ac:	f7ff fefc 	bl	800a7a8 <_free_r>
 800a9b0:	e7c7      	b.n	800a942 <__ssputs_r+0x46>
	...

0800a9b4 <_svfiprintf_r>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	4698      	mov	r8, r3
 800a9ba:	898b      	ldrh	r3, [r1, #12]
 800a9bc:	061b      	lsls	r3, r3, #24
 800a9be:	b09d      	sub	sp, #116	; 0x74
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	d50e      	bpl.n	800a9e6 <_svfiprintf_r+0x32>
 800a9c8:	690b      	ldr	r3, [r1, #16]
 800a9ca:	b963      	cbnz	r3, 800a9e6 <_svfiprintf_r+0x32>
 800a9cc:	2140      	movs	r1, #64	; 0x40
 800a9ce:	f7ff ff3b 	bl	800a848 <_malloc_r>
 800a9d2:	6028      	str	r0, [r5, #0]
 800a9d4:	6128      	str	r0, [r5, #16]
 800a9d6:	b920      	cbnz	r0, 800a9e2 <_svfiprintf_r+0x2e>
 800a9d8:	230c      	movs	r3, #12
 800a9da:	603b      	str	r3, [r7, #0]
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	e0d1      	b.n	800ab86 <_svfiprintf_r+0x1d2>
 800a9e2:	2340      	movs	r3, #64	; 0x40
 800a9e4:	616b      	str	r3, [r5, #20]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ea:	2320      	movs	r3, #32
 800a9ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9f4:	2330      	movs	r3, #48	; 0x30
 800a9f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aba0 <_svfiprintf_r+0x1ec>
 800a9fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9fe:	f04f 0901 	mov.w	r9, #1
 800aa02:	4623      	mov	r3, r4
 800aa04:	469a      	mov	sl, r3
 800aa06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa0a:	b10a      	cbz	r2, 800aa10 <_svfiprintf_r+0x5c>
 800aa0c:	2a25      	cmp	r2, #37	; 0x25
 800aa0e:	d1f9      	bne.n	800aa04 <_svfiprintf_r+0x50>
 800aa10:	ebba 0b04 	subs.w	fp, sl, r4
 800aa14:	d00b      	beq.n	800aa2e <_svfiprintf_r+0x7a>
 800aa16:	465b      	mov	r3, fp
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	f7ff ff6d 	bl	800a8fc <__ssputs_r>
 800aa22:	3001      	adds	r0, #1
 800aa24:	f000 80aa 	beq.w	800ab7c <_svfiprintf_r+0x1c8>
 800aa28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa2a:	445a      	add	r2, fp
 800aa2c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa2e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 80a2 	beq.w	800ab7c <_svfiprintf_r+0x1c8>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa42:	f10a 0a01 	add.w	sl, sl, #1
 800aa46:	9304      	str	r3, [sp, #16]
 800aa48:	9307      	str	r3, [sp, #28]
 800aa4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa4e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa50:	4654      	mov	r4, sl
 800aa52:	2205      	movs	r2, #5
 800aa54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa58:	4851      	ldr	r0, [pc, #324]	; (800aba0 <_svfiprintf_r+0x1ec>)
 800aa5a:	f7f5 fbc1 	bl	80001e0 <memchr>
 800aa5e:	9a04      	ldr	r2, [sp, #16]
 800aa60:	b9d8      	cbnz	r0, 800aa9a <_svfiprintf_r+0xe6>
 800aa62:	06d0      	lsls	r0, r2, #27
 800aa64:	bf44      	itt	mi
 800aa66:	2320      	movmi	r3, #32
 800aa68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa6c:	0711      	lsls	r1, r2, #28
 800aa6e:	bf44      	itt	mi
 800aa70:	232b      	movmi	r3, #43	; 0x2b
 800aa72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa76:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa7c:	d015      	beq.n	800aaaa <_svfiprintf_r+0xf6>
 800aa7e:	9a07      	ldr	r2, [sp, #28]
 800aa80:	4654      	mov	r4, sl
 800aa82:	2000      	movs	r0, #0
 800aa84:	f04f 0c0a 	mov.w	ip, #10
 800aa88:	4621      	mov	r1, r4
 800aa8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa8e:	3b30      	subs	r3, #48	; 0x30
 800aa90:	2b09      	cmp	r3, #9
 800aa92:	d94e      	bls.n	800ab32 <_svfiprintf_r+0x17e>
 800aa94:	b1b0      	cbz	r0, 800aac4 <_svfiprintf_r+0x110>
 800aa96:	9207      	str	r2, [sp, #28]
 800aa98:	e014      	b.n	800aac4 <_svfiprintf_r+0x110>
 800aa9a:	eba0 0308 	sub.w	r3, r0, r8
 800aa9e:	fa09 f303 	lsl.w	r3, r9, r3
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	46a2      	mov	sl, r4
 800aaa8:	e7d2      	b.n	800aa50 <_svfiprintf_r+0x9c>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	1d19      	adds	r1, r3, #4
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	9103      	str	r1, [sp, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bfbb      	ittet	lt
 800aab6:	425b      	neglt	r3, r3
 800aab8:	f042 0202 	orrlt.w	r2, r2, #2
 800aabc:	9307      	strge	r3, [sp, #28]
 800aabe:	9307      	strlt	r3, [sp, #28]
 800aac0:	bfb8      	it	lt
 800aac2:	9204      	strlt	r2, [sp, #16]
 800aac4:	7823      	ldrb	r3, [r4, #0]
 800aac6:	2b2e      	cmp	r3, #46	; 0x2e
 800aac8:	d10c      	bne.n	800aae4 <_svfiprintf_r+0x130>
 800aaca:	7863      	ldrb	r3, [r4, #1]
 800aacc:	2b2a      	cmp	r3, #42	; 0x2a
 800aace:	d135      	bne.n	800ab3c <_svfiprintf_r+0x188>
 800aad0:	9b03      	ldr	r3, [sp, #12]
 800aad2:	1d1a      	adds	r2, r3, #4
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	9203      	str	r2, [sp, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bfb8      	it	lt
 800aadc:	f04f 33ff 	movlt.w	r3, #4294967295
 800aae0:	3402      	adds	r4, #2
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abb0 <_svfiprintf_r+0x1fc>
 800aae8:	7821      	ldrb	r1, [r4, #0]
 800aaea:	2203      	movs	r2, #3
 800aaec:	4650      	mov	r0, sl
 800aaee:	f7f5 fb77 	bl	80001e0 <memchr>
 800aaf2:	b140      	cbz	r0, 800ab06 <_svfiprintf_r+0x152>
 800aaf4:	2340      	movs	r3, #64	; 0x40
 800aaf6:	eba0 000a 	sub.w	r0, r0, sl
 800aafa:	fa03 f000 	lsl.w	r0, r3, r0
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	4303      	orrs	r3, r0
 800ab02:	3401      	adds	r4, #1
 800ab04:	9304      	str	r3, [sp, #16]
 800ab06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0a:	4826      	ldr	r0, [pc, #152]	; (800aba4 <_svfiprintf_r+0x1f0>)
 800ab0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab10:	2206      	movs	r2, #6
 800ab12:	f7f5 fb65 	bl	80001e0 <memchr>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d038      	beq.n	800ab8c <_svfiprintf_r+0x1d8>
 800ab1a:	4b23      	ldr	r3, [pc, #140]	; (800aba8 <_svfiprintf_r+0x1f4>)
 800ab1c:	bb1b      	cbnz	r3, 800ab66 <_svfiprintf_r+0x1b2>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	3307      	adds	r3, #7
 800ab22:	f023 0307 	bic.w	r3, r3, #7
 800ab26:	3308      	adds	r3, #8
 800ab28:	9303      	str	r3, [sp, #12]
 800ab2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2c:	4433      	add	r3, r6
 800ab2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab30:	e767      	b.n	800aa02 <_svfiprintf_r+0x4e>
 800ab32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab36:	460c      	mov	r4, r1
 800ab38:	2001      	movs	r0, #1
 800ab3a:	e7a5      	b.n	800aa88 <_svfiprintf_r+0xd4>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	3401      	adds	r4, #1
 800ab40:	9305      	str	r3, [sp, #20]
 800ab42:	4619      	mov	r1, r3
 800ab44:	f04f 0c0a 	mov.w	ip, #10
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab4e:	3a30      	subs	r2, #48	; 0x30
 800ab50:	2a09      	cmp	r2, #9
 800ab52:	d903      	bls.n	800ab5c <_svfiprintf_r+0x1a8>
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0c5      	beq.n	800aae4 <_svfiprintf_r+0x130>
 800ab58:	9105      	str	r1, [sp, #20]
 800ab5a:	e7c3      	b.n	800aae4 <_svfiprintf_r+0x130>
 800ab5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab60:	4604      	mov	r4, r0
 800ab62:	2301      	movs	r3, #1
 800ab64:	e7f0      	b.n	800ab48 <_svfiprintf_r+0x194>
 800ab66:	ab03      	add	r3, sp, #12
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	462a      	mov	r2, r5
 800ab6c:	4b0f      	ldr	r3, [pc, #60]	; (800abac <_svfiprintf_r+0x1f8>)
 800ab6e:	a904      	add	r1, sp, #16
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7fc fa93 	bl	800709c <_printf_float>
 800ab76:	1c42      	adds	r2, r0, #1
 800ab78:	4606      	mov	r6, r0
 800ab7a:	d1d6      	bne.n	800ab2a <_svfiprintf_r+0x176>
 800ab7c:	89ab      	ldrh	r3, [r5, #12]
 800ab7e:	065b      	lsls	r3, r3, #25
 800ab80:	f53f af2c 	bmi.w	800a9dc <_svfiprintf_r+0x28>
 800ab84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab86:	b01d      	add	sp, #116	; 0x74
 800ab88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	ab03      	add	r3, sp, #12
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	462a      	mov	r2, r5
 800ab92:	4b06      	ldr	r3, [pc, #24]	; (800abac <_svfiprintf_r+0x1f8>)
 800ab94:	a904      	add	r1, sp, #16
 800ab96:	4638      	mov	r0, r7
 800ab98:	f7fc fd24 	bl	80075e4 <_printf_i>
 800ab9c:	e7eb      	b.n	800ab76 <_svfiprintf_r+0x1c2>
 800ab9e:	bf00      	nop
 800aba0:	0800c974 	.word	0x0800c974
 800aba4:	0800c97e 	.word	0x0800c97e
 800aba8:	0800709d 	.word	0x0800709d
 800abac:	0800a8fd 	.word	0x0800a8fd
 800abb0:	0800c97a 	.word	0x0800c97a
 800abb4:	00000000 	.word	0x00000000

0800abb8 <nan>:
 800abb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800abc0 <nan+0x8>
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	00000000 	.word	0x00000000
 800abc4:	7ff80000 	.word	0x7ff80000

0800abc8 <_sbrk_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d06      	ldr	r5, [pc, #24]	; (800abe4 <_sbrk_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	f7f7 f8fc 	bl	8001dd0 <_sbrk>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_sbrk_r+0x1a>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_sbrk_r+0x1a>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	200050c8 	.word	0x200050c8

0800abe8 <strncmp>:
 800abe8:	b510      	push	{r4, lr}
 800abea:	b16a      	cbz	r2, 800ac08 <strncmp+0x20>
 800abec:	3901      	subs	r1, #1
 800abee:	1884      	adds	r4, r0, r2
 800abf0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800abf4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d103      	bne.n	800ac04 <strncmp+0x1c>
 800abfc:	42a0      	cmp	r0, r4
 800abfe:	d001      	beq.n	800ac04 <strncmp+0x1c>
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1f5      	bne.n	800abf0 <strncmp+0x8>
 800ac04:	1a98      	subs	r0, r3, r2
 800ac06:	bd10      	pop	{r4, pc}
 800ac08:	4610      	mov	r0, r2
 800ac0a:	e7fc      	b.n	800ac06 <strncmp+0x1e>

0800ac0c <__ascii_wctomb>:
 800ac0c:	b149      	cbz	r1, 800ac22 <__ascii_wctomb+0x16>
 800ac0e:	2aff      	cmp	r2, #255	; 0xff
 800ac10:	bf85      	ittet	hi
 800ac12:	238a      	movhi	r3, #138	; 0x8a
 800ac14:	6003      	strhi	r3, [r0, #0]
 800ac16:	700a      	strbls	r2, [r1, #0]
 800ac18:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac1c:	bf98      	it	ls
 800ac1e:	2001      	movls	r0, #1
 800ac20:	4770      	bx	lr
 800ac22:	4608      	mov	r0, r1
 800ac24:	4770      	bx	lr
	...

0800ac28 <__assert_func>:
 800ac28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac2a:	4614      	mov	r4, r2
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <__assert_func+0x2c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4605      	mov	r5, r0
 800ac34:	68d8      	ldr	r0, [r3, #12]
 800ac36:	b14c      	cbz	r4, 800ac4c <__assert_func+0x24>
 800ac38:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <__assert_func+0x30>)
 800ac3a:	9100      	str	r1, [sp, #0]
 800ac3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac40:	4906      	ldr	r1, [pc, #24]	; (800ac5c <__assert_func+0x34>)
 800ac42:	462b      	mov	r3, r5
 800ac44:	f000 f80e 	bl	800ac64 <fiprintf>
 800ac48:	f000 fa84 	bl	800b154 <abort>
 800ac4c:	4b04      	ldr	r3, [pc, #16]	; (800ac60 <__assert_func+0x38>)
 800ac4e:	461c      	mov	r4, r3
 800ac50:	e7f3      	b.n	800ac3a <__assert_func+0x12>
 800ac52:	bf00      	nop
 800ac54:	20000018 	.word	0x20000018
 800ac58:	0800c985 	.word	0x0800c985
 800ac5c:	0800c992 	.word	0x0800c992
 800ac60:	0800c9c0 	.word	0x0800c9c0

0800ac64 <fiprintf>:
 800ac64:	b40e      	push	{r1, r2, r3}
 800ac66:	b503      	push	{r0, r1, lr}
 800ac68:	4601      	mov	r1, r0
 800ac6a:	ab03      	add	r3, sp, #12
 800ac6c:	4805      	ldr	r0, [pc, #20]	; (800ac84 <fiprintf+0x20>)
 800ac6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac72:	6800      	ldr	r0, [r0, #0]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	f000 f87d 	bl	800ad74 <_vfiprintf_r>
 800ac7a:	b002      	add	sp, #8
 800ac7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac80:	b003      	add	sp, #12
 800ac82:	4770      	bx	lr
 800ac84:	20000018 	.word	0x20000018

0800ac88 <memmove>:
 800ac88:	4288      	cmp	r0, r1
 800ac8a:	b510      	push	{r4, lr}
 800ac8c:	eb01 0402 	add.w	r4, r1, r2
 800ac90:	d902      	bls.n	800ac98 <memmove+0x10>
 800ac92:	4284      	cmp	r4, r0
 800ac94:	4623      	mov	r3, r4
 800ac96:	d807      	bhi.n	800aca8 <memmove+0x20>
 800ac98:	1e43      	subs	r3, r0, #1
 800ac9a:	42a1      	cmp	r1, r4
 800ac9c:	d008      	beq.n	800acb0 <memmove+0x28>
 800ac9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aca6:	e7f8      	b.n	800ac9a <memmove+0x12>
 800aca8:	4402      	add	r2, r0
 800acaa:	4601      	mov	r1, r0
 800acac:	428a      	cmp	r2, r1
 800acae:	d100      	bne.n	800acb2 <memmove+0x2a>
 800acb0:	bd10      	pop	{r4, pc}
 800acb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acba:	e7f7      	b.n	800acac <memmove+0x24>

0800acbc <__malloc_lock>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__malloc_lock+0x8>)
 800acbe:	f000 bc09 	b.w	800b4d4 <__retarget_lock_acquire_recursive>
 800acc2:	bf00      	nop
 800acc4:	200050d0 	.word	0x200050d0

0800acc8 <__malloc_unlock>:
 800acc8:	4801      	ldr	r0, [pc, #4]	; (800acd0 <__malloc_unlock+0x8>)
 800acca:	f000 bc04 	b.w	800b4d6 <__retarget_lock_release_recursive>
 800acce:	bf00      	nop
 800acd0:	200050d0 	.word	0x200050d0

0800acd4 <_realloc_r>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	4607      	mov	r7, r0
 800acd8:	4614      	mov	r4, r2
 800acda:	460e      	mov	r6, r1
 800acdc:	b921      	cbnz	r1, 800ace8 <_realloc_r+0x14>
 800acde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ace2:	4611      	mov	r1, r2
 800ace4:	f7ff bdb0 	b.w	800a848 <_malloc_r>
 800ace8:	b922      	cbnz	r2, 800acf4 <_realloc_r+0x20>
 800acea:	f7ff fd5d 	bl	800a7a8 <_free_r>
 800acee:	4625      	mov	r5, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf4:	f000 fc54 	bl	800b5a0 <_malloc_usable_size_r>
 800acf8:	42a0      	cmp	r0, r4
 800acfa:	d20f      	bcs.n	800ad1c <_realloc_r+0x48>
 800acfc:	4621      	mov	r1, r4
 800acfe:	4638      	mov	r0, r7
 800ad00:	f7ff fda2 	bl	800a848 <_malloc_r>
 800ad04:	4605      	mov	r5, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d0f2      	beq.n	800acf0 <_realloc_r+0x1c>
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	f7fc f90f 	bl	8006f30 <memcpy>
 800ad12:	4631      	mov	r1, r6
 800ad14:	4638      	mov	r0, r7
 800ad16:	f7ff fd47 	bl	800a7a8 <_free_r>
 800ad1a:	e7e9      	b.n	800acf0 <_realloc_r+0x1c>
 800ad1c:	4635      	mov	r5, r6
 800ad1e:	e7e7      	b.n	800acf0 <_realloc_r+0x1c>

0800ad20 <__sfputc_r>:
 800ad20:	6893      	ldr	r3, [r2, #8]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	b410      	push	{r4}
 800ad28:	6093      	str	r3, [r2, #8]
 800ad2a:	da08      	bge.n	800ad3e <__sfputc_r+0x1e>
 800ad2c:	6994      	ldr	r4, [r2, #24]
 800ad2e:	42a3      	cmp	r3, r4
 800ad30:	db01      	blt.n	800ad36 <__sfputc_r+0x16>
 800ad32:	290a      	cmp	r1, #10
 800ad34:	d103      	bne.n	800ad3e <__sfputc_r+0x1e>
 800ad36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad3a:	f000 b94b 	b.w	800afd4 <__swbuf_r>
 800ad3e:	6813      	ldr	r3, [r2, #0]
 800ad40:	1c58      	adds	r0, r3, #1
 800ad42:	6010      	str	r0, [r2, #0]
 800ad44:	7019      	strb	r1, [r3, #0]
 800ad46:	4608      	mov	r0, r1
 800ad48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <__sfputs_r>:
 800ad4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad50:	4606      	mov	r6, r0
 800ad52:	460f      	mov	r7, r1
 800ad54:	4614      	mov	r4, r2
 800ad56:	18d5      	adds	r5, r2, r3
 800ad58:	42ac      	cmp	r4, r5
 800ad5a:	d101      	bne.n	800ad60 <__sfputs_r+0x12>
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	e007      	b.n	800ad70 <__sfputs_r+0x22>
 800ad60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad64:	463a      	mov	r2, r7
 800ad66:	4630      	mov	r0, r6
 800ad68:	f7ff ffda 	bl	800ad20 <__sfputc_r>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d1f3      	bne.n	800ad58 <__sfputs_r+0xa>
 800ad70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad74 <_vfiprintf_r>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	460d      	mov	r5, r1
 800ad7a:	b09d      	sub	sp, #116	; 0x74
 800ad7c:	4614      	mov	r4, r2
 800ad7e:	4698      	mov	r8, r3
 800ad80:	4606      	mov	r6, r0
 800ad82:	b118      	cbz	r0, 800ad8c <_vfiprintf_r+0x18>
 800ad84:	6983      	ldr	r3, [r0, #24]
 800ad86:	b90b      	cbnz	r3, 800ad8c <_vfiprintf_r+0x18>
 800ad88:	f000 fb06 	bl	800b398 <__sinit>
 800ad8c:	4b89      	ldr	r3, [pc, #548]	; (800afb4 <_vfiprintf_r+0x240>)
 800ad8e:	429d      	cmp	r5, r3
 800ad90:	d11b      	bne.n	800adca <_vfiprintf_r+0x56>
 800ad92:	6875      	ldr	r5, [r6, #4]
 800ad94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad96:	07d9      	lsls	r1, r3, #31
 800ad98:	d405      	bmi.n	800ada6 <_vfiprintf_r+0x32>
 800ad9a:	89ab      	ldrh	r3, [r5, #12]
 800ad9c:	059a      	lsls	r2, r3, #22
 800ad9e:	d402      	bmi.n	800ada6 <_vfiprintf_r+0x32>
 800ada0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ada2:	f000 fb97 	bl	800b4d4 <__retarget_lock_acquire_recursive>
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	071b      	lsls	r3, r3, #28
 800adaa:	d501      	bpl.n	800adb0 <_vfiprintf_r+0x3c>
 800adac:	692b      	ldr	r3, [r5, #16]
 800adae:	b9eb      	cbnz	r3, 800adec <_vfiprintf_r+0x78>
 800adb0:	4629      	mov	r1, r5
 800adb2:	4630      	mov	r0, r6
 800adb4:	f000 f960 	bl	800b078 <__swsetup_r>
 800adb8:	b1c0      	cbz	r0, 800adec <_vfiprintf_r+0x78>
 800adba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adbc:	07dc      	lsls	r4, r3, #31
 800adbe:	d50e      	bpl.n	800adde <_vfiprintf_r+0x6a>
 800adc0:	f04f 30ff 	mov.w	r0, #4294967295
 800adc4:	b01d      	add	sp, #116	; 0x74
 800adc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adca:	4b7b      	ldr	r3, [pc, #492]	; (800afb8 <_vfiprintf_r+0x244>)
 800adcc:	429d      	cmp	r5, r3
 800adce:	d101      	bne.n	800add4 <_vfiprintf_r+0x60>
 800add0:	68b5      	ldr	r5, [r6, #8]
 800add2:	e7df      	b.n	800ad94 <_vfiprintf_r+0x20>
 800add4:	4b79      	ldr	r3, [pc, #484]	; (800afbc <_vfiprintf_r+0x248>)
 800add6:	429d      	cmp	r5, r3
 800add8:	bf08      	it	eq
 800adda:	68f5      	ldreq	r5, [r6, #12]
 800addc:	e7da      	b.n	800ad94 <_vfiprintf_r+0x20>
 800adde:	89ab      	ldrh	r3, [r5, #12]
 800ade0:	0598      	lsls	r0, r3, #22
 800ade2:	d4ed      	bmi.n	800adc0 <_vfiprintf_r+0x4c>
 800ade4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ade6:	f000 fb76 	bl	800b4d6 <__retarget_lock_release_recursive>
 800adea:	e7e9      	b.n	800adc0 <_vfiprintf_r+0x4c>
 800adec:	2300      	movs	r3, #0
 800adee:	9309      	str	r3, [sp, #36]	; 0x24
 800adf0:	2320      	movs	r3, #32
 800adf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adfa:	2330      	movs	r3, #48	; 0x30
 800adfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afc0 <_vfiprintf_r+0x24c>
 800ae00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae04:	f04f 0901 	mov.w	r9, #1
 800ae08:	4623      	mov	r3, r4
 800ae0a:	469a      	mov	sl, r3
 800ae0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae10:	b10a      	cbz	r2, 800ae16 <_vfiprintf_r+0xa2>
 800ae12:	2a25      	cmp	r2, #37	; 0x25
 800ae14:	d1f9      	bne.n	800ae0a <_vfiprintf_r+0x96>
 800ae16:	ebba 0b04 	subs.w	fp, sl, r4
 800ae1a:	d00b      	beq.n	800ae34 <_vfiprintf_r+0xc0>
 800ae1c:	465b      	mov	r3, fp
 800ae1e:	4622      	mov	r2, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	4630      	mov	r0, r6
 800ae24:	f7ff ff93 	bl	800ad4e <__sfputs_r>
 800ae28:	3001      	adds	r0, #1
 800ae2a:	f000 80aa 	beq.w	800af82 <_vfiprintf_r+0x20e>
 800ae2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae30:	445a      	add	r2, fp
 800ae32:	9209      	str	r2, [sp, #36]	; 0x24
 800ae34:	f89a 3000 	ldrb.w	r3, [sl]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 80a2 	beq.w	800af82 <_vfiprintf_r+0x20e>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f04f 32ff 	mov.w	r2, #4294967295
 800ae44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae48:	f10a 0a01 	add.w	sl, sl, #1
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	9307      	str	r3, [sp, #28]
 800ae50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae54:	931a      	str	r3, [sp, #104]	; 0x68
 800ae56:	4654      	mov	r4, sl
 800ae58:	2205      	movs	r2, #5
 800ae5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae5e:	4858      	ldr	r0, [pc, #352]	; (800afc0 <_vfiprintf_r+0x24c>)
 800ae60:	f7f5 f9be 	bl	80001e0 <memchr>
 800ae64:	9a04      	ldr	r2, [sp, #16]
 800ae66:	b9d8      	cbnz	r0, 800aea0 <_vfiprintf_r+0x12c>
 800ae68:	06d1      	lsls	r1, r2, #27
 800ae6a:	bf44      	itt	mi
 800ae6c:	2320      	movmi	r3, #32
 800ae6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae72:	0713      	lsls	r3, r2, #28
 800ae74:	bf44      	itt	mi
 800ae76:	232b      	movmi	r3, #43	; 0x2b
 800ae78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae80:	2b2a      	cmp	r3, #42	; 0x2a
 800ae82:	d015      	beq.n	800aeb0 <_vfiprintf_r+0x13c>
 800ae84:	9a07      	ldr	r2, [sp, #28]
 800ae86:	4654      	mov	r4, sl
 800ae88:	2000      	movs	r0, #0
 800ae8a:	f04f 0c0a 	mov.w	ip, #10
 800ae8e:	4621      	mov	r1, r4
 800ae90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae94:	3b30      	subs	r3, #48	; 0x30
 800ae96:	2b09      	cmp	r3, #9
 800ae98:	d94e      	bls.n	800af38 <_vfiprintf_r+0x1c4>
 800ae9a:	b1b0      	cbz	r0, 800aeca <_vfiprintf_r+0x156>
 800ae9c:	9207      	str	r2, [sp, #28]
 800ae9e:	e014      	b.n	800aeca <_vfiprintf_r+0x156>
 800aea0:	eba0 0308 	sub.w	r3, r0, r8
 800aea4:	fa09 f303 	lsl.w	r3, r9, r3
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	46a2      	mov	sl, r4
 800aeae:	e7d2      	b.n	800ae56 <_vfiprintf_r+0xe2>
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	1d19      	adds	r1, r3, #4
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	9103      	str	r1, [sp, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	bfbb      	ittet	lt
 800aebc:	425b      	neglt	r3, r3
 800aebe:	f042 0202 	orrlt.w	r2, r2, #2
 800aec2:	9307      	strge	r3, [sp, #28]
 800aec4:	9307      	strlt	r3, [sp, #28]
 800aec6:	bfb8      	it	lt
 800aec8:	9204      	strlt	r2, [sp, #16]
 800aeca:	7823      	ldrb	r3, [r4, #0]
 800aecc:	2b2e      	cmp	r3, #46	; 0x2e
 800aece:	d10c      	bne.n	800aeea <_vfiprintf_r+0x176>
 800aed0:	7863      	ldrb	r3, [r4, #1]
 800aed2:	2b2a      	cmp	r3, #42	; 0x2a
 800aed4:	d135      	bne.n	800af42 <_vfiprintf_r+0x1ce>
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	1d1a      	adds	r2, r3, #4
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	9203      	str	r2, [sp, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	bfb8      	it	lt
 800aee2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aee6:	3402      	adds	r4, #2
 800aee8:	9305      	str	r3, [sp, #20]
 800aeea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800afd0 <_vfiprintf_r+0x25c>
 800aeee:	7821      	ldrb	r1, [r4, #0]
 800aef0:	2203      	movs	r2, #3
 800aef2:	4650      	mov	r0, sl
 800aef4:	f7f5 f974 	bl	80001e0 <memchr>
 800aef8:	b140      	cbz	r0, 800af0c <_vfiprintf_r+0x198>
 800aefa:	2340      	movs	r3, #64	; 0x40
 800aefc:	eba0 000a 	sub.w	r0, r0, sl
 800af00:	fa03 f000 	lsl.w	r0, r3, r0
 800af04:	9b04      	ldr	r3, [sp, #16]
 800af06:	4303      	orrs	r3, r0
 800af08:	3401      	adds	r4, #1
 800af0a:	9304      	str	r3, [sp, #16]
 800af0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af10:	482c      	ldr	r0, [pc, #176]	; (800afc4 <_vfiprintf_r+0x250>)
 800af12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af16:	2206      	movs	r2, #6
 800af18:	f7f5 f962 	bl	80001e0 <memchr>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d03f      	beq.n	800afa0 <_vfiprintf_r+0x22c>
 800af20:	4b29      	ldr	r3, [pc, #164]	; (800afc8 <_vfiprintf_r+0x254>)
 800af22:	bb1b      	cbnz	r3, 800af6c <_vfiprintf_r+0x1f8>
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	3307      	adds	r3, #7
 800af28:	f023 0307 	bic.w	r3, r3, #7
 800af2c:	3308      	adds	r3, #8
 800af2e:	9303      	str	r3, [sp, #12]
 800af30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af32:	443b      	add	r3, r7
 800af34:	9309      	str	r3, [sp, #36]	; 0x24
 800af36:	e767      	b.n	800ae08 <_vfiprintf_r+0x94>
 800af38:	fb0c 3202 	mla	r2, ip, r2, r3
 800af3c:	460c      	mov	r4, r1
 800af3e:	2001      	movs	r0, #1
 800af40:	e7a5      	b.n	800ae8e <_vfiprintf_r+0x11a>
 800af42:	2300      	movs	r3, #0
 800af44:	3401      	adds	r4, #1
 800af46:	9305      	str	r3, [sp, #20]
 800af48:	4619      	mov	r1, r3
 800af4a:	f04f 0c0a 	mov.w	ip, #10
 800af4e:	4620      	mov	r0, r4
 800af50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af54:	3a30      	subs	r2, #48	; 0x30
 800af56:	2a09      	cmp	r2, #9
 800af58:	d903      	bls.n	800af62 <_vfiprintf_r+0x1ee>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0c5      	beq.n	800aeea <_vfiprintf_r+0x176>
 800af5e:	9105      	str	r1, [sp, #20]
 800af60:	e7c3      	b.n	800aeea <_vfiprintf_r+0x176>
 800af62:	fb0c 2101 	mla	r1, ip, r1, r2
 800af66:	4604      	mov	r4, r0
 800af68:	2301      	movs	r3, #1
 800af6a:	e7f0      	b.n	800af4e <_vfiprintf_r+0x1da>
 800af6c:	ab03      	add	r3, sp, #12
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	462a      	mov	r2, r5
 800af72:	4b16      	ldr	r3, [pc, #88]	; (800afcc <_vfiprintf_r+0x258>)
 800af74:	a904      	add	r1, sp, #16
 800af76:	4630      	mov	r0, r6
 800af78:	f7fc f890 	bl	800709c <_printf_float>
 800af7c:	4607      	mov	r7, r0
 800af7e:	1c78      	adds	r0, r7, #1
 800af80:	d1d6      	bne.n	800af30 <_vfiprintf_r+0x1bc>
 800af82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af84:	07d9      	lsls	r1, r3, #31
 800af86:	d405      	bmi.n	800af94 <_vfiprintf_r+0x220>
 800af88:	89ab      	ldrh	r3, [r5, #12]
 800af8a:	059a      	lsls	r2, r3, #22
 800af8c:	d402      	bmi.n	800af94 <_vfiprintf_r+0x220>
 800af8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af90:	f000 faa1 	bl	800b4d6 <__retarget_lock_release_recursive>
 800af94:	89ab      	ldrh	r3, [r5, #12]
 800af96:	065b      	lsls	r3, r3, #25
 800af98:	f53f af12 	bmi.w	800adc0 <_vfiprintf_r+0x4c>
 800af9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af9e:	e711      	b.n	800adc4 <_vfiprintf_r+0x50>
 800afa0:	ab03      	add	r3, sp, #12
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	462a      	mov	r2, r5
 800afa6:	4b09      	ldr	r3, [pc, #36]	; (800afcc <_vfiprintf_r+0x258>)
 800afa8:	a904      	add	r1, sp, #16
 800afaa:	4630      	mov	r0, r6
 800afac:	f7fc fb1a 	bl	80075e4 <_printf_i>
 800afb0:	e7e4      	b.n	800af7c <_vfiprintf_r+0x208>
 800afb2:	bf00      	nop
 800afb4:	0800c9e4 	.word	0x0800c9e4
 800afb8:	0800ca04 	.word	0x0800ca04
 800afbc:	0800c9c4 	.word	0x0800c9c4
 800afc0:	0800c974 	.word	0x0800c974
 800afc4:	0800c97e 	.word	0x0800c97e
 800afc8:	0800709d 	.word	0x0800709d
 800afcc:	0800ad4f 	.word	0x0800ad4f
 800afd0:	0800c97a 	.word	0x0800c97a

0800afd4 <__swbuf_r>:
 800afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd6:	460e      	mov	r6, r1
 800afd8:	4614      	mov	r4, r2
 800afda:	4605      	mov	r5, r0
 800afdc:	b118      	cbz	r0, 800afe6 <__swbuf_r+0x12>
 800afde:	6983      	ldr	r3, [r0, #24]
 800afe0:	b90b      	cbnz	r3, 800afe6 <__swbuf_r+0x12>
 800afe2:	f000 f9d9 	bl	800b398 <__sinit>
 800afe6:	4b21      	ldr	r3, [pc, #132]	; (800b06c <__swbuf_r+0x98>)
 800afe8:	429c      	cmp	r4, r3
 800afea:	d12b      	bne.n	800b044 <__swbuf_r+0x70>
 800afec:	686c      	ldr	r4, [r5, #4]
 800afee:	69a3      	ldr	r3, [r4, #24]
 800aff0:	60a3      	str	r3, [r4, #8]
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	071a      	lsls	r2, r3, #28
 800aff6:	d52f      	bpl.n	800b058 <__swbuf_r+0x84>
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	b36b      	cbz	r3, 800b058 <__swbuf_r+0x84>
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	6820      	ldr	r0, [r4, #0]
 800b000:	1ac0      	subs	r0, r0, r3
 800b002:	6963      	ldr	r3, [r4, #20]
 800b004:	b2f6      	uxtb	r6, r6
 800b006:	4283      	cmp	r3, r0
 800b008:	4637      	mov	r7, r6
 800b00a:	dc04      	bgt.n	800b016 <__swbuf_r+0x42>
 800b00c:	4621      	mov	r1, r4
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 f92e 	bl	800b270 <_fflush_r>
 800b014:	bb30      	cbnz	r0, 800b064 <__swbuf_r+0x90>
 800b016:	68a3      	ldr	r3, [r4, #8]
 800b018:	3b01      	subs	r3, #1
 800b01a:	60a3      	str	r3, [r4, #8]
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	6022      	str	r2, [r4, #0]
 800b022:	701e      	strb	r6, [r3, #0]
 800b024:	6963      	ldr	r3, [r4, #20]
 800b026:	3001      	adds	r0, #1
 800b028:	4283      	cmp	r3, r0
 800b02a:	d004      	beq.n	800b036 <__swbuf_r+0x62>
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	07db      	lsls	r3, r3, #31
 800b030:	d506      	bpl.n	800b040 <__swbuf_r+0x6c>
 800b032:	2e0a      	cmp	r6, #10
 800b034:	d104      	bne.n	800b040 <__swbuf_r+0x6c>
 800b036:	4621      	mov	r1, r4
 800b038:	4628      	mov	r0, r5
 800b03a:	f000 f919 	bl	800b270 <_fflush_r>
 800b03e:	b988      	cbnz	r0, 800b064 <__swbuf_r+0x90>
 800b040:	4638      	mov	r0, r7
 800b042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b044:	4b0a      	ldr	r3, [pc, #40]	; (800b070 <__swbuf_r+0x9c>)
 800b046:	429c      	cmp	r4, r3
 800b048:	d101      	bne.n	800b04e <__swbuf_r+0x7a>
 800b04a:	68ac      	ldr	r4, [r5, #8]
 800b04c:	e7cf      	b.n	800afee <__swbuf_r+0x1a>
 800b04e:	4b09      	ldr	r3, [pc, #36]	; (800b074 <__swbuf_r+0xa0>)
 800b050:	429c      	cmp	r4, r3
 800b052:	bf08      	it	eq
 800b054:	68ec      	ldreq	r4, [r5, #12]
 800b056:	e7ca      	b.n	800afee <__swbuf_r+0x1a>
 800b058:	4621      	mov	r1, r4
 800b05a:	4628      	mov	r0, r5
 800b05c:	f000 f80c 	bl	800b078 <__swsetup_r>
 800b060:	2800      	cmp	r0, #0
 800b062:	d0cb      	beq.n	800affc <__swbuf_r+0x28>
 800b064:	f04f 37ff 	mov.w	r7, #4294967295
 800b068:	e7ea      	b.n	800b040 <__swbuf_r+0x6c>
 800b06a:	bf00      	nop
 800b06c:	0800c9e4 	.word	0x0800c9e4
 800b070:	0800ca04 	.word	0x0800ca04
 800b074:	0800c9c4 	.word	0x0800c9c4

0800b078 <__swsetup_r>:
 800b078:	4b32      	ldr	r3, [pc, #200]	; (800b144 <__swsetup_r+0xcc>)
 800b07a:	b570      	push	{r4, r5, r6, lr}
 800b07c:	681d      	ldr	r5, [r3, #0]
 800b07e:	4606      	mov	r6, r0
 800b080:	460c      	mov	r4, r1
 800b082:	b125      	cbz	r5, 800b08e <__swsetup_r+0x16>
 800b084:	69ab      	ldr	r3, [r5, #24]
 800b086:	b913      	cbnz	r3, 800b08e <__swsetup_r+0x16>
 800b088:	4628      	mov	r0, r5
 800b08a:	f000 f985 	bl	800b398 <__sinit>
 800b08e:	4b2e      	ldr	r3, [pc, #184]	; (800b148 <__swsetup_r+0xd0>)
 800b090:	429c      	cmp	r4, r3
 800b092:	d10f      	bne.n	800b0b4 <__swsetup_r+0x3c>
 800b094:	686c      	ldr	r4, [r5, #4]
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b09c:	0719      	lsls	r1, r3, #28
 800b09e:	d42c      	bmi.n	800b0fa <__swsetup_r+0x82>
 800b0a0:	06dd      	lsls	r5, r3, #27
 800b0a2:	d411      	bmi.n	800b0c8 <__swsetup_r+0x50>
 800b0a4:	2309      	movs	r3, #9
 800b0a6:	6033      	str	r3, [r6, #0]
 800b0a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b2:	e03e      	b.n	800b132 <__swsetup_r+0xba>
 800b0b4:	4b25      	ldr	r3, [pc, #148]	; (800b14c <__swsetup_r+0xd4>)
 800b0b6:	429c      	cmp	r4, r3
 800b0b8:	d101      	bne.n	800b0be <__swsetup_r+0x46>
 800b0ba:	68ac      	ldr	r4, [r5, #8]
 800b0bc:	e7eb      	b.n	800b096 <__swsetup_r+0x1e>
 800b0be:	4b24      	ldr	r3, [pc, #144]	; (800b150 <__swsetup_r+0xd8>)
 800b0c0:	429c      	cmp	r4, r3
 800b0c2:	bf08      	it	eq
 800b0c4:	68ec      	ldreq	r4, [r5, #12]
 800b0c6:	e7e6      	b.n	800b096 <__swsetup_r+0x1e>
 800b0c8:	0758      	lsls	r0, r3, #29
 800b0ca:	d512      	bpl.n	800b0f2 <__swsetup_r+0x7a>
 800b0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0ce:	b141      	cbz	r1, 800b0e2 <__swsetup_r+0x6a>
 800b0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0d4:	4299      	cmp	r1, r3
 800b0d6:	d002      	beq.n	800b0de <__swsetup_r+0x66>
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7ff fb65 	bl	800a7a8 <_free_r>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6363      	str	r3, [r4, #52]	; 0x34
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6063      	str	r3, [r4, #4]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f043 0308 	orr.w	r3, r3, #8
 800b0f8:	81a3      	strh	r3, [r4, #12]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	b94b      	cbnz	r3, 800b112 <__swsetup_r+0x9a>
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b108:	d003      	beq.n	800b112 <__swsetup_r+0x9a>
 800b10a:	4621      	mov	r1, r4
 800b10c:	4630      	mov	r0, r6
 800b10e:	f000 fa07 	bl	800b520 <__smakebuf_r>
 800b112:	89a0      	ldrh	r0, [r4, #12]
 800b114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b118:	f010 0301 	ands.w	r3, r0, #1
 800b11c:	d00a      	beq.n	800b134 <__swsetup_r+0xbc>
 800b11e:	2300      	movs	r3, #0
 800b120:	60a3      	str	r3, [r4, #8]
 800b122:	6963      	ldr	r3, [r4, #20]
 800b124:	425b      	negs	r3, r3
 800b126:	61a3      	str	r3, [r4, #24]
 800b128:	6923      	ldr	r3, [r4, #16]
 800b12a:	b943      	cbnz	r3, 800b13e <__swsetup_r+0xc6>
 800b12c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b130:	d1ba      	bne.n	800b0a8 <__swsetup_r+0x30>
 800b132:	bd70      	pop	{r4, r5, r6, pc}
 800b134:	0781      	lsls	r1, r0, #30
 800b136:	bf58      	it	pl
 800b138:	6963      	ldrpl	r3, [r4, #20]
 800b13a:	60a3      	str	r3, [r4, #8]
 800b13c:	e7f4      	b.n	800b128 <__swsetup_r+0xb0>
 800b13e:	2000      	movs	r0, #0
 800b140:	e7f7      	b.n	800b132 <__swsetup_r+0xba>
 800b142:	bf00      	nop
 800b144:	20000018 	.word	0x20000018
 800b148:	0800c9e4 	.word	0x0800c9e4
 800b14c:	0800ca04 	.word	0x0800ca04
 800b150:	0800c9c4 	.word	0x0800c9c4

0800b154 <abort>:
 800b154:	b508      	push	{r3, lr}
 800b156:	2006      	movs	r0, #6
 800b158:	f000 fa52 	bl	800b600 <raise>
 800b15c:	2001      	movs	r0, #1
 800b15e:	f7f6 fdbf 	bl	8001ce0 <_exit>
	...

0800b164 <__sflush_r>:
 800b164:	898a      	ldrh	r2, [r1, #12]
 800b166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16a:	4605      	mov	r5, r0
 800b16c:	0710      	lsls	r0, r2, #28
 800b16e:	460c      	mov	r4, r1
 800b170:	d458      	bmi.n	800b224 <__sflush_r+0xc0>
 800b172:	684b      	ldr	r3, [r1, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	dc05      	bgt.n	800b184 <__sflush_r+0x20>
 800b178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	dc02      	bgt.n	800b184 <__sflush_r+0x20>
 800b17e:	2000      	movs	r0, #0
 800b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b186:	2e00      	cmp	r6, #0
 800b188:	d0f9      	beq.n	800b17e <__sflush_r+0x1a>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b190:	682f      	ldr	r7, [r5, #0]
 800b192:	602b      	str	r3, [r5, #0]
 800b194:	d032      	beq.n	800b1fc <__sflush_r+0x98>
 800b196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	075a      	lsls	r2, r3, #29
 800b19c:	d505      	bpl.n	800b1aa <__sflush_r+0x46>
 800b19e:	6863      	ldr	r3, [r4, #4]
 800b1a0:	1ac0      	subs	r0, r0, r3
 800b1a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1a4:	b10b      	cbz	r3, 800b1aa <__sflush_r+0x46>
 800b1a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1a8:	1ac0      	subs	r0, r0, r3
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1b0:	6a21      	ldr	r1, [r4, #32]
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b0      	blx	r6
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	d106      	bne.n	800b1ca <__sflush_r+0x66>
 800b1bc:	6829      	ldr	r1, [r5, #0]
 800b1be:	291d      	cmp	r1, #29
 800b1c0:	d82c      	bhi.n	800b21c <__sflush_r+0xb8>
 800b1c2:	4a2a      	ldr	r2, [pc, #168]	; (800b26c <__sflush_r+0x108>)
 800b1c4:	40ca      	lsrs	r2, r1
 800b1c6:	07d6      	lsls	r6, r2, #31
 800b1c8:	d528      	bpl.n	800b21c <__sflush_r+0xb8>
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	6062      	str	r2, [r4, #4]
 800b1ce:	04d9      	lsls	r1, r3, #19
 800b1d0:	6922      	ldr	r2, [r4, #16]
 800b1d2:	6022      	str	r2, [r4, #0]
 800b1d4:	d504      	bpl.n	800b1e0 <__sflush_r+0x7c>
 800b1d6:	1c42      	adds	r2, r0, #1
 800b1d8:	d101      	bne.n	800b1de <__sflush_r+0x7a>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	b903      	cbnz	r3, 800b1e0 <__sflush_r+0x7c>
 800b1de:	6560      	str	r0, [r4, #84]	; 0x54
 800b1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1e2:	602f      	str	r7, [r5, #0]
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	d0ca      	beq.n	800b17e <__sflush_r+0x1a>
 800b1e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1ec:	4299      	cmp	r1, r3
 800b1ee:	d002      	beq.n	800b1f6 <__sflush_r+0x92>
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f7ff fad9 	bl	800a7a8 <_free_r>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b1fa:	e7c1      	b.n	800b180 <__sflush_r+0x1c>
 800b1fc:	6a21      	ldr	r1, [r4, #32]
 800b1fe:	2301      	movs	r3, #1
 800b200:	4628      	mov	r0, r5
 800b202:	47b0      	blx	r6
 800b204:	1c41      	adds	r1, r0, #1
 800b206:	d1c7      	bne.n	800b198 <__sflush_r+0x34>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0c4      	beq.n	800b198 <__sflush_r+0x34>
 800b20e:	2b1d      	cmp	r3, #29
 800b210:	d001      	beq.n	800b216 <__sflush_r+0xb2>
 800b212:	2b16      	cmp	r3, #22
 800b214:	d101      	bne.n	800b21a <__sflush_r+0xb6>
 800b216:	602f      	str	r7, [r5, #0]
 800b218:	e7b1      	b.n	800b17e <__sflush_r+0x1a>
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b220:	81a3      	strh	r3, [r4, #12]
 800b222:	e7ad      	b.n	800b180 <__sflush_r+0x1c>
 800b224:	690f      	ldr	r7, [r1, #16]
 800b226:	2f00      	cmp	r7, #0
 800b228:	d0a9      	beq.n	800b17e <__sflush_r+0x1a>
 800b22a:	0793      	lsls	r3, r2, #30
 800b22c:	680e      	ldr	r6, [r1, #0]
 800b22e:	bf08      	it	eq
 800b230:	694b      	ldreq	r3, [r1, #20]
 800b232:	600f      	str	r7, [r1, #0]
 800b234:	bf18      	it	ne
 800b236:	2300      	movne	r3, #0
 800b238:	eba6 0807 	sub.w	r8, r6, r7
 800b23c:	608b      	str	r3, [r1, #8]
 800b23e:	f1b8 0f00 	cmp.w	r8, #0
 800b242:	dd9c      	ble.n	800b17e <__sflush_r+0x1a>
 800b244:	6a21      	ldr	r1, [r4, #32]
 800b246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b248:	4643      	mov	r3, r8
 800b24a:	463a      	mov	r2, r7
 800b24c:	4628      	mov	r0, r5
 800b24e:	47b0      	blx	r6
 800b250:	2800      	cmp	r0, #0
 800b252:	dc06      	bgt.n	800b262 <__sflush_r+0xfe>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e78e      	b.n	800b180 <__sflush_r+0x1c>
 800b262:	4407      	add	r7, r0
 800b264:	eba8 0800 	sub.w	r8, r8, r0
 800b268:	e7e9      	b.n	800b23e <__sflush_r+0xda>
 800b26a:	bf00      	nop
 800b26c:	20400001 	.word	0x20400001

0800b270 <_fflush_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	690b      	ldr	r3, [r1, #16]
 800b274:	4605      	mov	r5, r0
 800b276:	460c      	mov	r4, r1
 800b278:	b913      	cbnz	r3, 800b280 <_fflush_r+0x10>
 800b27a:	2500      	movs	r5, #0
 800b27c:	4628      	mov	r0, r5
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	b118      	cbz	r0, 800b28a <_fflush_r+0x1a>
 800b282:	6983      	ldr	r3, [r0, #24]
 800b284:	b90b      	cbnz	r3, 800b28a <_fflush_r+0x1a>
 800b286:	f000 f887 	bl	800b398 <__sinit>
 800b28a:	4b14      	ldr	r3, [pc, #80]	; (800b2dc <_fflush_r+0x6c>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	d11b      	bne.n	800b2c8 <_fflush_r+0x58>
 800b290:	686c      	ldr	r4, [r5, #4]
 800b292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d0ef      	beq.n	800b27a <_fflush_r+0xa>
 800b29a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b29c:	07d0      	lsls	r0, r2, #31
 800b29e:	d404      	bmi.n	800b2aa <_fflush_r+0x3a>
 800b2a0:	0599      	lsls	r1, r3, #22
 800b2a2:	d402      	bmi.n	800b2aa <_fflush_r+0x3a>
 800b2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a6:	f000 f915 	bl	800b4d4 <__retarget_lock_acquire_recursive>
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f7ff ff59 	bl	800b164 <__sflush_r>
 800b2b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b4:	07da      	lsls	r2, r3, #31
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	d4e0      	bmi.n	800b27c <_fflush_r+0xc>
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	059b      	lsls	r3, r3, #22
 800b2be:	d4dd      	bmi.n	800b27c <_fflush_r+0xc>
 800b2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2c2:	f000 f908 	bl	800b4d6 <__retarget_lock_release_recursive>
 800b2c6:	e7d9      	b.n	800b27c <_fflush_r+0xc>
 800b2c8:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <_fflush_r+0x70>)
 800b2ca:	429c      	cmp	r4, r3
 800b2cc:	d101      	bne.n	800b2d2 <_fflush_r+0x62>
 800b2ce:	68ac      	ldr	r4, [r5, #8]
 800b2d0:	e7df      	b.n	800b292 <_fflush_r+0x22>
 800b2d2:	4b04      	ldr	r3, [pc, #16]	; (800b2e4 <_fflush_r+0x74>)
 800b2d4:	429c      	cmp	r4, r3
 800b2d6:	bf08      	it	eq
 800b2d8:	68ec      	ldreq	r4, [r5, #12]
 800b2da:	e7da      	b.n	800b292 <_fflush_r+0x22>
 800b2dc:	0800c9e4 	.word	0x0800c9e4
 800b2e0:	0800ca04 	.word	0x0800ca04
 800b2e4:	0800c9c4 	.word	0x0800c9c4

0800b2e8 <std>:
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	b510      	push	{r4, lr}
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b2f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2f6:	6083      	str	r3, [r0, #8]
 800b2f8:	8181      	strh	r1, [r0, #12]
 800b2fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b2fc:	81c2      	strh	r2, [r0, #14]
 800b2fe:	6183      	str	r3, [r0, #24]
 800b300:	4619      	mov	r1, r3
 800b302:	2208      	movs	r2, #8
 800b304:	305c      	adds	r0, #92	; 0x5c
 800b306:	f7fb fe21 	bl	8006f4c <memset>
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <std+0x38>)
 800b30c:	6263      	str	r3, [r4, #36]	; 0x24
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <std+0x3c>)
 800b310:	62a3      	str	r3, [r4, #40]	; 0x28
 800b312:	4b05      	ldr	r3, [pc, #20]	; (800b328 <std+0x40>)
 800b314:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b316:	4b05      	ldr	r3, [pc, #20]	; (800b32c <std+0x44>)
 800b318:	6224      	str	r4, [r4, #32]
 800b31a:	6323      	str	r3, [r4, #48]	; 0x30
 800b31c:	bd10      	pop	{r4, pc}
 800b31e:	bf00      	nop
 800b320:	0800b639 	.word	0x0800b639
 800b324:	0800b65b 	.word	0x0800b65b
 800b328:	0800b693 	.word	0x0800b693
 800b32c:	0800b6b7 	.word	0x0800b6b7

0800b330 <_cleanup_r>:
 800b330:	4901      	ldr	r1, [pc, #4]	; (800b338 <_cleanup_r+0x8>)
 800b332:	f000 b8af 	b.w	800b494 <_fwalk_reent>
 800b336:	bf00      	nop
 800b338:	0800b271 	.word	0x0800b271

0800b33c <__sfmoreglue>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	1e4a      	subs	r2, r1, #1
 800b340:	2568      	movs	r5, #104	; 0x68
 800b342:	4355      	muls	r5, r2
 800b344:	460e      	mov	r6, r1
 800b346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b34a:	f7ff fa7d 	bl	800a848 <_malloc_r>
 800b34e:	4604      	mov	r4, r0
 800b350:	b140      	cbz	r0, 800b364 <__sfmoreglue+0x28>
 800b352:	2100      	movs	r1, #0
 800b354:	e9c0 1600 	strd	r1, r6, [r0]
 800b358:	300c      	adds	r0, #12
 800b35a:	60a0      	str	r0, [r4, #8]
 800b35c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b360:	f7fb fdf4 	bl	8006f4c <memset>
 800b364:	4620      	mov	r0, r4
 800b366:	bd70      	pop	{r4, r5, r6, pc}

0800b368 <__sfp_lock_acquire>:
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <__sfp_lock_acquire+0x8>)
 800b36a:	f000 b8b3 	b.w	800b4d4 <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	200050d4 	.word	0x200050d4

0800b374 <__sfp_lock_release>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__sfp_lock_release+0x8>)
 800b376:	f000 b8ae 	b.w	800b4d6 <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	200050d4 	.word	0x200050d4

0800b380 <__sinit_lock_acquire>:
 800b380:	4801      	ldr	r0, [pc, #4]	; (800b388 <__sinit_lock_acquire+0x8>)
 800b382:	f000 b8a7 	b.w	800b4d4 <__retarget_lock_acquire_recursive>
 800b386:	bf00      	nop
 800b388:	200050cf 	.word	0x200050cf

0800b38c <__sinit_lock_release>:
 800b38c:	4801      	ldr	r0, [pc, #4]	; (800b394 <__sinit_lock_release+0x8>)
 800b38e:	f000 b8a2 	b.w	800b4d6 <__retarget_lock_release_recursive>
 800b392:	bf00      	nop
 800b394:	200050cf 	.word	0x200050cf

0800b398 <__sinit>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	4604      	mov	r4, r0
 800b39c:	f7ff fff0 	bl	800b380 <__sinit_lock_acquire>
 800b3a0:	69a3      	ldr	r3, [r4, #24]
 800b3a2:	b11b      	cbz	r3, 800b3ac <__sinit+0x14>
 800b3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a8:	f7ff bff0 	b.w	800b38c <__sinit_lock_release>
 800b3ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b3b2:	4b13      	ldr	r3, [pc, #76]	; (800b400 <__sinit+0x68>)
 800b3b4:	4a13      	ldr	r2, [pc, #76]	; (800b404 <__sinit+0x6c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	bf04      	itt	eq
 800b3be:	2301      	moveq	r3, #1
 800b3c0:	61a3      	streq	r3, [r4, #24]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 f820 	bl	800b408 <__sfp>
 800b3c8:	6060      	str	r0, [r4, #4]
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 f81c 	bl	800b408 <__sfp>
 800b3d0:	60a0      	str	r0, [r4, #8]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 f818 	bl	800b408 <__sfp>
 800b3d8:	2200      	movs	r2, #0
 800b3da:	60e0      	str	r0, [r4, #12]
 800b3dc:	2104      	movs	r1, #4
 800b3de:	6860      	ldr	r0, [r4, #4]
 800b3e0:	f7ff ff82 	bl	800b2e8 <std>
 800b3e4:	68a0      	ldr	r0, [r4, #8]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	2109      	movs	r1, #9
 800b3ea:	f7ff ff7d 	bl	800b2e8 <std>
 800b3ee:	68e0      	ldr	r0, [r4, #12]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	2112      	movs	r1, #18
 800b3f4:	f7ff ff78 	bl	800b2e8 <std>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	61a3      	str	r3, [r4, #24]
 800b3fc:	e7d2      	b.n	800b3a4 <__sinit+0xc>
 800b3fe:	bf00      	nop
 800b400:	0800c570 	.word	0x0800c570
 800b404:	0800b331 	.word	0x0800b331

0800b408 <__sfp>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	4607      	mov	r7, r0
 800b40c:	f7ff ffac 	bl	800b368 <__sfp_lock_acquire>
 800b410:	4b1e      	ldr	r3, [pc, #120]	; (800b48c <__sfp+0x84>)
 800b412:	681e      	ldr	r6, [r3, #0]
 800b414:	69b3      	ldr	r3, [r6, #24]
 800b416:	b913      	cbnz	r3, 800b41e <__sfp+0x16>
 800b418:	4630      	mov	r0, r6
 800b41a:	f7ff ffbd 	bl	800b398 <__sinit>
 800b41e:	3648      	adds	r6, #72	; 0x48
 800b420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b424:	3b01      	subs	r3, #1
 800b426:	d503      	bpl.n	800b430 <__sfp+0x28>
 800b428:	6833      	ldr	r3, [r6, #0]
 800b42a:	b30b      	cbz	r3, 800b470 <__sfp+0x68>
 800b42c:	6836      	ldr	r6, [r6, #0]
 800b42e:	e7f7      	b.n	800b420 <__sfp+0x18>
 800b430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b434:	b9d5      	cbnz	r5, 800b46c <__sfp+0x64>
 800b436:	4b16      	ldr	r3, [pc, #88]	; (800b490 <__sfp+0x88>)
 800b438:	60e3      	str	r3, [r4, #12]
 800b43a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b43e:	6665      	str	r5, [r4, #100]	; 0x64
 800b440:	f000 f847 	bl	800b4d2 <__retarget_lock_init_recursive>
 800b444:	f7ff ff96 	bl	800b374 <__sfp_lock_release>
 800b448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b44c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b450:	6025      	str	r5, [r4, #0]
 800b452:	61a5      	str	r5, [r4, #24]
 800b454:	2208      	movs	r2, #8
 800b456:	4629      	mov	r1, r5
 800b458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b45c:	f7fb fd76 	bl	8006f4c <memset>
 800b460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b468:	4620      	mov	r0, r4
 800b46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b46c:	3468      	adds	r4, #104	; 0x68
 800b46e:	e7d9      	b.n	800b424 <__sfp+0x1c>
 800b470:	2104      	movs	r1, #4
 800b472:	4638      	mov	r0, r7
 800b474:	f7ff ff62 	bl	800b33c <__sfmoreglue>
 800b478:	4604      	mov	r4, r0
 800b47a:	6030      	str	r0, [r6, #0]
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d1d5      	bne.n	800b42c <__sfp+0x24>
 800b480:	f7ff ff78 	bl	800b374 <__sfp_lock_release>
 800b484:	230c      	movs	r3, #12
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	e7ee      	b.n	800b468 <__sfp+0x60>
 800b48a:	bf00      	nop
 800b48c:	0800c570 	.word	0x0800c570
 800b490:	ffff0001 	.word	0xffff0001

0800b494 <_fwalk_reent>:
 800b494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b498:	4606      	mov	r6, r0
 800b49a:	4688      	mov	r8, r1
 800b49c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4a0:	2700      	movs	r7, #0
 800b4a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b4aa:	d505      	bpl.n	800b4b8 <_fwalk_reent+0x24>
 800b4ac:	6824      	ldr	r4, [r4, #0]
 800b4ae:	2c00      	cmp	r4, #0
 800b4b0:	d1f7      	bne.n	800b4a2 <_fwalk_reent+0xe>
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b8:	89ab      	ldrh	r3, [r5, #12]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d907      	bls.n	800b4ce <_fwalk_reent+0x3a>
 800b4be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	d003      	beq.n	800b4ce <_fwalk_reent+0x3a>
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	47c0      	blx	r8
 800b4cc:	4307      	orrs	r7, r0
 800b4ce:	3568      	adds	r5, #104	; 0x68
 800b4d0:	e7e9      	b.n	800b4a6 <_fwalk_reent+0x12>

0800b4d2 <__retarget_lock_init_recursive>:
 800b4d2:	4770      	bx	lr

0800b4d4 <__retarget_lock_acquire_recursive>:
 800b4d4:	4770      	bx	lr

0800b4d6 <__retarget_lock_release_recursive>:
 800b4d6:	4770      	bx	lr

0800b4d8 <__swhatbuf_r>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	460e      	mov	r6, r1
 800b4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e0:	2900      	cmp	r1, #0
 800b4e2:	b096      	sub	sp, #88	; 0x58
 800b4e4:	4614      	mov	r4, r2
 800b4e6:	461d      	mov	r5, r3
 800b4e8:	da07      	bge.n	800b4fa <__swhatbuf_r+0x22>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	602b      	str	r3, [r5, #0]
 800b4ee:	89b3      	ldrh	r3, [r6, #12]
 800b4f0:	061a      	lsls	r2, r3, #24
 800b4f2:	d410      	bmi.n	800b516 <__swhatbuf_r+0x3e>
 800b4f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f8:	e00e      	b.n	800b518 <__swhatbuf_r+0x40>
 800b4fa:	466a      	mov	r2, sp
 800b4fc:	f000 f902 	bl	800b704 <_fstat_r>
 800b500:	2800      	cmp	r0, #0
 800b502:	dbf2      	blt.n	800b4ea <__swhatbuf_r+0x12>
 800b504:	9a01      	ldr	r2, [sp, #4]
 800b506:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b50a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b50e:	425a      	negs	r2, r3
 800b510:	415a      	adcs	r2, r3
 800b512:	602a      	str	r2, [r5, #0]
 800b514:	e7ee      	b.n	800b4f4 <__swhatbuf_r+0x1c>
 800b516:	2340      	movs	r3, #64	; 0x40
 800b518:	2000      	movs	r0, #0
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	b016      	add	sp, #88	; 0x58
 800b51e:	bd70      	pop	{r4, r5, r6, pc}

0800b520 <__smakebuf_r>:
 800b520:	898b      	ldrh	r3, [r1, #12]
 800b522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b524:	079d      	lsls	r5, r3, #30
 800b526:	4606      	mov	r6, r0
 800b528:	460c      	mov	r4, r1
 800b52a:	d507      	bpl.n	800b53c <__smakebuf_r+0x1c>
 800b52c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	6123      	str	r3, [r4, #16]
 800b534:	2301      	movs	r3, #1
 800b536:	6163      	str	r3, [r4, #20]
 800b538:	b002      	add	sp, #8
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	ab01      	add	r3, sp, #4
 800b53e:	466a      	mov	r2, sp
 800b540:	f7ff ffca 	bl	800b4d8 <__swhatbuf_r>
 800b544:	9900      	ldr	r1, [sp, #0]
 800b546:	4605      	mov	r5, r0
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff f97d 	bl	800a848 <_malloc_r>
 800b54e:	b948      	cbnz	r0, 800b564 <__smakebuf_r+0x44>
 800b550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b554:	059a      	lsls	r2, r3, #22
 800b556:	d4ef      	bmi.n	800b538 <__smakebuf_r+0x18>
 800b558:	f023 0303 	bic.w	r3, r3, #3
 800b55c:	f043 0302 	orr.w	r3, r3, #2
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	e7e3      	b.n	800b52c <__smakebuf_r+0xc>
 800b564:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <__smakebuf_r+0x7c>)
 800b566:	62b3      	str	r3, [r6, #40]	; 0x28
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	6020      	str	r0, [r4, #0]
 800b56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	9b00      	ldr	r3, [sp, #0]
 800b574:	6163      	str	r3, [r4, #20]
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	6120      	str	r0, [r4, #16]
 800b57a:	b15b      	cbz	r3, 800b594 <__smakebuf_r+0x74>
 800b57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b580:	4630      	mov	r0, r6
 800b582:	f000 f8d1 	bl	800b728 <_isatty_r>
 800b586:	b128      	cbz	r0, 800b594 <__smakebuf_r+0x74>
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f023 0303 	bic.w	r3, r3, #3
 800b58e:	f043 0301 	orr.w	r3, r3, #1
 800b592:	81a3      	strh	r3, [r4, #12]
 800b594:	89a0      	ldrh	r0, [r4, #12]
 800b596:	4305      	orrs	r5, r0
 800b598:	81a5      	strh	r5, [r4, #12]
 800b59a:	e7cd      	b.n	800b538 <__smakebuf_r+0x18>
 800b59c:	0800b331 	.word	0x0800b331

0800b5a0 <_malloc_usable_size_r>:
 800b5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a4:	1f18      	subs	r0, r3, #4
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	bfbc      	itt	lt
 800b5aa:	580b      	ldrlt	r3, [r1, r0]
 800b5ac:	18c0      	addlt	r0, r0, r3
 800b5ae:	4770      	bx	lr

0800b5b0 <_raise_r>:
 800b5b0:	291f      	cmp	r1, #31
 800b5b2:	b538      	push	{r3, r4, r5, lr}
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	d904      	bls.n	800b5c4 <_raise_r+0x14>
 800b5ba:	2316      	movs	r3, #22
 800b5bc:	6003      	str	r3, [r0, #0]
 800b5be:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5c6:	b112      	cbz	r2, 800b5ce <_raise_r+0x1e>
 800b5c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5cc:	b94b      	cbnz	r3, 800b5e2 <_raise_r+0x32>
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 f830 	bl	800b634 <_getpid_r>
 800b5d4:	462a      	mov	r2, r5
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	4620      	mov	r0, r4
 800b5da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5de:	f000 b817 	b.w	800b610 <_kill_r>
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d00a      	beq.n	800b5fc <_raise_r+0x4c>
 800b5e6:	1c59      	adds	r1, r3, #1
 800b5e8:	d103      	bne.n	800b5f2 <_raise_r+0x42>
 800b5ea:	2316      	movs	r3, #22
 800b5ec:	6003      	str	r3, [r0, #0]
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	e7e7      	b.n	800b5c2 <_raise_r+0x12>
 800b5f2:	2400      	movs	r4, #0
 800b5f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	4798      	blx	r3
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	e7e0      	b.n	800b5c2 <_raise_r+0x12>

0800b600 <raise>:
 800b600:	4b02      	ldr	r3, [pc, #8]	; (800b60c <raise+0xc>)
 800b602:	4601      	mov	r1, r0
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	f7ff bfd3 	b.w	800b5b0 <_raise_r>
 800b60a:	bf00      	nop
 800b60c:	20000018 	.word	0x20000018

0800b610 <_kill_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d07      	ldr	r5, [pc, #28]	; (800b630 <_kill_r+0x20>)
 800b614:	2300      	movs	r3, #0
 800b616:	4604      	mov	r4, r0
 800b618:	4608      	mov	r0, r1
 800b61a:	4611      	mov	r1, r2
 800b61c:	602b      	str	r3, [r5, #0]
 800b61e:	f7f6 fb4f 	bl	8001cc0 <_kill>
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	d102      	bne.n	800b62c <_kill_r+0x1c>
 800b626:	682b      	ldr	r3, [r5, #0]
 800b628:	b103      	cbz	r3, 800b62c <_kill_r+0x1c>
 800b62a:	6023      	str	r3, [r4, #0]
 800b62c:	bd38      	pop	{r3, r4, r5, pc}
 800b62e:	bf00      	nop
 800b630:	200050c8 	.word	0x200050c8

0800b634 <_getpid_r>:
 800b634:	f7f6 bb3c 	b.w	8001cb0 <_getpid>

0800b638 <__sread>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	460c      	mov	r4, r1
 800b63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b640:	f000 f894 	bl	800b76c <_read_r>
 800b644:	2800      	cmp	r0, #0
 800b646:	bfab      	itete	ge
 800b648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b64a:	89a3      	ldrhlt	r3, [r4, #12]
 800b64c:	181b      	addge	r3, r3, r0
 800b64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b652:	bfac      	ite	ge
 800b654:	6563      	strge	r3, [r4, #84]	; 0x54
 800b656:	81a3      	strhlt	r3, [r4, #12]
 800b658:	bd10      	pop	{r4, pc}

0800b65a <__swrite>:
 800b65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65e:	461f      	mov	r7, r3
 800b660:	898b      	ldrh	r3, [r1, #12]
 800b662:	05db      	lsls	r3, r3, #23
 800b664:	4605      	mov	r5, r0
 800b666:	460c      	mov	r4, r1
 800b668:	4616      	mov	r6, r2
 800b66a:	d505      	bpl.n	800b678 <__swrite+0x1e>
 800b66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b670:	2302      	movs	r3, #2
 800b672:	2200      	movs	r2, #0
 800b674:	f000 f868 	bl	800b748 <_lseek_r>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	4632      	mov	r2, r6
 800b686:	463b      	mov	r3, r7
 800b688:	4628      	mov	r0, r5
 800b68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	f000 b817 	b.w	800b6c0 <_write_r>

0800b692 <__sseek>:
 800b692:	b510      	push	{r4, lr}
 800b694:	460c      	mov	r4, r1
 800b696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b69a:	f000 f855 	bl	800b748 <_lseek_r>
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	bf15      	itete	ne
 800b6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6ae:	81a3      	strheq	r3, [r4, #12]
 800b6b0:	bf18      	it	ne
 800b6b2:	81a3      	strhne	r3, [r4, #12]
 800b6b4:	bd10      	pop	{r4, pc}

0800b6b6 <__sclose>:
 800b6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ba:	f000 b813 	b.w	800b6e4 <_close_r>
	...

0800b6c0 <_write_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d07      	ldr	r5, [pc, #28]	; (800b6e0 <_write_r+0x20>)
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	602a      	str	r2, [r5, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f7f6 fb2d 	bl	8001d2e <_write>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_write_r+0x1e>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_write_r+0x1e>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	200050c8 	.word	0x200050c8

0800b6e4 <_close_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d06      	ldr	r5, [pc, #24]	; (800b700 <_close_r+0x1c>)
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	4608      	mov	r0, r1
 800b6ee:	602b      	str	r3, [r5, #0]
 800b6f0:	f7f6 fb39 	bl	8001d66 <_close>
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	d102      	bne.n	800b6fe <_close_r+0x1a>
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	b103      	cbz	r3, 800b6fe <_close_r+0x1a>
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	200050c8 	.word	0x200050c8

0800b704 <_fstat_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d07      	ldr	r5, [pc, #28]	; (800b724 <_fstat_r+0x20>)
 800b708:	2300      	movs	r3, #0
 800b70a:	4604      	mov	r4, r0
 800b70c:	4608      	mov	r0, r1
 800b70e:	4611      	mov	r1, r2
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	f7f6 fb34 	bl	8001d7e <_fstat>
 800b716:	1c43      	adds	r3, r0, #1
 800b718:	d102      	bne.n	800b720 <_fstat_r+0x1c>
 800b71a:	682b      	ldr	r3, [r5, #0]
 800b71c:	b103      	cbz	r3, 800b720 <_fstat_r+0x1c>
 800b71e:	6023      	str	r3, [r4, #0]
 800b720:	bd38      	pop	{r3, r4, r5, pc}
 800b722:	bf00      	nop
 800b724:	200050c8 	.word	0x200050c8

0800b728 <_isatty_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4d06      	ldr	r5, [pc, #24]	; (800b744 <_isatty_r+0x1c>)
 800b72c:	2300      	movs	r3, #0
 800b72e:	4604      	mov	r4, r0
 800b730:	4608      	mov	r0, r1
 800b732:	602b      	str	r3, [r5, #0]
 800b734:	f7f6 fb33 	bl	8001d9e <_isatty>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d102      	bne.n	800b742 <_isatty_r+0x1a>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	b103      	cbz	r3, 800b742 <_isatty_r+0x1a>
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	200050c8 	.word	0x200050c8

0800b748 <_lseek_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4d07      	ldr	r5, [pc, #28]	; (800b768 <_lseek_r+0x20>)
 800b74c:	4604      	mov	r4, r0
 800b74e:	4608      	mov	r0, r1
 800b750:	4611      	mov	r1, r2
 800b752:	2200      	movs	r2, #0
 800b754:	602a      	str	r2, [r5, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	f7f6 fb2c 	bl	8001db4 <_lseek>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d102      	bne.n	800b766 <_lseek_r+0x1e>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	b103      	cbz	r3, 800b766 <_lseek_r+0x1e>
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	200050c8 	.word	0x200050c8

0800b76c <_read_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	4d07      	ldr	r5, [pc, #28]	; (800b78c <_read_r+0x20>)
 800b770:	4604      	mov	r4, r0
 800b772:	4608      	mov	r0, r1
 800b774:	4611      	mov	r1, r2
 800b776:	2200      	movs	r2, #0
 800b778:	602a      	str	r2, [r5, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	f7f6 faba 	bl	8001cf4 <_read>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	d102      	bne.n	800b78a <_read_r+0x1e>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	b103      	cbz	r3, 800b78a <_read_r+0x1e>
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	200050c8 	.word	0x200050c8

0800b790 <_init>:
 800b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b792:	bf00      	nop
 800b794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b796:	bc08      	pop	{r3}
 800b798:	469e      	mov	lr, r3
 800b79a:	4770      	bx	lr

0800b79c <_fini>:
 800b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79e:	bf00      	nop
 800b7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7a2:	bc08      	pop	{r3}
 800b7a4:	469e      	mov	lr, r3
 800b7a6:	4770      	bx	lr
